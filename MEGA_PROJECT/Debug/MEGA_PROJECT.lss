
MEGA_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00004259  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00004259  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00004259  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000017a  00000000  00000000  00004288  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000598  00000000  00000000  00004402  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008a67  00000000  00000000  0000499a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019cd  00000000  00000000  0000d401  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000036e6  00000000  00000000  0000edce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000101c  00000000  00000000  000124b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fe  00000000  00000000  000134d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c15  00000000  00000000  00013ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  000176e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00004124  00004124  00004238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00017b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .progmemx.data 00000092  00000349  00000349  0000045d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 16 .text.DRAW_FRAME 000000aa  00002850  00002850  00002964  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LONG_STR_IN_MIDDLE_OF_SCREEN 00000028  00003c4a  00003c4a  00003d5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.STARTING_SCREEN 00000046  00003964  00003964  00003a78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.RFID_ENROLL 00000080  00002f62  00002f62  00003076  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LM35_AND_DC_MOTOR_INIT 00000014  00003fe2  00003fe2  000040f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.RFID_INIT 0000004c  00003888  00003888  0000399c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.TEMP_MOTOR_RUN 000000ce  00002312  00002312  00002426  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.RFID_READ_CARD 0000017a  000015c2  000015c2  000016d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.ULTRASONIC1_COUNT 00000024  00003d7e  00003d7e  00003e92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.ULTRASONIC2_COUNT 00000024  00003da2  00003da2  00003eb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.ULTRASONIC_TURN_LEDS_ON 000000b8  00002578  00002578  0000268c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.APP_INIT 00000034  00003b62  00003b62  00003c76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.BUTTON_1_INT 00000006  00004106  00004106  0000421a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .bss.person_count 00000001  008000a0  008000a0  00004259  2**0
                  ALLOC
 30 .bss.card__enroll_flag 00000001  008000a1  008000a1  00004259  2**0
                  ALLOC
 31 .bss.id_count 00000001  008000a2  008000a2  00004259  2**0
                  ALLOC
 32 .bss.Status_ID 00000001  008000a3  008000a3  00004259  2**0
                  ALLOC
 33 .bss.CardId   00000004  0080007d  0080007d  00004259  2**0
                  ALLOC
 34 .text.LCD_4_bit_sendCommand 000000d2  0000216e  0000216e  00002282  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.LCD_4_bit_init 0000004e  000037ec  000037ec  00003900  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.LCD_4_bit_sendChar 000000d2  00002240  00002240  00002354  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.LCD_4_bit_sendString 00000026  00003c9a  00003c9a  00003dae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.LM35_init 00000008  000040ee  000040ee  00004202  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.LM35_READ 00000026  00003cc0  00003cc0  00003dd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.oledSendStart 00000014  00003ff6  00003ff6  0000410a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.oledSendStop 00000006  0000410c  0000410c  00004220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.oledSendByte 00000006  00004112  00004112  00004226  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.oledSendCommand 0000001e  00003e8e  00003e8e  00003fa2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.OLED_Clear 00000080  00002fe2  00002fe2  000030f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.OLED_Init 000000a0  00002ae6  00002ae6  00002bfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.OLED_SetCursor 0000004e  0000383a  0000383a  0000394e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.OLED_GoToNextLine 00000014  0000400a  0000400a  0000411e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.OLED_DisplayChar 00000078  000031d6  000031d6  000032ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.OLED_DisplayString 0000001a  00003f20  00003f20  00004034  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.OLED_DisplayNumber 00000148  000019f8  000019f8  00001b0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.OLED_DisplayFloatNumber 00000070  000033ac  000033ac  000034c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.OLED_Printf 0000023c  00000ea0  00000ea0  00000fb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .progmemx.data.OledFontTable 000001db  0000016e  0000016e  00000282  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 54 .text.ReadReg 00000022  00003dea  00003dea  00003efe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.WriteReg 00000026  00003ce6  00003ce6  00003dfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.WriteRegMulti 00000080  00003062  00003062  00003176  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.ClearBitMask 0000001e  00003eac  00003eac  00003fc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.SetBitMask 0000001c  00003ee8  00003ee8  00003ffc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.calculate_crc 00000082  00002e5e  00002e5e  00002f72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.Communicate 000001e0  000010dc  000010dc  000011f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.begin   00000046  000039aa  000039aa  00003abe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.DetectCard 00000082  00002ee0  00002ee0  00002ff4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.GetCardId 000000a6  000028fa  000028fa  00002a0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.ULTRASONIC2_INIT 00000020  00003e2e  00003e2e  00003f42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text._ultrasonic2__Tim_delay_us 00000018  00003f54  00003f54  00004068  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.ULTRASONIC2_GET_DISTANCE 000000b8  00002630  00002630  00002744  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .bss.numTicks 00000002  0080008c  0080008c  00004259  2**0
                  ALLOC
 68 .bss.ultrasonic_distance 00000004  00800081  00800081  00004259  2**0
                  ALLOC
 69 .data.config  00000005  0080006e  00004138  0000424c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 70 .text.ULTRASONIC_INIT 00000020  00003e4e  00003e4e  00003f62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text._ultrasonic__Tim_delay_us 00000018  00003f6c  00003f6c  00004080  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.ULTRASONIC_GET_DISTANCE 000000b8  000026e8  000026e8  000027fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .bss.numTicks 00000002  0080008e  0080008e  00004259  2**0
                  ALLOC
 74 .bss.ultrasonic_distance 00000004  00800085  00800085  00004259  2**0
                  ALLOC
 75 .data.config  00000005  00800073  0000413d  00004251  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 76 .text.main    00000026  00003d0c  00003d0c  00003e20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.ADC_INIT 00000068  0000341c  0000341c  00003530  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.ADC_READ 00000048  000038d4  000038d4  000039e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .data.ADC_Config 00000003  00800089  00004142  00004256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 80 .text.DIO_vSetPinDirection 00000188  000012bc  000012bc  000013d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.DIO_vWritePin 000000e6  00001c4e  00001c4e  00001d62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.DIO_vSetPortDirection 00000088  00002dd6  00002dd6  00002eea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.DIO_u8GetPinValue 0000007a  000030e2  000030e2  000031f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.EEPROM_WRITE 00000018  00003f84  00003f84  00004098  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.EEPROM_READ 00000012  0000401e  0000401e  00004132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vector_1 00000052  00003654  00003654  00003768  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vector_2 00000052  000036a6  000036a6  000037ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_3 00000052  000036f8  000036f8  0000380c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.EXT_INT_Init 00000026  00003d32  00003d32  00003e46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.EXT_INT_SET_CONFIG 00000072  0000333a  0000333a  0000344e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.external_interrupt_register_callback 0000002a  00003c20  00003c20  00003d34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .bss.INT2_PTR 00000002  00800090  00800090  00004259  2**0
                  ALLOC
 93 .bss.INT1_PTR 00000002  00800092  00800092  00004259  2**0
                  ALLOC
 94 .bss.INT0_PTR 00000002  00800094  00800094  00004259  2**0
                  ALLOC
 95 .data.config  00000006  00800068  00004132  00004246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 96 .text.i2c_init 0000000c  000040aa  000040aa  000041be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.i2c_tx_start 00000024  00003dc6  00003dc6  00003eda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.i2c_tx_address 00000050  0000379c  0000379c  000038b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.i2c_tx_byte 0000001e  00003eca  00003eca  00003fde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.i2c_tx_stop 0000000e  00004064  00004064  00004178  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .bss.masterMode 00000001  008000a4  008000a4  00004259  2**0
                  ALLOC
102 .text.__vector_6 00000052  0000374a  0000374a  0000385e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .bss.g_callBackPtr 00000002  00800096  00800096  00004259  2**0
                  ALLOC
104 .text.PWM_Init 0000002e  00003bc6  00003bc6  00003cda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.PWM_Generate_CHANNELA 00000090  00002cb6  00002cb6  00002dca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.SPI_Init 00000056  000035fe  000035fe  00003712  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.SPI_DATA_RW 0000000a  000040da  000040da  000041ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.__vector_11 00000076  0000324e  0000324e  00003362  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.__vector_10 00000076  000032c4  000032c4  000033d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.TIMER0_init 000000dc  00001e12  00001e12  00001f26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .bss.g_config 00000005  00800078  00800078  00004259  2**0
                  ALLOC
112 .bss.g_Milli_Seconds 00000002  00800098  00800098  00004259  2**0
                  ALLOC
113 .bss.flag     00000001  008000a5  008000a5  00004259  2**0
                  ALLOC
114 .bss.g_callback_ptr 00000002  0080009a  0080009a  00004259  2**0
                  ALLOC
115 .bss.g_ptr    00000002  0080009c  0080009c  00004259  2**0
                  ALLOC
116 .text.__vector_5 0000005a  0000354a  0000354a  0000365e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.__vector_4 0000005a  000035a4  000035a4  000036b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .bss.T2_callBack_Ptr 00000002  0080009e  0080009e  00004259  2**0
                  ALLOC
119 .text.WATCHDOG_ON 0000000c  000040b6  000040b6  000041ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text         0000000e  00004072  00004072  00004186  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text         000000ce  000023e0  000023e0  000024f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text         0000000a  000040e4  000040e4  000041f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text         00000008  000040f6  000040f6  0000420a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text         000000de  00001d34  00001d34  00001e48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text         0000005e  000034ec  000034ec  00003600  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text         0000007a  0000315c  0000315c  00003270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text         00000048  0000391c  0000391c  00003a30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text         0000000c  000040c2  000040c2  000041d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text         00000006  00004118  00004118  0000422c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text         0000000e  00004080  00004080  00004194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text         0000000e  0000408e  0000408e  000041a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text         00000022  00003e0c  00003e0c  00003f20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text         00000044  000039f0  000039f0  00003b04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text         0000000e  0000409c  0000409c  000041b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text         00000008  000040fe  000040fe  00004212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text         000000d4  00001fc6  00001fc6  000020da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.libgcc.div 00000028  00003c72  00003c72  00003d86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.libgcc.div 00000044  00003a34  00003a34  00003b48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.libgcc  0000000c  000040ce  000040ce  000041e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.libgcc  0000001a  00003f3a  00003f3a  0000404e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.__dummy_fini 00000002  0000412c  0000412c  00004240  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.__dummy_funcs_on_exit 00000002  0000412e  0000412e  00004242  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.__dummy_simulator_exit 00000002  00004130  00004130  00004244  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.exit    00000016  00003fcc  00003fcc  000040e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.__wrap_sprintf 00000026  00003d58  00003d58  00003e6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .progmemx.data 00000007  000003f1  000003f1  00000505  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
147 .text.__fmt_s 000000ca  000024ae  000024ae  000025c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.__out   00000068  00003484  00003484  00003598  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.__pad   0000010e  00001b40  00001b40  00001c54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.__dummy_fmt4 00000006  0000411e  0000411e  00004232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.__fmt_state 0000009e  00002b86  00002b86  00002c9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .progmemx.data 00000006  000003f8  000003f8  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
153 .text.__printf_core 00000822  000003fe  000003fe  00000512  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .progmemx.data.state_table 00000016  000003db  000003db  000004ef  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
155 .text.fputc   00000092  00002c24  00002c24  00002d38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.__fmt_d 0000017e  00001444  00001444  00001558  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.__fmt_o 000000d4  0000209a  0000209a  000021ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.__cvt_u 0000014a  000018ae  000018ae  000019c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.__fmt_u 000000b0  000027a0  000027a0  000028b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.__fmt_x 00000280  00000c20  00000c20  00000d34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.__pop_float 00000040  00003a78  00003a78  00003b8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.__pop_int 00000172  0000173c  0000173c  00001850  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.__pop_ptr 000000d8  00001eee  00001eee  00002002  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.atoi    00000090  00002d46  00002d46  00002e5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.memset  00000012  00004030  00004030  00004144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.strlen  0000002c  00003bf4  00003bf4  00003d08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.tolower 00000010  00004054  00004054  00004168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.toupper 00000012  00004042  00004042  00004156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text._Exit   00000004  00004128  00004128  0000423c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.__vsprintf 00000018  00003f9c  00003f9c  000040b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.__vsnprintf 000000a4  000029a0  000029a0  00002ab4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.__vfprintf 00000030  00003b96  00003b96  00003caa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.libgcc.div 0000001c  00003f04  00003f04  00004018  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.libgcc.div 000000a2  00002a44  00002a44  00002b58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.libgcc  00000020  00003e6e  00003e6e  00003f82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.libgcc.prologue 00000038  00003af4  00003af4  00003c08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.libgcc.prologue 00000036  00003b2c  00003b2c  00003c40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.libgcc.builtins 0000003c  00003ab8  00003ab8  00003bcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.libgcc  00000018  00003fb4  00003fb4  000040c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__ctors_end>
   4:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <__vector_1>
   8:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__vector_2>
   c:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <__vector_3>
  10:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__vector_4>
  14:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <__vector_5>
  18:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <__vector_6>
  1c:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__bad_interrupt>
  20:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__bad_interrupt>
  24:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__bad_interrupt>
  28:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__vector_10>
  2c:	0c 94 27 19 	jmp	0x324e	; 0x324e <__vector_11>
  30:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__bad_interrupt>
  34:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__bad_interrupt>
  38:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__bad_interrupt>
  3c:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__bad_interrupt>
  40:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__bad_interrupt>
  44:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__bad_interrupt>
  48:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__bad_interrupt>
  4c:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__bad_interrupt>
  50:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__bad_interrupt>
  54:	51 08       	sbc	r5, r1
  56:	57 08       	sbc	r5, r7
  58:	57 08       	sbc	r5, r7
  5a:	57 08       	sbc	r5, r7
  5c:	57 08       	sbc	r5, r7
  5e:	57 08       	sbc	r5, r7
  60:	57 08       	sbc	r5, r7
  62:	57 08       	sbc	r5, r7
  64:	57 08       	sbc	r5, r7
  66:	57 08       	sbc	r5, r7
  68:	57 08       	sbc	r5, r7
  6a:	57 08       	sbc	r5, r7
  6c:	57 08       	sbc	r5, r7
  6e:	57 08       	sbc	r5, r7
  70:	57 08       	sbc	r5, r7
  72:	57 08       	sbc	r5, r7
  74:	57 08       	sbc	r5, r7
  76:	57 08       	sbc	r5, r7
  78:	57 08       	sbc	r5, r7
  7a:	57 08       	sbc	r5, r7
  7c:	57 08       	sbc	r5, r7
  7e:	57 08       	sbc	r5, r7
  80:	57 08       	sbc	r5, r7
  82:	57 08       	sbc	r5, r7
  84:	57 08       	sbc	r5, r7
  86:	57 08       	sbc	r5, r7
  88:	57 08       	sbc	r5, r7
  8a:	57 08       	sbc	r5, r7
  8c:	57 08       	sbc	r5, r7
  8e:	27 08       	sbc	r2, r7
  90:	98 07       	cpc	r25, r24
  92:	bb 07       	cpc	r27, r27
  94:	57 08       	sbc	r5, r7
  96:	39 08       	sbc	r3, r9
  98:	57 08       	sbc	r5, r7
  9a:	57 08       	sbc	r5, r7
  9c:	57 08       	sbc	r5, r7
  9e:	57 08       	sbc	r5, r7
  a0:	57 08       	sbc	r5, r7
  a2:	57 08       	sbc	r5, r7
  a4:	57 08       	sbc	r5, r7
  a6:	57 08       	sbc	r5, r7
  a8:	57 08       	sbc	r5, r7
  aa:	57 08       	sbc	r5, r7
  ac:	57 08       	sbc	r5, r7
  ae:	57 08       	sbc	r5, r7
  b0:	46 08       	sbc	r4, r6
  b2:	57 08       	sbc	r5, r7
  b4:	e8 07       	cpc	r30, r24
  b6:	57 08       	sbc	r5, r7
  b8:	57 08       	sbc	r5, r7
  ba:	06 08       	sbc	r0, r6
  bc:	57 08       	sbc	r5, r7
  be:	57 08       	sbc	r5, r7
  c0:	57 08       	sbc	r5, r7
  c2:	57 08       	sbc	r5, r7
  c4:	57 08       	sbc	r5, r7
  c6:	57 08       	sbc	r5, r7
  c8:	57 08       	sbc	r5, r7
  ca:	57 08       	sbc	r5, r7
  cc:	57 08       	sbc	r5, r7
  ce:	15 08       	sbc	r1, r5
  d0:	98 07       	cpc	r25, r24
  d2:	a2 07       	cpc	r26, r18
  d4:	57 08       	sbc	r5, r7
  d6:	39 08       	sbc	r3, r9
  d8:	57 08       	sbc	r5, r7
  da:	57 08       	sbc	r5, r7
  dc:	57 08       	sbc	r5, r7
  de:	57 08       	sbc	r5, r7
  e0:	57 08       	sbc	r5, r7
  e2:	57 08       	sbc	r5, r7
  e4:	57 08       	sbc	r5, r7
  e6:	57 08       	sbc	r5, r7
  e8:	57 08       	sbc	r5, r7
  ea:	57 08       	sbc	r5, r7
  ec:	57 08       	sbc	r5, r7
  ee:	57 08       	sbc	r5, r7
  f0:	46 08       	sbc	r4, r6
  f2:	57 08       	sbc	r5, r7
  f4:	d9 07       	cpc	r29, r25
  f6:	57 08       	sbc	r5, r7
  f8:	57 08       	sbc	r5, r7
  fa:	f7 07       	cpc	r31, r23

000000fc <.dinit>:
  fc:	00 60       	ori	r16, 0x00	; 0
  fe:	00 68       	ori	r16, 0x80	; 128
 100:	80 00       	.word	0x0080	; ????
 102:	68 00       	.word	0x0068	; ????
 104:	78 00       	.word	0x0078	; ????
 106:	41 32       	cpi	r20, 0x21	; 33
 108:	00 78       	andi	r16, 0x80	; 128
 10a:	00 89       	ldd	r16, Z+16	; 0x10
 10c:	80 00       	.word	0x0080	; ????
 10e:	89 00       	.word	0x0089	; ????
 110:	8c 00       	.word	0x008c	; ????
 112:	41 42       	sbci	r20, 0x21	; 33
 114:	00 8c       	ldd	r0, Z+24	; 0x18
 116:	00 a6       	std	Z+40, r0	; 0x28
 118:	80 00       	.word	0x0080	; ????

0000011a <__ctors_end>:
 11a:	11 24       	eor	r1, r1
 11c:	1f be       	out	0x3f, r1	; 63
 11e:	cf e5       	ldi	r28, 0x5F	; 95
 120:	d8 e0       	ldi	r29, 0x08	; 8
 122:	de bf       	out	0x3e, r29	; 62
 124:	cd bf       	out	0x3d, r28	; 61

00000126 <__do_copy_data>:
 126:	ec ef       	ldi	r30, 0xFC	; 252
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	17 c0       	rjmp	.+46     	; 0x15c <__do_clear_bss+0x8>
 12e:	b5 91       	lpm	r27, Z+
 130:	a5 91       	lpm	r26, Z+
 132:	35 91       	lpm	r19, Z+
 134:	25 91       	lpm	r18, Z+
 136:	05 91       	lpm	r16, Z+
 138:	07 fd       	sbrc	r16, 7
 13a:	0c c0       	rjmp	.+24     	; 0x154 <__do_clear_bss>
 13c:	95 91       	lpm	r25, Z+
 13e:	85 91       	lpm	r24, Z+
 140:	ef 01       	movw	r28, r30
 142:	f9 2f       	mov	r31, r25
 144:	e8 2f       	mov	r30, r24
 146:	05 90       	lpm	r0, Z+
 148:	0d 92       	st	X+, r0
 14a:	a2 17       	cp	r26, r18
 14c:	b3 07       	cpc	r27, r19
 14e:	d9 f7       	brne	.-10     	; 0x146 <__do_copy_data+0x20>
 150:	fe 01       	movw	r30, r28
 152:	04 c0       	rjmp	.+8      	; 0x15c <__do_clear_bss+0x8>

00000154 <__do_clear_bss>:
 154:	1d 92       	st	X+, r1
 156:	a2 17       	cp	r26, r18
 158:	b3 07       	cpc	r27, r19
 15a:	e1 f7       	brne	.-8      	; 0x154 <__do_clear_bss>
 15c:	e9 31       	cpi	r30, 0x19	; 25
 15e:	f4 07       	cpc	r31, r20
 160:	31 f7       	brne	.-52     	; 0x12e <__do_copy_data+0x8>
 162:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <main>
 166:	0c 94 e6 1f 	jmp	0x3fcc	; 0x3fcc <exit>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>

Disassembly of section .text:

00004124 <__bad_interrupt>:
    4124:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.DRAW_FRAME:

00002850 <DRAW_FRAME>:
	
//function to put a SHORT string at the middle of the screen
void SHORT_STR_IN_MIDDLE_OF_SCREEN(char string[]){
	OLED_SetCursor(3,49);        //set the cursor position to (0, 0)
	OLED_Printf(string); //Print out some text
}
    2850:	cf 93       	push	r28
    2852:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <OLED_Init>
    2856:	c8 e0       	ldi	r28, 0x08	; 8
    2858:	10 c0       	rjmp	.+32     	; 0x287a <DRAW_FRAME+0x2a>
    285a:	6c 2f       	mov	r22, r28
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	0e 94 1d 1c 	call	0x383a	; 0x383a <OLED_SetCursor>
    2862:	89 e4       	ldi	r24, 0x49	; 73
    2864:	93 e0       	ldi	r25, 0x03	; 3
    2866:	a0 e0       	ldi	r26, 0x00	; 0
    2868:	af 93       	push	r26
    286a:	9f 93       	push	r25
    286c:	8f 93       	push	r24
    286e:	0e 94 50 07 	call	0xea0	; 0xea0 <OLED_Printf>
    2872:	cf 5f       	subi	r28, 0xFF	; 255
    2874:	0f 90       	pop	r0
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	c8 37       	cpi	r28, 0x78	; 120
    287c:	70 f3       	brcs	.-36     	; 0x285a <DRAW_FRAME+0xa>
    287e:	c8 e0       	ldi	r28, 0x08	; 8
    2880:	10 c0       	rjmp	.+32     	; 0x28a2 <DRAW_FRAME+0x52>
    2882:	6c 2f       	mov	r22, r28
    2884:	87 e0       	ldi	r24, 0x07	; 7
    2886:	0e 94 1d 1c 	call	0x383a	; 0x383a <OLED_SetCursor>
    288a:	89 e4       	ldi	r24, 0x49	; 73
    288c:	93 e0       	ldi	r25, 0x03	; 3
    288e:	a0 e0       	ldi	r26, 0x00	; 0
    2890:	af 93       	push	r26
    2892:	9f 93       	push	r25
    2894:	8f 93       	push	r24
    2896:	0e 94 50 07 	call	0xea0	; 0xea0 <OLED_Printf>
    289a:	cf 5f       	subi	r28, 0xFF	; 255
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	c8 37       	cpi	r28, 0x78	; 120
    28a4:	70 f3       	brcs	.-36     	; 0x2882 <DRAW_FRAME+0x32>
    28a6:	c1 e0       	ldi	r28, 0x01	; 1
    28a8:	10 c0       	rjmp	.+32     	; 0x28ca <DRAW_FRAME+0x7a>
    28aa:	65 e0       	ldi	r22, 0x05	; 5
    28ac:	8c 2f       	mov	r24, r28
    28ae:	0e 94 1d 1c 	call	0x383a	; 0x383a <OLED_SetCursor>
    28b2:	8b e4       	ldi	r24, 0x4B	; 75
    28b4:	93 e0       	ldi	r25, 0x03	; 3
    28b6:	a0 e0       	ldi	r26, 0x00	; 0
    28b8:	af 93       	push	r26
    28ba:	9f 93       	push	r25
    28bc:	8f 93       	push	r24
    28be:	0e 94 50 07 	call	0xea0	; 0xea0 <OLED_Printf>
    28c2:	cf 5f       	subi	r28, 0xFF	; 255
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	c7 30       	cpi	r28, 0x07	; 7
    28cc:	70 f3       	brcs	.-36     	; 0x28aa <DRAW_FRAME+0x5a>
    28ce:	c1 e0       	ldi	r28, 0x01	; 1
    28d0:	10 c0       	rjmp	.+32     	; 0x28f2 <DRAW_FRAME+0xa2>
    28d2:	69 e7       	ldi	r22, 0x79	; 121
    28d4:	8c 2f       	mov	r24, r28
    28d6:	0e 94 1d 1c 	call	0x383a	; 0x383a <OLED_SetCursor>
    28da:	8b e4       	ldi	r24, 0x4B	; 75
    28dc:	93 e0       	ldi	r25, 0x03	; 3
    28de:	a0 e0       	ldi	r26, 0x00	; 0
    28e0:	af 93       	push	r26
    28e2:	9f 93       	push	r25
    28e4:	8f 93       	push	r24
    28e6:	0e 94 50 07 	call	0xea0	; 0xea0 <OLED_Printf>
    28ea:	cf 5f       	subi	r28, 0xFF	; 255
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	c7 30       	cpi	r28, 0x07	; 7
    28f4:	70 f3       	brcs	.-36     	; 0x28d2 <DRAW_FRAME+0x82>
    28f6:	cf 91       	pop	r28
    28f8:	08 95       	ret

Disassembly of section .text.LONG_STR_IN_MIDDLE_OF_SCREEN:

00003c4a <LONG_STR_IN_MIDDLE_OF_SCREEN>:
		OLED_Printf("|");
	}
}

//function to put a long string at the middle of the screen 
void LONG_STR_IN_MIDDLE_OF_SCREEN(char string[]){
    3c4a:	cf 93       	push	r28
    3c4c:	df 93       	push	r29
    3c4e:	ec 01       	movw	r28, r24
	OLED_SetCursor(3,25);        //set the cursor position to (0, 0)
    3c50:	69 e1       	ldi	r22, 0x19	; 25
    3c52:	83 e0       	ldi	r24, 0x03	; 3
    3c54:	0e 94 1d 1c 	call	0x383a	; 0x383a <OLED_SetCursor>
	OLED_Printf(string); //Print out some text
    3c58:	ce 01       	movw	r24, r28
    3c5a:	a0 e8       	ldi	r26, 0x80	; 128
    3c5c:	af 93       	push	r26
    3c5e:	9f 93       	push	r25
    3c60:	cf 93       	push	r28
    3c62:	0e 94 50 07 	call	0xea0	; 0xea0 <OLED_Printf>
	}
    3c66:	0f 90       	pop	r0
    3c68:	0f 90       	pop	r0
    3c6a:	0f 90       	pop	r0
    3c6c:	df 91       	pop	r29
    3c6e:	cf 91       	pop	r28
    3c70:	08 95       	ret

Disassembly of section .text.STARTING_SCREEN:

00003964 <STARTING_SCREEN>:
	OLED_SetCursor(3,49);        //set the cursor position to (0, 0)
	OLED_Printf(string); //Print out some text
}

//send the main screen before doing any actions to the oled 
void STARTING_SCREEN(){
    3964:	cf 93       	push	r28
    3966:	df 93       	push	r29
    3968:	cd b7       	in	r28, 0x3d	; 61
    396a:	de b7       	in	r29, 0x3e	; 62
    396c:	2f 97       	sbiw	r28, 0x0f	; 15
    396e:	0f b6       	in	r0, 0x3f	; 63
    3970:	f8 94       	cli
    3972:	de bf       	out	0x3e, r29	; 62
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	cd bf       	out	0x3d, r28	; 61
	char str[] = "TEAM 2 AVELABS";
    3978:	2d e4       	ldi	r18, 0x4D	; 77
    397a:	33 e0       	ldi	r19, 0x03	; 3
    397c:	40 e0       	ldi	r20, 0x00	; 0
    397e:	8f e0       	ldi	r24, 0x0F	; 15
    3980:	f9 01       	movw	r30, r18
    3982:	de 01       	movw	r26, r28
    3984:	11 96       	adiw	r26, 0x01	; 1
    3986:	74 2f       	mov	r23, r20
    3988:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <__movmemx_qi>
	DRAW_FRAME();
    398c:	0e 94 28 14 	call	0x2850	; 0x2850 <DRAW_FRAME>
	LONG_STR_IN_MIDDLE_OF_SCREEN(str);
    3990:	ce 01       	movw	r24, r28
    3992:	01 96       	adiw	r24, 0x01	; 1
    3994:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LONG_STR_IN_MIDDLE_OF_SCREEN>
}
    3998:	2f 96       	adiw	r28, 0x0f	; 15
    399a:	0f b6       	in	r0, 0x3f	; 63
    399c:	f8 94       	cli
    399e:	de bf       	out	0x3e, r29	; 62
    39a0:	0f be       	out	0x3f, r0	; 63
    39a2:	cd bf       	out	0x3d, r28	; 61
    39a4:	df 91       	pop	r29
    39a6:	cf 91       	pop	r28
    39a8:	08 95       	ret

Disassembly of section .text.RFID_ENROLL:

00002f62 <RFID_ENROLL>:
	
//function to put a SHORT string at the middle of the screen
void SHORT_STR_IN_MIDDLE_OF_SCREEN(char string[]){
	OLED_SetCursor(3,49);        //set the cursor position to (0, 0)
	OLED_Printf(string); //Print out some text
}
    2f62:	cf 93       	push	r28
    2f64:	df 93       	push	r29
    2f66:	0e 94 b2 1c 	call	0x3964	; 0x3964 <STARTING_SCREEN>
    2f6a:	34 c0       	rjmp	.+104    	; 0x2fd4 <RFID_ENROLL+0x72>
    2f6c:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <DetectCard>
    2f70:	88 23       	and	r24, r24
    2f72:	81 f1       	breq	.+96     	; 0x2fd4 <RFID_ENROLL+0x72>
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <card__enroll_flag>
    2f7a:	60 e0       	ldi	r22, 0x00	; 0
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	0e 94 1d 1c 	call	0x383a	; 0x383a <OLED_SetCursor>
    2f82:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <OLED_Clear>
    2f86:	8c e5       	ldi	r24, 0x5C	; 92
    2f88:	93 e0       	ldi	r25, 0x03	; 3
    2f8a:	a0 e0       	ldi	r26, 0x00	; 0
    2f8c:	af 93       	push	r26
    2f8e:	9f 93       	push	r25
    2f90:	8f 93       	push	r24
    2f92:	0e 94 50 07 	call	0xea0	; 0xea0 <OLED_Printf>
    2f96:	8d e7       	ldi	r24, 0x7D	; 125
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	0e 94 7d 14 	call	0x28fa	; 0x28fa <GetCardId>
    2f9e:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <Status_ID>
    2fa2:	cd e7       	ldi	r28, 0x7D	; 125
    2fa4:	d0 e0       	ldi	r29, 0x00	; 0
    2fa6:	68 81       	ld	r22, Y
    2fa8:	88 ee       	ldi	r24, 0xE8	; 232
    2faa:	93 e0       	ldi	r25, 0x03	; 3
    2fac:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <EEPROM_WRITE>
    2fb0:	69 81       	ldd	r22, Y+1	; 0x01
    2fb2:	89 ee       	ldi	r24, 0xE9	; 233
    2fb4:	93 e0       	ldi	r25, 0x03	; 3
    2fb6:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <EEPROM_WRITE>
    2fba:	6a 81       	ldd	r22, Y+2	; 0x02
    2fbc:	8a ee       	ldi	r24, 0xEA	; 234
    2fbe:	93 e0       	ldi	r25, 0x03	; 3
    2fc0:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <EEPROM_WRITE>
    2fc4:	6b 81       	ldd	r22, Y+3	; 0x03
    2fc6:	8b ee       	ldi	r24, 0xEB	; 235
    2fc8:	93 e0       	ldi	r25, 0x03	; 3
    2fca:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <EEPROM_WRITE>
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <card__enroll_flag>
    2fd8:	88 23       	and	r24, r24
    2fda:	41 f2       	breq	.-112    	; 0x2f6c <RFID_ENROLL+0xa>
    2fdc:	df 91       	pop	r29
    2fde:	cf 91       	pop	r28
    2fe0:	08 95       	ret

Disassembly of section .text.LM35_AND_DC_MOTOR_INIT:

00003fe2 <LM35_AND_DC_MOTOR_INIT>:
/*-------------------------------------------------------------------------------------------------------------------------------------------*/
//LM35 AND DC MOTOR FUNCTIONS

//LM35 and DC motor
void LM35_AND_DC_MOTOR_INIT(void){
	LM35_init();
    3fe2:	0e 94 77 20 	call	0x40ee	; 0x40ee <LM35_init>
	DIO_vSetPinDirection(PORT_C,PIN7,OUTPUT); //setting relay pin as output 
    3fe6:	42 e0       	ldi	r20, 0x02	; 2
    3fe8:	67 e0       	ldi	r22, 0x07	; 7
    3fea:	82 e0       	ldi	r24, 0x02	; 2
    3fec:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_vSetPinDirection>
	//MOTOR_A_INIT();
	//MOTOR_B_INIT();
	LCD_4_bit_init();
    3ff0:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <LCD_4_bit_init>
    3ff4:	08 95       	ret

Disassembly of section .text.RFID_INIT:

00003888 <RFID_INIT>:
	
//function to put a SHORT string at the middle of the screen
void SHORT_STR_IN_MIDDLE_OF_SCREEN(char string[]){
	OLED_SetCursor(3,49);        //set the cursor position to (0, 0)
	OLED_Printf(string); //Print out some text
}
    3888:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <ULTRASONIC_INIT>
    388c:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <LM35_AND_DC_MOTOR_INIT>
    3890:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <SPI_Init>
    3894:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <PWM_Init>
    3898:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <begin>
    389c:	42 e0       	ldi	r20, 0x02	; 2
    389e:	64 e0       	ldi	r22, 0x04	; 4
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_vSetPinDirection>
    38a6:	42 e0       	ldi	r20, 0x02	; 2
    38a8:	65 e0       	ldi	r22, 0x05	; 5
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_vSetPinDirection>
    38b0:	42 e0       	ldi	r20, 0x02	; 2
    38b2:	66 e0       	ldi	r22, 0x06	; 6
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_vSetPinDirection>
    38ba:	42 e0       	ldi	r20, 0x02	; 2
    38bc:	66 e0       	ldi	r22, 0x06	; 6
    38be:	82 e0       	ldi	r24, 0x02	; 2
    38c0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_vSetPinDirection>
    38c4:	42 e0       	ldi	r20, 0x02	; 2
    38c6:	65 e0       	ldi	r22, 0x05	; 5
    38c8:	83 e0       	ldi	r24, 0x03	; 3
    38ca:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_vSetPinDirection>
    38ce:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <OLED_Init>
    38d2:	08 95       	ret

Disassembly of section .text.TEMP_MOTOR_RUN:

00002312 <TEMP_MOTOR_RUN>:
    2312:	0f 93       	push	r16
    2314:	1f 93       	push	r17
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	60 97       	sbiw	r28, 0x10	; 16
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <LM35_READ>
    232e:	18 2f       	mov	r17, r24
    2330:	84 31       	cpi	r24, 0x14	; 20
    2332:	30 f4       	brcc	.+12     	; 0x2340 <TEMP_MOTOR_RUN+0x2e>
    2334:	40 e0       	ldi	r20, 0x00	; 0
    2336:	67 e0       	ldi	r22, 0x07	; 7
    2338:	82 e0       	ldi	r24, 0x02	; 2
    233a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    233e:	22 c0       	rjmp	.+68     	; 0x2384 <TEMP_MOTOR_RUN+0x72>
    2340:	89 31       	cpi	r24, 0x19	; 25
    2342:	30 f4       	brcc	.+12     	; 0x2350 <TEMP_MOTOR_RUN+0x3e>
    2344:	41 e0       	ldi	r20, 0x01	; 1
    2346:	67 e0       	ldi	r22, 0x07	; 7
    2348:	82 e0       	ldi	r24, 0x02	; 2
    234a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    234e:	1a c0       	rjmp	.+52     	; 0x2384 <TEMP_MOTOR_RUN+0x72>
    2350:	8e 31       	cpi	r24, 0x1E	; 30
    2352:	c0 f0       	brcs	.+48     	; 0x2384 <TEMP_MOTOR_RUN+0x72>
    2354:	41 e0       	ldi	r20, 0x01	; 1
    2356:	67 e0       	ldi	r22, 0x07	; 7
    2358:	82 e0       	ldi	r24, 0x02	; 2
    235a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    235e:	41 e0       	ldi	r20, 0x01	; 1
    2360:	66 e0       	ldi	r22, 0x06	; 6
    2362:	82 e0       	ldi	r24, 0x02	; 2
    2364:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    2368:	2f ef       	ldi	r18, 0xFF	; 255
    236a:	89 e6       	ldi	r24, 0x69	; 105
    236c:	98 e1       	ldi	r25, 0x18	; 24
    236e:	21 50       	subi	r18, 0x01	; 1
    2370:	80 40       	sbci	r24, 0x00	; 0
    2372:	90 40       	sbci	r25, 0x00	; 0
    2374:	e1 f7       	brne	.-8      	; 0x236e <TEMP_MOTOR_RUN+0x5c>
    2376:	00 c0       	rjmp	.+0      	; 0x2378 <TEMP_MOTOR_RUN+0x66>
    2378:	00 00       	nop
    237a:	40 e0       	ldi	r20, 0x00	; 0
    237c:	66 e0       	ldi	r22, 0x06	; 6
    237e:	82 e0       	ldi	r24, 0x02	; 2
    2380:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    2384:	1f 92       	push	r1
    2386:	1f 93       	push	r17
    2388:	80 e8       	ldi	r24, 0x80	; 128
    238a:	93 e0       	ldi	r25, 0x03	; 3
    238c:	a0 e0       	ldi	r26, 0x00	; 0
    238e:	af 93       	push	r26
    2390:	9f 93       	push	r25
    2392:	8f 93       	push	r24
    2394:	8e 01       	movw	r16, r28
    2396:	0f 5f       	subi	r16, 0xFF	; 255
    2398:	1f 4f       	sbci	r17, 0xFF	; 255
    239a:	1f 93       	push	r17
    239c:	0f 93       	push	r16
    239e:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_sprintf_cdnopuxX>
    23a2:	80 e8       	ldi	r24, 0x80	; 128
    23a4:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_4_bit_sendCommand>
    23a8:	c8 01       	movw	r24, r16
    23aa:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <LCD_4_bit_sendString>
    23ae:	2f ef       	ldi	r18, 0xFF	; 255
    23b0:	81 ee       	ldi	r24, 0xE1	; 225
    23b2:	94 e0       	ldi	r25, 0x04	; 4
    23b4:	21 50       	subi	r18, 0x01	; 1
    23b6:	80 40       	sbci	r24, 0x00	; 0
    23b8:	90 40       	sbci	r25, 0x00	; 0
    23ba:	e1 f7       	brne	.-8      	; 0x23b4 <TEMP_MOTOR_RUN+0xa2>
    23bc:	00 c0       	rjmp	.+0      	; 0x23be <TEMP_MOTOR_RUN+0xac>
    23be:	00 00       	nop
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	f8 94       	cli
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	cd bf       	out	0x3d, r28	; 61
    23ca:	60 96       	adiw	r28, 0x10	; 16
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	08 95       	ret

Disassembly of section .text.RFID_READ_CARD:

000015c2 <RFID_READ_CARD>:
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	0e 94 89 11 	call	0x2312	; 0x2312 <TEMP_MOTOR_RUN>
    15ca:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <DetectCard>
    15ce:	88 23       	and	r24, r24
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <RFID_READ_CARD+0x12>
    15d2:	a1 c0       	rjmp	.+322    	; 0x1716 <RFID_READ_CARD+0x154>
    15d4:	8d e7       	ldi	r24, 0x7D	; 125
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 7d 14 	call	0x28fa	; 0x28fa <GetCardId>
    15dc:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <Status_ID>
    15e0:	88 ee       	ldi	r24, 0xE8	; 232
    15e2:	93 e0       	ldi	r25, 0x03	; 3
    15e4:	0e 94 0f 20 	call	0x401e	; 0x401e <EEPROM_READ>
    15e8:	c0 e6       	ldi	r28, 0x60	; 96
    15ea:	d0 e0       	ldi	r29, 0x00	; 0
    15ec:	88 83       	st	Y, r24
    15ee:	89 ee       	ldi	r24, 0xE9	; 233
    15f0:	93 e0       	ldi	r25, 0x03	; 3
    15f2:	0e 94 0f 20 	call	0x401e	; 0x401e <EEPROM_READ>
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	8a ee       	ldi	r24, 0xEA	; 234
    15fa:	93 e0       	ldi	r25, 0x03	; 3
    15fc:	0e 94 0f 20 	call	0x401e	; 0x401e <EEPROM_READ>
    1600:	8a 83       	std	Y+2, r24	; 0x02
    1602:	8b ee       	ldi	r24, 0xEB	; 235
    1604:	93 e0       	ldi	r25, 0x03	; 3
    1606:	0e 94 0f 20 	call	0x401e	; 0x401e <EEPROM_READ>
    160a:	8b 83       	std	Y+3, r24	; 0x03
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	12 c0       	rjmp	.+36     	; 0x1634 <RFID_READ_CARD+0x72>
    1610:	82 2f       	mov	r24, r18
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	fc 01       	movw	r30, r24
    1616:	e3 58       	subi	r30, 0x83	; 131
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	30 81       	ld	r19, Z
    161c:	fc 01       	movw	r30, r24
    161e:	e0 5a       	subi	r30, 0xA0	; 160
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	80 81       	ld	r24, Z
    1624:	38 13       	cpse	r19, r24
    1626:	05 c0       	rjmp	.+10     	; 0x1632 <RFID_READ_CARD+0x70>
    1628:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <id_count>
    162c:	8f 5f       	subi	r24, 0xFF	; 255
    162e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <id_count>
    1632:	2f 5f       	subi	r18, 0xFF	; 255
    1634:	24 30       	cpi	r18, 0x04	; 4
    1636:	60 f3       	brcs	.-40     	; 0x1610 <RFID_READ_CARD+0x4e>
    1638:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <id_count>
    163c:	84 30       	cpi	r24, 0x04	; 4
    163e:	09 f0       	breq	.+2      	; 0x1642 <RFID_READ_CARD+0x80>
    1640:	4d c0       	rjmp	.+154    	; 0x16dc <RFID_READ_CARD+0x11a>
    1642:	41 e0       	ldi	r20, 0x01	; 1
    1644:	66 e0       	ldi	r22, 0x06	; 6
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    164c:	2f ef       	ldi	r18, 0xFF	; 255
    164e:	83 ed       	ldi	r24, 0xD3	; 211
    1650:	90 e3       	ldi	r25, 0x30	; 48
    1652:	21 50       	subi	r18, 0x01	; 1
    1654:	80 40       	sbci	r24, 0x00	; 0
    1656:	90 40       	sbci	r25, 0x00	; 0
    1658:	e1 f7       	brne	.-8      	; 0x1652 <RFID_READ_CARD+0x90>
    165a:	00 c0       	rjmp	.+0      	; 0x165c <RFID_READ_CARD+0x9a>
    165c:	00 00       	nop
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	66 e0       	ldi	r22, 0x06	; 6
    1662:	82 e0       	ldi	r24, 0x02	; 2
    1664:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    1668:	22 e3       	ldi	r18, 0x32	; 50
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e0       	ldi	r20, 0x00	; 0
    166e:	50 e0       	ldi	r21, 0x00	; 0
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	80 e4       	ldi	r24, 0x40	; 64
    1676:	90 e4       	ldi	r25, 0x40	; 64
    1678:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <PWM_Generate_CHANNELA>
    167c:	2f ef       	ldi	r18, 0xFF	; 255
    167e:	87 ea       	ldi	r24, 0xA7	; 167
    1680:	91 e6       	ldi	r25, 0x61	; 97
    1682:	21 50       	subi	r18, 0x01	; 1
    1684:	80 40       	sbci	r24, 0x00	; 0
    1686:	90 40       	sbci	r25, 0x00	; 0
    1688:	e1 f7       	brne	.-8      	; 0x1682 <RFID_READ_CARD+0xc0>
    168a:	00 c0       	rjmp	.+0      	; 0x168c <RFID_READ_CARD+0xca>
    168c:	00 00       	nop
    168e:	22 e3       	ldi	r18, 0x32	; 50
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	80 e4       	ldi	r24, 0x40	; 64
    169c:	91 e4       	ldi	r25, 0x41	; 65
    169e:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <PWM_Generate_CHANNELA>
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	0e 94 1d 1c 	call	0x383a	; 0x383a <OLED_SetCursor>
    16aa:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <OLED_Clear>
    16ae:	8f e8       	ldi	r24, 0x8F	; 143
    16b0:	93 e0       	ldi	r25, 0x03	; 3
    16b2:	a0 e0       	ldi	r26, 0x00	; 0
    16b4:	af 93       	push	r26
    16b6:	9f 93       	push	r25
    16b8:	8f 93       	push	r24
    16ba:	0e 94 50 07 	call	0xea0	; 0xea0 <OLED_Printf>
    16be:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <id_count>
    16c2:	2f ef       	ldi	r18, 0xFF	; 255
    16c4:	8b e7       	ldi	r24, 0x7B	; 123
    16c6:	92 e9       	ldi	r25, 0x92	; 146
    16c8:	21 50       	subi	r18, 0x01	; 1
    16ca:	80 40       	sbci	r24, 0x00	; 0
    16cc:	90 40       	sbci	r25, 0x00	; 0
    16ce:	e1 f7       	brne	.-8      	; 0x16c8 <RFID_READ_CARD+0x106>
    16d0:	00 c0       	rjmp	.+0      	; 0x16d2 <RFID_READ_CARD+0x110>
    16d2:	00 00       	nop
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	2d c0       	rjmp	.+90     	; 0x1736 <RFID_READ_CARD+0x174>
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	0e 94 1d 1c 	call	0x383a	; 0x383a <OLED_SetCursor>
    16e4:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <OLED_Clear>
    16e8:	81 eb       	ldi	r24, 0xB1	; 177
    16ea:	93 e0       	ldi	r25, 0x03	; 3
    16ec:	a0 e0       	ldi	r26, 0x00	; 0
    16ee:	af 93       	push	r26
    16f0:	9f 93       	push	r25
    16f2:	8f 93       	push	r24
    16f4:	0e 94 50 07 	call	0xea0	; 0xea0 <OLED_Printf>
    16f8:	2f ef       	ldi	r18, 0xFF	; 255
    16fa:	83 ed       	ldi	r24, 0xD3	; 211
    16fc:	90 e3       	ldi	r25, 0x30	; 48
    16fe:	21 50       	subi	r18, 0x01	; 1
    1700:	80 40       	sbci	r24, 0x00	; 0
    1702:	90 40       	sbci	r25, 0x00	; 0
    1704:	e1 f7       	brne	.-8      	; 0x16fe <RFID_READ_CARD+0x13c>
    1706:	00 c0       	rjmp	.+0      	; 0x1708 <RFID_READ_CARD+0x146>
    1708:	00 00       	nop
    170a:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <id_count>
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	10 c0       	rjmp	.+32     	; 0x1736 <RFID_READ_CARD+0x174>
    1716:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <DetectCard>
    171a:	81 11       	cpse	r24, r1
    171c:	0c c0       	rjmp	.+24     	; 0x1736 <RFID_READ_CARD+0x174>
    171e:	60 e0       	ldi	r22, 0x00	; 0
    1720:	0e 94 1d 1c 	call	0x383a	; 0x383a <OLED_SetCursor>
    1724:	2f ef       	ldi	r18, 0xFF	; 255
    1726:	83 ed       	ldi	r24, 0xD3	; 211
    1728:	90 e3       	ldi	r25, 0x30	; 48
    172a:	21 50       	subi	r18, 0x01	; 1
    172c:	80 40       	sbci	r24, 0x00	; 0
    172e:	90 40       	sbci	r25, 0x00	; 0
    1730:	e1 f7       	brne	.-8      	; 0x172a <RFID_READ_CARD+0x168>
    1732:	00 c0       	rjmp	.+0      	; 0x1734 <RFID_READ_CARD+0x172>
    1734:	00 00       	nop
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

Disassembly of section .text.ULTRASONIC1_COUNT:

00003d7e <ULTRASONIC1_COUNT>:
/*-------------------------------------------------------------------------------------------------------------------------------------------*/
//ultrasonic functions 

//ultrasonic that counts  number of people that enter  the room 
uint8 ULTRASONIC1_COUNT(){
	float distance = ULTRASONIC_GET_DISTANCE();
    3d7e:	0e 94 74 13 	call	0x26e8	; 0x26e8 <ULTRASONIC_GET_DISTANCE>
	if(distance<20){
    3d82:	20 e0       	ldi	r18, 0x00	; 0
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	40 ea       	ldi	r20, 0xA0	; 160
    3d88:	51 e4       	ldi	r21, 0x41	; 65
    3d8a:	0e 94 72 20 	call	0x40e4	; 0x40e4 <__cmpsf2>
    3d8e:	88 23       	and	r24, r24
    3d90:	3c f4       	brge	.+14     	; 0x3da0 <ULTRASONIC1_COUNT+0x22>
		if(person_count!=255)
    3d92:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <person_count>
    3d96:	8f 3f       	cpi	r24, 0xFF	; 255
    3d98:	19 f0       	breq	.+6      	; 0x3da0 <ULTRASONIC1_COUNT+0x22>
		person_count++;
    3d9a:	8f 5f       	subi	r24, 0xFF	; 255
    3d9c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <person_count>
	}
}
    3da0:	08 95       	ret

Disassembly of section .text.ULTRASONIC2_COUNT:

00003da2 <ULTRASONIC2_COUNT>:

//ultrasonic that counts  number of people that exits  the room 
uint8 ULTRASONIC2_COUNT(){
	float distance = ULTRASONIC2_GET_DISTANCE();
    3da2:	0e 94 18 13 	call	0x2630	; 0x2630 <ULTRASONIC2_GET_DISTANCE>
	if(distance<20){
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	40 ea       	ldi	r20, 0xA0	; 160
    3dac:	51 e4       	ldi	r21, 0x41	; 65
    3dae:	0e 94 72 20 	call	0x40e4	; 0x40e4 <__cmpsf2>
    3db2:	88 23       	and	r24, r24
    3db4:	3c f4       	brge	.+14     	; 0x3dc4 <ULTRASONIC2_COUNT+0x22>
		if(person_count!=0)
    3db6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <person_count>
    3dba:	88 23       	and	r24, r24
    3dbc:	19 f0       	breq	.+6      	; 0x3dc4 <ULTRASONIC2_COUNT+0x22>
		person_count--;
    3dbe:	81 50       	subi	r24, 0x01	; 1
    3dc0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <person_count>
	}
}
    3dc4:	08 95       	ret

Disassembly of section .text.ULTRASONIC_TURN_LEDS_ON:

00002578 <ULTRASONIC_TURN_LEDS_ON>:
	
//function to put a SHORT string at the middle of the screen
void SHORT_STR_IN_MIDDLE_OF_SCREEN(char string[]){
	OLED_SetCursor(3,49);        //set the cursor position to (0, 0)
	OLED_Printf(string); //Print out some text
}
    2578:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <OLED_Clear>
    257c:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <ULTRASONIC1_COUNT>
    2580:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <ULTRASONIC2_COUNT>
    2584:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <person_count>
    2588:	1f 92       	push	r1
    258a:	8f 93       	push	r24
    258c:	81 ed       	ldi	r24, 0xD1	; 209
    258e:	93 e0       	ldi	r25, 0x03	; 3
    2590:	a0 e0       	ldi	r26, 0x00	; 0
    2592:	af 93       	push	r26
    2594:	9f 93       	push	r25
    2596:	8f 93       	push	r24
    2598:	0e 94 50 07 	call	0xea0	; 0xea0 <OLED_Printf>
    259c:	2f ef       	ldi	r18, 0xFF	; 255
    259e:	89 e6       	ldi	r24, 0x69	; 105
    25a0:	98 e1       	ldi	r25, 0x18	; 24
    25a2:	21 50       	subi	r18, 0x01	; 1
    25a4:	80 40       	sbci	r24, 0x00	; 0
    25a6:	90 40       	sbci	r25, 0x00	; 0
    25a8:	e1 f7       	brne	.-8      	; 0x25a2 <ULTRASONIC_TURN_LEDS_ON+0x2a>
    25aa:	00 c0       	rjmp	.+0      	; 0x25ac <ULTRASONIC_TURN_LEDS_ON+0x34>
    25ac:	00 00       	nop
    25ae:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <person_count>
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	81 11       	cpse	r24, r1
    25be:	0e c0       	rjmp	.+28     	; 0x25dc <ULTRASONIC_TURN_LEDS_ON+0x64>
    25c0:	40 e0       	ldi	r20, 0x00	; 0
    25c2:	64 e0       	ldi	r22, 0x04	; 4
    25c4:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	65 e0       	ldi	r22, 0x05	; 5
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    25d2:	40 e0       	ldi	r20, 0x00	; 0
    25d4:	66 e0       	ldi	r22, 0x06	; 6
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    25dc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <person_count>
    25e0:	9f ef       	ldi	r25, 0xFF	; 255
    25e2:	98 0f       	add	r25, r24
    25e4:	92 30       	cpi	r25, 0x02	; 2
    25e6:	80 f4       	brcc	.+32     	; 0x2608 <ULTRASONIC_TURN_LEDS_ON+0x90>
    25e8:	41 e0       	ldi	r20, 0x01	; 1
    25ea:	64 e0       	ldi	r22, 0x04	; 4
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    25f2:	40 e0       	ldi	r20, 0x00	; 0
    25f4:	65 e0       	ldi	r22, 0x05	; 5
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    25fc:	40 e0       	ldi	r20, 0x00	; 0
    25fe:	66 e0       	ldi	r22, 0x06	; 6
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    2606:	08 95       	ret
    2608:	83 50       	subi	r24, 0x03	; 3
    260a:	87 30       	cpi	r24, 0x07	; 7
    260c:	58 f4       	brcc	.+22     	; 0x2624 <ULTRASONIC_TURN_LEDS_ON+0xac>
    260e:	41 e0       	ldi	r20, 0x01	; 1
    2610:	65 e0       	ldi	r22, 0x05	; 5
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    2618:	40 e0       	ldi	r20, 0x00	; 0
    261a:	66 e0       	ldi	r22, 0x06	; 6
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    2622:	08 95       	ret
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	66 e0       	ldi	r22, 0x06	; 6
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    262e:	08 95       	ret

Disassembly of section .text.APP_INIT:

00003b62 <APP_INIT>:
}


//app init 
void APP_INIT(){
	RFID_INIT();
    3b62:	0e 94 44 1c 	call	0x3888	; 0x3888 <RFID_INIT>
	RFID_ENROLL();
    3b66:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <RFID_ENROLL>
	ULTRASONIC_INIT();
    3b6a:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <ULTRASONIC_INIT>
	ULTRASONIC2_INIT();
    3b6e:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <ULTRASONIC2_INIT>
	OLED_Init();
    3b72:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <OLED_Init>
	DIO_vSetPinDirection(PORT_A,PIN4,OUTPUT);
    3b76:	42 e0       	ldi	r20, 0x02	; 2
    3b78:	64 e0       	ldi	r22, 0x04	; 4
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
    3b7c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PORT_A,PIN5,OUTPUT);
    3b80:	42 e0       	ldi	r20, 0x02	; 2
    3b82:	65 e0       	ldi	r22, 0x05	; 5
    3b84:	80 e0       	ldi	r24, 0x00	; 0
    3b86:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_vSetPinDirection>
	DIO_vSetPinDirection(PORT_A,PIN6,OUTPUT);
    3b8a:	42 e0       	ldi	r20, 0x02	; 2
    3b8c:	66 e0       	ldi	r22, 0x06	; 6
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_vSetPinDirection>
    3b94:	08 95       	ret

Disassembly of section .text.BUTTON_1_INT:

00004106 <BUTTON_1_INT>:


/*-------------------------------------------------------------------------------------------------------------------------------------------*/
//external interrupt fuctions to reset the MCU
void BUTTON_1_INT(){
	WATCHDOG_ON();
    4106:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <WATCHDOG_ON>
    410a:	08 95       	ret

Disassembly of section .text.LCD_4_bit_sendCommand:

0000216e <LCD_4_bit_sendCommand>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    216e:	cf 93       	push	r28
    2170:	c8 2f       	mov	r28, r24
    2172:	84 fb       	bst	r24, 4
    2174:	44 27       	eor	r20, r20
    2176:	40 f9       	bld	r20, 0
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    2180:	c5 fb       	bst	r28, 5
    2182:	44 27       	eor	r20, r20
    2184:	40 f9       	bld	r20, 0
    2186:	61 e0       	ldi	r22, 0x01	; 1
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    218e:	c6 fb       	bst	r28, 6
    2190:	44 27       	eor	r20, r20
    2192:	40 f9       	bld	r20, 0
    2194:	62 e0       	ldi	r22, 0x02	; 2
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    219c:	4c 2f       	mov	r20, r28
    219e:	44 1f       	adc	r20, r20
    21a0:	44 27       	eor	r20, r20
    21a2:	44 1f       	adc	r20, r20
    21a4:	64 e0       	ldi	r22, 0x04	; 4
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	63 e0       	ldi	r22, 0x03	; 3
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    21b6:	41 e0       	ldi	r20, 0x01	; 1
    21b8:	62 e0       	ldi	r22, 0x02	; 2
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    21c0:	85 e0       	ldi	r24, 0x05	; 5
    21c2:	8a 95       	dec	r24
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <LCD_4_bit_sendCommand+0x54>
    21c6:	00 00       	nop
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	62 e0       	ldi	r22, 0x02	; 2
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    21d2:	8f e1       	ldi	r24, 0x1F	; 31
    21d4:	93 e0       	ldi	r25, 0x03	; 3
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <LCD_4_bit_sendCommand+0x68>
    21da:	00 c0       	rjmp	.+0      	; 0x21dc <LCD_4_bit_sendCommand+0x6e>
    21dc:	00 00       	nop
    21de:	4c 2f       	mov	r20, r28
    21e0:	41 70       	andi	r20, 0x01	; 1
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    21ea:	c1 fb       	bst	r28, 1
    21ec:	44 27       	eor	r20, r20
    21ee:	40 f9       	bld	r20, 0
    21f0:	61 e0       	ldi	r22, 0x01	; 1
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    21f8:	c2 fb       	bst	r28, 2
    21fa:	44 27       	eor	r20, r20
    21fc:	40 f9       	bld	r20, 0
    21fe:	62 e0       	ldi	r22, 0x02	; 2
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    2206:	c3 fb       	bst	r28, 3
    2208:	44 27       	eor	r20, r20
    220a:	40 f9       	bld	r20, 0
    220c:	64 e0       	ldi	r22, 0x04	; 4
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    2214:	41 e0       	ldi	r20, 0x01	; 1
    2216:	62 e0       	ldi	r22, 0x02	; 2
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    221e:	95 e0       	ldi	r25, 0x05	; 5
    2220:	9a 95       	dec	r25
    2222:	f1 f7       	brne	.-4      	; 0x2220 <LCD_4_bit_sendCommand+0xb2>
    2224:	00 00       	nop
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	62 e0       	ldi	r22, 0x02	; 2
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    2230:	8f e3       	ldi	r24, 0x3F	; 63
    2232:	9f e1       	ldi	r25, 0x1F	; 31
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <LCD_4_bit_sendCommand+0xc6>
    2238:	00 c0       	rjmp	.+0      	; 0x223a <LCD_4_bit_sendCommand+0xcc>
    223a:	00 00       	nop
    223c:	cf 91       	pop	r28
    223e:	08 95       	ret

Disassembly of section .text.LCD_4_bit_init:

000037ec <LCD_4_bit_init>:
    37ec:	62 e0       	ldi	r22, 0x02	; 2
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <DIO_vSetPortDirection>
    37f4:	42 e0       	ldi	r20, 0x02	; 2
    37f6:	63 e0       	ldi	r22, 0x03	; 3
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_vSetPinDirection>
    37fe:	42 e0       	ldi	r20, 0x02	; 2
    3800:	62 e0       	ldi	r22, 0x02	; 2
    3802:	80 e0       	ldi	r24, 0x00	; 0
    3804:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_vSetPinDirection>
    3808:	2f ef       	ldi	r18, 0xFF	; 255
    380a:	83 ef       	ldi	r24, 0xF3	; 243
    380c:	91 e0       	ldi	r25, 0x01	; 1
    380e:	21 50       	subi	r18, 0x01	; 1
    3810:	80 40       	sbci	r24, 0x00	; 0
    3812:	90 40       	sbci	r25, 0x00	; 0
    3814:	e1 f7       	brne	.-8      	; 0x380e <LCD_4_bit_init+0x22>
    3816:	00 c0       	rjmp	.+0      	; 0x3818 <LCD_4_bit_init+0x2c>
    3818:	00 00       	nop
    381a:	82 e3       	ldi	r24, 0x32	; 50
    381c:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_4_bit_sendCommand>
    3820:	88 e2       	ldi	r24, 0x28	; 40
    3822:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_4_bit_sendCommand>
    3826:	8c e0       	ldi	r24, 0x0C	; 12
    3828:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_4_bit_sendCommand>
    382c:	86 e0       	ldi	r24, 0x06	; 6
    382e:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_4_bit_sendCommand>
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_4_bit_sendCommand>
    3838:	08 95       	ret

Disassembly of section .text.LCD_4_bit_sendChar:

00002240 <LCD_4_bit_sendChar>:
    2240:	cf 93       	push	r28
    2242:	c8 2f       	mov	r28, r24
    2244:	84 fb       	bst	r24, 4
    2246:	44 27       	eor	r20, r20
    2248:	40 f9       	bld	r20, 0
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    2252:	c5 fb       	bst	r28, 5
    2254:	44 27       	eor	r20, r20
    2256:	40 f9       	bld	r20, 0
    2258:	61 e0       	ldi	r22, 0x01	; 1
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    2260:	c6 fb       	bst	r28, 6
    2262:	44 27       	eor	r20, r20
    2264:	40 f9       	bld	r20, 0
    2266:	62 e0       	ldi	r22, 0x02	; 2
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    226e:	4c 2f       	mov	r20, r28
    2270:	44 1f       	adc	r20, r20
    2272:	44 27       	eor	r20, r20
    2274:	44 1f       	adc	r20, r20
    2276:	64 e0       	ldi	r22, 0x04	; 4
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    227e:	41 e0       	ldi	r20, 0x01	; 1
    2280:	63 e0       	ldi	r22, 0x03	; 3
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    2288:	41 e0       	ldi	r20, 0x01	; 1
    228a:	62 e0       	ldi	r22, 0x02	; 2
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    2292:	85 e0       	ldi	r24, 0x05	; 5
    2294:	8a 95       	dec	r24
    2296:	f1 f7       	brne	.-4      	; 0x2294 <LCD_4_bit_sendChar+0x54>
    2298:	00 00       	nop
    229a:	40 e0       	ldi	r20, 0x00	; 0
    229c:	62 e0       	ldi	r22, 0x02	; 2
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    22a4:	8f e1       	ldi	r24, 0x1F	; 31
    22a6:	93 e0       	ldi	r25, 0x03	; 3
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <LCD_4_bit_sendChar+0x68>
    22ac:	00 c0       	rjmp	.+0      	; 0x22ae <LCD_4_bit_sendChar+0x6e>
    22ae:	00 00       	nop
    22b0:	4c 2f       	mov	r20, r28
    22b2:	41 70       	andi	r20, 0x01	; 1
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    22bc:	c1 fb       	bst	r28, 1
    22be:	44 27       	eor	r20, r20
    22c0:	40 f9       	bld	r20, 0
    22c2:	61 e0       	ldi	r22, 0x01	; 1
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    22ca:	c2 fb       	bst	r28, 2
    22cc:	44 27       	eor	r20, r20
    22ce:	40 f9       	bld	r20, 0
    22d0:	62 e0       	ldi	r22, 0x02	; 2
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    22d8:	c3 fb       	bst	r28, 3
    22da:	44 27       	eor	r20, r20
    22dc:	40 f9       	bld	r20, 0
    22de:	64 e0       	ldi	r22, 0x04	; 4
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    22e6:	41 e0       	ldi	r20, 0x01	; 1
    22e8:	62 e0       	ldi	r22, 0x02	; 2
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    22f0:	95 e0       	ldi	r25, 0x05	; 5
    22f2:	9a 95       	dec	r25
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <LCD_4_bit_sendChar+0xb2>
    22f6:	00 00       	nop
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	62 e0       	ldi	r22, 0x02	; 2
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
    2302:	8f e3       	ldi	r24, 0x3F	; 63
    2304:	9f e1       	ldi	r25, 0x1F	; 31
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <LCD_4_bit_sendChar+0xc6>
    230a:	00 c0       	rjmp	.+0      	; 0x230c <LCD_4_bit_sendChar+0xcc>
    230c:	00 00       	nop
    230e:	cf 91       	pop	r28
    2310:	08 95       	ret

Disassembly of section .text.LCD_4_bit_sendString:

00003c9a <LCD_4_bit_sendString>:
	//TIMER0_Delay_with_Blocking_ms(2,&config);
	_delay_ms(2);
}


void LCD_4_bit_sendString(uint8 *data){
    3c9a:	0f 93       	push	r16
    3c9c:	1f 93       	push	r17
    3c9e:	cf 93       	push	r28
    3ca0:	8c 01       	movw	r16, r24
	for(uint8 i=0; data[i]; i++)
    3ca2:	c0 e0       	ldi	r28, 0x00	; 0
    3ca4:	03 c0       	rjmp	.+6      	; 0x3cac <LCD_4_bit_sendString+0x12>
		LCD_4_bit_sendChar(data[i]);
    3ca6:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_4_bit_sendChar>
	_delay_ms(2);
}


void LCD_4_bit_sendString(uint8 *data){
	for(uint8 i=0; data[i]; i++)
    3caa:	cf 5f       	subi	r28, 0xFF	; 255
    3cac:	f8 01       	movw	r30, r16
    3cae:	ec 0f       	add	r30, r28
    3cb0:	f1 1d       	adc	r31, r1
    3cb2:	80 81       	ld	r24, Z
    3cb4:	81 11       	cpse	r24, r1
    3cb6:	f7 cf       	rjmp	.-18     	; 0x3ca6 <LCD_4_bit_sendString+0xc>
		LCD_4_bit_sendChar(data[i]);
}
    3cb8:	cf 91       	pop	r28
    3cba:	1f 91       	pop	r17
    3cbc:	0f 91       	pop	r16
    3cbe:	08 95       	ret

Disassembly of section .text.LM35_init:

000040ee <LM35_init>:
 *  Author: youssef's
 */ 

#include "LM35.h"
void  LM35_init(){
	ADC_INIT(ADC1);
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	0e 94 0e 1a 	call	0x341c	; 0x341c <ADC_INIT>
    40f4:	08 95       	ret

Disassembly of section .text.LM35_READ:

00003cc0 <LM35_READ>:
}

uint8 LM35_READ(){
	return (ADC_READ(ADC1)*5*100)/1023;
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <ADC_READ>
    3cc6:	24 ef       	ldi	r18, 0xF4	; 244
    3cc8:	31 e0       	ldi	r19, 0x01	; 1
    3cca:	ac 01       	movw	r20, r24
    3ccc:	42 9f       	mul	r20, r18
    3cce:	c0 01       	movw	r24, r0
    3cd0:	43 9f       	mul	r20, r19
    3cd2:	90 0d       	add	r25, r0
    3cd4:	52 9f       	mul	r21, r18
    3cd6:	90 0d       	add	r25, r0
    3cd8:	11 24       	eor	r1, r1
    3cda:	6f ef       	ldi	r22, 0xFF	; 255
    3cdc:	73 e0       	ldi	r23, 0x03	; 3
    3cde:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <__udivmodhi4>
    3ce2:	86 2f       	mov	r24, r22
    3ce4:	08 95       	ret

Disassembly of section .text.oledSendStart:

00003ff6 <oledSendStart>:

/********************************************************************************
 Local FUnctions for sending the command/data
 ********************************************************************************/

void oledSendStart(uint8 address){
    3ff6:	cf 93       	push	r28
    3ff8:	c8 2f       	mov	r28, r24


    i2c_tx_start(MASTER_TRANSMITTER);
    3ffa:	80 e0       	ldi	r24, 0x00	; 0
    3ffc:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <i2c_tx_start>
    i2c_tx_address(address);
    4000:	8c 2f       	mov	r24, r28
    4002:	0e 94 ce 1b 	call	0x379c	; 0x379c <i2c_tx_address>
}
    4006:	cf 91       	pop	r28
    4008:	08 95       	ret

Disassembly of section .text.oledSendStop:

0000410c <oledSendStop>:


void oledSendStop(void){

    i2c_tx_stop();
    410c:	0e 94 32 20 	call	0x4064	; 0x4064 <i2c_tx_stop>
    4110:	08 95       	ret

Disassembly of section .text.oledSendByte:

00004112 <oledSendByte>:


void oledSendByte(uint8 ch){


    i2c_tx_byte(ch);
    4112:	0e 94 65 1f 	call	0x3eca	; 0x3eca <i2c_tx_byte>
    4116:	08 95       	ret

Disassembly of section .text.oledSendCommand:

00003e8e <oledSendCommand>:

}


void oledSendCommand(uint8 cmd){
    3e8e:	cf 93       	push	r28
    3e90:	c8 2f       	mov	r28, r24
    //oledSendStart(SSD1306_ADDRESS<<1);
    oledSendStart(SSD1306_ADDRESS);
    3e92:	8c e3       	ldi	r24, 0x3C	; 60
    3e94:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <oledSendStart>
    oledSendByte(SSD1306_COMMAND);
    3e98:	80 e0       	ldi	r24, 0x00	; 0
    3e9a:	0e 94 89 20 	call	0x4112	; 0x4112 <oledSendByte>
    oledSendByte(cmd);
    3e9e:	8c 2f       	mov	r24, r28
    3ea0:	0e 94 89 20 	call	0x4112	; 0x4112 <oledSendByte>
    oledSendStop();
    3ea4:	0e 94 86 20 	call	0x410c	; 0x410c <oledSendStop>
}
    3ea8:	cf 91       	pop	r28
    3eaa:	08 95       	ret

Disassembly of section .text.OLED_Clear:

00002fe2 <OLED_Clear>:
 * I/P Arguments: none.
 * Return value    : none
 * description  :This function clears the LCD and moves the cursor to beginning of first line
 ****************************************************************************************************/
void OLED_Clear()
{
    2fe2:	cf 93       	push	r28
    2fe4:	df 93       	push	r29
    int i;

    oledSendCommand(SSD1306_SET_COLUMN_ADDR);
    2fe6:	81 e2       	ldi	r24, 0x21	; 33
    2fe8:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(0);
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(127);
    2ff2:	8f e7       	ldi	r24, 0x7F	; 127
    2ff4:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>

    oledSendCommand(SSD1306_SET_PAGE_ADDR);
    2ff8:	82 e2       	ldi	r24, 0x22	; 34
    2ffa:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(0);
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(7);
    3004:	87 e0       	ldi	r24, 0x07	; 7
    3006:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>


    oledSendStart(SSD1306_ADDRESS);
    300a:	8c e3       	ldi	r24, 0x3C	; 60
    300c:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <oledSendStart>
    oledSendByte(SSD1306_DATA_CONTINUE);
    3010:	80 e4       	ldi	r24, 0x40	; 64
    3012:	0e 94 89 20 	call	0x4112	; 0x4112 <oledSendByte>

    for (i=0; i<1024; i++)      // Write Zeros to clear the display
    3016:	c0 e0       	ldi	r28, 0x00	; 0
    3018:	d0 e0       	ldi	r29, 0x00	; 0
    301a:	04 c0       	rjmp	.+8      	; 0x3024 <OLED_Clear+0x42>
    {
        oledSendByte(0);
    301c:	80 e0       	ldi	r24, 0x00	; 0
    301e:	0e 94 89 20 	call	0x4112	; 0x4112 <oledSendByte>


    oledSendStart(SSD1306_ADDRESS);
    oledSendByte(SSD1306_DATA_CONTINUE);

    for (i=0; i<1024; i++)      // Write Zeros to clear the display
    3022:	21 96       	adiw	r28, 0x01	; 1
    3024:	c1 15       	cp	r28, r1
    3026:	84 e0       	ldi	r24, 0x04	; 4
    3028:	d8 07       	cpc	r29, r24
    302a:	c4 f3       	brlt	.-16     	; 0x301c <OLED_Clear+0x3a>
    {
        oledSendByte(0);
    }

    oledSendCommand(SSD1306_SET_COLUMN_ADDR);
    302c:	81 e2       	ldi	r24, 0x21	; 33
    302e:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(0);
    3032:	80 e0       	ldi	r24, 0x00	; 0
    3034:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(127);
    3038:	8f e7       	ldi	r24, 0x7F	; 127
    303a:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>

    oledSendCommand(SSD1306_SET_PAGE_ADDR);
    303e:	82 e2       	ldi	r24, 0x22	; 34
    3040:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(0);
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(7);
    304a:	87 e0       	ldi	r24, 0x07	; 7
    304c:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>

    oledSendStart(SSD1306_ADDRESS);
    3050:	8c e3       	ldi	r24, 0x3C	; 60
    3052:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <oledSendStart>
    oledSendByte(SSD1306_DATA_CONTINUE);
    3056:	80 e4       	ldi	r24, 0x40	; 64
    3058:	0e 94 89 20 	call	0x4112	; 0x4112 <oledSendByte>
}
    305c:	df 91       	pop	r29
    305e:	cf 91       	pop	r28
    3060:	08 95       	ret

Disassembly of section .text.OLED_Init:

00002ae6 <OLED_Init>:
 * description  :This function is used to initialize the OLED in the normal mode.
 After initializing the OLED, It clears the OLED and sets the cursor to first line first position. .
 **************************************************************************************************/
void OLED_Init(void)
{
    i2c_init();
    2ae6:	0e 94 55 20 	call	0x40aa	; 0x40aa <i2c_init>
    oledSendCommand(SSD1306_DISPLAY_OFF);
    2aea:	8e ea       	ldi	r24, 0xAE	; 174
    2aec:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(SSD1306_SET_DISPLAY_CLOCK_DIV_RATIO);
    2af0:	85 ed       	ldi	r24, 0xD5	; 213
    2af2:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(0x80);
    2af6:	80 e8       	ldi	r24, 0x80	; 128
    2af8:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(SSD1306_SET_MULTIPLEX_RATIO);
    2afc:	88 ea       	ldi	r24, 0xA8	; 168
    2afe:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(0x3F);
    2b02:	8f e3       	ldi	r24, 0x3F	; 63
    2b04:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(SSD1306_SET_DISPLAY_OFFSET);
    2b08:	83 ed       	ldi	r24, 0xD3	; 211
    2b0a:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(0x0);
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(SSD1306_SET_START_LINE | 0x0);
    2b14:	80 e4       	ldi	r24, 0x40	; 64
    2b16:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(SSD1306_CHARGE_PUMP);
    2b1a:	8d e8       	ldi	r24, 0x8D	; 141
    2b1c:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(0x14);
    2b20:	84 e1       	ldi	r24, 0x14	; 20
    2b22:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(SSD1306_MEMORY_ADDR_MODE);
    2b26:	80 e2       	ldi	r24, 0x20	; 32
    2b28:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(0x00);
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(SSD1306_SET_SEGMENT_REMAP | 0x1);
    2b32:	81 ea       	ldi	r24, 0xA1	; 161
    2b34:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(SSD1306_COM_SCAN_DIR_DEC);
    2b38:	88 ec       	ldi	r24, 0xC8	; 200
    2b3a:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(SSD1306_SET_COM_PINS);
    2b3e:	8a ed       	ldi	r24, 0xDA	; 218
    2b40:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(0x12);
    2b44:	82 e1       	ldi	r24, 0x12	; 18
    2b46:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(SSD1306_SET_CONTRAST_CONTROL);
    2b4a:	81 e8       	ldi	r24, 0x81	; 129
    2b4c:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(0xCF);
    2b50:	8f ec       	ldi	r24, 0xCF	; 207
    2b52:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(SSD1306_SET_PRECHARGE_PERIOD);
    2b56:	89 ed       	ldi	r24, 0xD9	; 217
    2b58:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(0xF1);
    2b5c:	81 ef       	ldi	r24, 0xF1	; 241
    2b5e:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(SSD1306_SET_VCOM_DESELECT);
    2b62:	8b ed       	ldi	r24, 0xDB	; 219
    2b64:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(0x40);
    2b68:	80 e4       	ldi	r24, 0x40	; 64
    2b6a:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(SSD1306_DISPLAY_ALL_ON_RESUME);
    2b6e:	84 ea       	ldi	r24, 0xA4	; 164
    2b70:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(SSD1306_NORMAL_DISPLAY);
    2b74:	86 ea       	ldi	r24, 0xA6	; 166
    2b76:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
    oledSendCommand(SSD1306_DISPLAY_ON);
    2b7a:	8f ea       	ldi	r24, 0xAF	; 175
    2b7c:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>

    OLED_Clear();  /* Clear the complete LCD during init */
    2b80:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <OLED_Clear>
    2b84:	08 95       	ret

Disassembly of section .text.OLED_SetCursor:

0000383a <OLED_SetCursor>:
 * description  :This function moves the Cursor to specified position
 Note:If the Input(Line/Char number) are out of range
 then no action will be taken
 ****************************************************************************************************/
void OLED_SetCursor(uint8 lineNumber,uint8_t cursorPosition)
{
    383a:	cf 93       	push	r28
    383c:	df 93       	push	r29
    /* Move the Cursor to specified position only if it is in range */
    if((lineNumber <= C_OledLastLine_U8) && (cursorPosition <= 127))
    383e:	88 30       	cpi	r24, 0x08	; 8
    3840:	00 f5       	brcc	.+64     	; 0x3882 <OLED_SetCursor+0x48>
    3842:	66 23       	and	r22, r22
    3844:	f4 f0       	brlt	.+60     	; 0x3882 <OLED_SetCursor+0x48>
    3846:	d6 2f       	mov	r29, r22
    3848:	c8 2f       	mov	r28, r24
    {
        OledLineNum=lineNumber;   /* Save the specified line number */
    384a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <OledLineNum>
        OledCursorPos=cursorPosition; /* Save the specified cursor position */
    384e:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <OledCursorPos>

        oledSendCommand(SSD1306_SET_COLUMN_ADDR);
    3852:	81 e2       	ldi	r24, 0x21	; 33
    3854:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
        oledSendCommand(cursorPosition);
    3858:	8d 2f       	mov	r24, r29
    385a:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
        oledSendCommand(127);
    385e:	8f e7       	ldi	r24, 0x7F	; 127
    3860:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>

        oledSendCommand(SSD1306_SET_PAGE_ADDR);
    3864:	82 e2       	ldi	r24, 0x22	; 34
    3866:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
        oledSendCommand(lineNumber);
    386a:	8c 2f       	mov	r24, r28
    386c:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>
        oledSendCommand(7);
    3870:	87 e0       	ldi	r24, 0x07	; 7
    3872:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <oledSendCommand>

        oledSendStart(SSD1306_ADDRESS);
    3876:	8c e3       	ldi	r24, 0x3C	; 60
    3878:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <oledSendStart>
        oledSendByte(SSD1306_DATA_CONTINUE);
    387c:	80 e4       	ldi	r24, 0x40	; 64
    387e:	0e 94 89 20 	call	0x4112	; 0x4112 <oledSendByte>
    }
}
    3882:	df 91       	pop	r29
    3884:	cf 91       	pop	r28
    3886:	08 95       	ret

Disassembly of section .text.OLED_GoToNextLine:

0000400a <OLED_GoToNextLine>:
 ****************************************************************************************************/
void  OLED_GoToNextLine()
{
    /*Increment the current line number.
     In case it exceeds the limit, rool it back to first line */
    OledLineNum++;
    400a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <OledLineNum>
    400e:	8f 5f       	subi	r24, 0xFF	; 255
    OledLineNum = OledLineNum&0x07;
    4010:	87 70       	andi	r24, 0x07	; 7
    4012:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <OledLineNum>
    OLED_SetCursor(OledLineNum,0); /* Finally move it to next line */
    4016:	60 e0       	ldi	r22, 0x00	; 0
    4018:	0e 94 1d 1c 	call	0x383a	; 0x383a <OLED_SetCursor>
    401c:	08 95       	ret

Disassembly of section .text.OLED_DisplayChar:

000031d6 <OLED_DisplayChar>:
 * Return value    : none
 * description  : This function sends a character to be displayed on LCD.
 Any valid ascii value can be passed to display respective character
 ****************************************************************************************************/
void OLED_DisplayChar(uint8 ch)
{
    31d6:	cf 93       	push	r28
    31d8:	df 93       	push	r29
    31da:	d8 2f       	mov	r29, r24
    uint8 dat,i=0;

    if(((OledCursorPos+FONT_SIZE)>=128) || (ch=='\n'))
    31dc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OledCursorPos>
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	05 96       	adiw	r24, 0x05	; 5
    31e4:	80 38       	cpi	r24, 0x80	; 128
    31e6:	91 05       	cpc	r25, r1
    31e8:	14 f4       	brge	.+4      	; 0x31ee <OLED_DisplayChar+0x18>
    31ea:	da 30       	cpi	r29, 0x0A	; 10
    31ec:	11 f4       	brne	.+4      	; 0x31f2 <OLED_DisplayChar+0x1c>
    {
        /* If the cursor has reached to end of line on page1
         OR NewLine command is issued Then Move the cursor to next line */
        OLED_GoToNextLine();
    31ee:	0e 94 05 20 	call	0x400a	; 0x400a <OLED_GoToNextLine>
    }
    if(ch!='\n') /* TODO */
    31f2:	da 30       	cpi	r29, 0x0A	; 10
    31f4:	49 f1       	breq	.+82     	; 0x3248 <OLED_DisplayChar+0x72>
    {
        ch = ch-0x20; // As the lookup table starts from Space(0x20)
    31f6:	d0 52       	subi	r29, 0x20	; 32
 * description  : This function sends a character to be displayed on LCD.
 Any valid ascii value can be passed to display respective character
 ****************************************************************************************************/
void OLED_DisplayChar(uint8 ch)
{
    uint8 dat,i=0;
    31f8:	c0 e0       	ldi	r28, 0x00	; 0
    {
        ch = ch-0x20; // As the lookup table starts from Space(0x20)

        while(1)
        {
            dat= OledFontTable[ch][i]; /* Get the data to be displayed for LookUptable*/
    31fa:	2d 2f       	mov	r18, r29
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	c9 01       	movw	r24, r18
    3200:	88 0f       	add	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	88 0f       	add	r24, r24
    3206:	99 1f       	adc	r25, r25
    3208:	28 0f       	add	r18, r24
    320a:	39 1f       	adc	r19, r25
    320c:	2c 0f       	add	r18, r28
    320e:	31 1d       	adc	r19, r1
    3210:	03 2e       	mov	r0, r19
    3212:	00 0c       	add	r0, r0
    3214:	44 0b       	sbc	r20, r20
    3216:	22 59       	subi	r18, 0x92	; 146
    3218:	3e 4f       	sbci	r19, 0xFE	; 254
    321a:	4f 4f       	sbci	r20, 0xFF	; 255


            oledSendByte(dat); /* Display the data and keep track of cursor */
    321c:	f9 01       	movw	r30, r18
    321e:	84 91       	lpm	r24, Z
    3220:	47 fd       	sbrc	r20, 7
    3222:	80 81       	ld	r24, Z
    3224:	0e 94 89 20 	call	0x4112	; 0x4112 <oledSendByte>
            OledCursorPos++;
    3228:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <OledCursorPos>
    322c:	9f 5f       	subi	r25, 0xFF	; 255
    322e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <OledCursorPos>

            i++;
    3232:	cf 5f       	subi	r28, 0xFF	; 255

            if(i==FONT_SIZE) /* Exit the loop if End of char is encountered */
    3234:	c5 30       	cpi	r28, 0x05	; 5
    3236:	09 f7       	brne	.-62     	; 0x31fa <OLED_DisplayChar+0x24>
            {
                oledSendByte(0x00); /* Display the data and keep track of cursor */
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	0e 94 89 20 	call	0x4112	; 0x4112 <oledSendByte>
                OledCursorPos++;
    323e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OledCursorPos>
    3242:	8f 5f       	subi	r24, 0xFF	; 255
    3244:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <OledCursorPos>
                break;
            }
        }
    }
}
    3248:	df 91       	pop	r29
    324a:	cf 91       	pop	r28
    324c:	08 95       	ret

Disassembly of section .text.OLED_DisplayString:

00003f20 <OLED_DisplayString>:
 1.The ptr_stringPointer_u8 points to the first char of the string
 and traverses till the end(NULL CHAR)and displays a char each time.
 ****************************************************************************************************/
#if(Enable_OLED_DisplayString==1)
void OLED_DisplayString(uint8 *ptr)
{
    3f20:	cf 93       	push	r28
    3f22:	df 93       	push	r29
    3f24:	ec 01       	movw	r28, r24
    while(*ptr)
    3f26:	03 c0       	rjmp	.+6      	; 0x3f2e <OLED_DisplayString+0xe>
        OLED_DisplayChar(*ptr++);
    3f28:	21 96       	adiw	r28, 0x01	; 1
    3f2a:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <OLED_DisplayChar>
 and traverses till the end(NULL CHAR)and displays a char each time.
 ****************************************************************************************************/
#if(Enable_OLED_DisplayString==1)
void OLED_DisplayString(uint8 *ptr)
{
    while(*ptr)
    3f2e:	88 81       	ld	r24, Y
    3f30:	81 11       	cpse	r24, r1
    3f32:	fa cf       	rjmp	.-12     	; 0x3f28 <OLED_DisplayString+0x8>
        OLED_DisplayChar(*ptr++);
}
    3f34:	df 91       	pop	r29
    3f36:	cf 91       	pop	r28
    3f38:	08 95       	ret

Disassembly of section .text.OLED_DisplayNumber:

000019f8 <OLED_DisplayNumber>:
 8.(C_HEX_U8,0x12AB,6) then 6-digits ie. 0012AB will be displayed
 9.(C_HEX_U8,0x12AB,C_DisplayDefaultDigits_U8) then 12AB will be displayed.
 ****************************************************************************************************/
#if ((Enable_OLED_DisplayNumber == 1) || (Enable_OLED_DisplayFloatNumber == 1) || (Enable_OLED_Printf==1))
void OLED_DisplayNumber(uint8 v_numericSystem_u8, uint32 v_number_u32, uint8 v_numOfDigitsToDisplay_u8)
{
    19f8:	4f 92       	push	r4
    19fa:	5f 92       	push	r5
    19fc:	6f 92       	push	r6
    19fe:	7f 92       	push	r7
    1a00:	af 92       	push	r10
    1a02:	bf 92       	push	r11
    1a04:	cf 92       	push	r12
    1a06:	df 92       	push	r13
    1a08:	ef 92       	push	r14
    1a0a:	ff 92       	push	r15
    1a0c:	0f 93       	push	r16
    1a0e:	1f 93       	push	r17
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	2a 97       	sbiw	r28, 0x0a	; 10
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	a8 2e       	mov	r10, r24
    1a26:	6a 01       	movw	r12, r20
    1a28:	7b 01       	movw	r14, r22
    1a2a:	02 2f       	mov	r16, r18
    uint8_t i=0,a[10];

    if(C_BINARY_U8 == v_numericSystem_u8)
    1a2c:	82 e0       	ldi	r24, 0x02	; 2
    1a2e:	a8 12       	cpse	r10, r24
    1a30:	20 c0       	rjmp	.+64     	; 0x1a72 <OLED_DisplayNumber+0x7a>
    1a32:	1c c0       	rjmp	.+56     	; 0x1a6c <OLED_DisplayNumber+0x74>
    {
        while(v_numOfDigitsToDisplay_u8!=0)
        {
            /* Start Extracting the bits from the specified bit positions.
             Get the Acsii values of the bits and display */
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
    1a34:	80 2f       	mov	r24, r16
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	41 e0       	ldi	r20, 0x01	; 1
    1a3c:	50 e0       	ldi	r21, 0x00	; 0
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <OLED_DisplayNumber+0x4c>
    1a40:	44 0f       	add	r20, r20
    1a42:	55 1f       	adc	r21, r21
    1a44:	8a 95       	dec	r24
    1a46:	e2 f7       	brpl	.-8      	; 0x1a40 <OLED_DisplayNumber+0x48>
    1a48:	05 2e       	mov	r0, r21
    1a4a:	00 0c       	add	r0, r0
    1a4c:	66 0b       	sbc	r22, r22
    1a4e:	77 0b       	sbc	r23, r23
    1a50:	4c 21       	and	r20, r12
    1a52:	5d 21       	and	r21, r13
    1a54:	6e 21       	and	r22, r14
    1a56:	7f 21       	and	r23, r15
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	45 2b       	or	r20, r21
    1a5c:	46 2b       	or	r20, r22
    1a5e:	47 2b       	or	r20, r23
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <OLED_DisplayNumber+0x6c>
    1a62:	80 e0       	ldi	r24, 0x00	; 0
            OLED_DisplayChar(util_Dec2Ascii(i));
    1a64:	80 5d       	subi	r24, 0xD0	; 208
    1a66:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <OLED_DisplayChar>
            v_numOfDigitsToDisplay_u8--;
    1a6a:	01 50       	subi	r16, 0x01	; 1
{
    uint8_t i=0,a[10];

    if(C_BINARY_U8 == v_numericSystem_u8)
    {
        while(v_numOfDigitsToDisplay_u8!=0)
    1a6c:	01 11       	cpse	r16, r1
    1a6e:	e2 cf       	rjmp	.-60     	; 0x1a34 <OLED_DisplayNumber+0x3c>
    1a70:	52 c0       	rjmp	.+164    	; 0x1b16 <OLED_DisplayNumber+0x11e>
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
            OLED_DisplayChar(util_Dec2Ascii(i));
            v_numOfDigitsToDisplay_u8--;
        }
    }
    else if(v_number_u32==0)
    1a72:	45 2b       	or	r20, r21
    1a74:	46 2b       	or	r20, r22
    1a76:	47 2b       	or	r20, r23
    1a78:	39 f0       	breq	.+14     	; 0x1a88 <OLED_DisplayNumber+0x90>
    1a7a:	10 e0       	ldi	r17, 0x00	; 0
    1a7c:	35 c0       	rjmp	.+106    	; 0x1ae8 <OLED_DisplayNumber+0xf0>
    {
        /* If the number is zero then update the array with the same for displaying */
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            OLED_DisplayChar('0');
    1a7e:	80 e3       	ldi	r24, 0x30	; 48
    1a80:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <OLED_DisplayChar>
        }
    }
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for displaying */
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
    1a84:	1f 5f       	subi	r17, 0xFF	; 255
    1a86:	01 c0       	rjmp	.+2      	; 0x1a8a <OLED_DisplayNumber+0x92>
    1a88:	10 e0       	ldi	r17, 0x00	; 0
    1a8a:	10 17       	cp	r17, r16
    1a8c:	08 f0       	brcs	.+2      	; 0x1a90 <OLED_DisplayNumber+0x98>
    1a8e:	43 c0       	rjmp	.+134    	; 0x1b16 <OLED_DisplayNumber+0x11e>
    1a90:	1a 30       	cpi	r17, 0x0A	; 10
    1a92:	a8 f3       	brcs	.-22     	; 0x1a7e <OLED_DisplayNumber+0x86>
    1a94:	40 c0       	rjmp	.+128    	; 0x1b16 <OLED_DisplayNumber+0x11e>
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
        {
            /* Continue extracting the digits from right side
             till the Specified v_numOfDigitsToDisplay_u8 */
            if(v_number_u32!=0)
    1a96:	c1 14       	cp	r12, r1
    1a98:	d1 04       	cpc	r13, r1
    1a9a:	e1 04       	cpc	r14, r1
    1a9c:	f1 04       	cpc	r15, r1
    1a9e:	d1 f0       	breq	.+52     	; 0x1ad4 <OLED_DisplayNumber+0xdc>
                /* Extract the digits from the number till it becomes zero.
                 First get the remainder and divide the number by TypeOfNum(10-Dec, 16-Hex) each time.
                 example for Decimal number:
                 If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                 The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
    1aa0:	bc 2c       	mov	r11, r12
    1aa2:	4a 2c       	mov	r4, r10
    1aa4:	51 2c       	mov	r5, r1
    1aa6:	61 2c       	mov	r6, r1
    1aa8:	71 2c       	mov	r7, r1
    1aaa:	c7 01       	movw	r24, r14
    1aac:	b6 01       	movw	r22, r12
    1aae:	a3 01       	movw	r20, r6
    1ab0:	92 01       	movw	r18, r4
    1ab2:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <__udivmodsi4>
    1ab6:	c2 2e       	mov	r12, r18
    1ab8:	d3 2e       	mov	r13, r19
    1aba:	e4 2e       	mov	r14, r20
    1abc:	f5 2e       	mov	r15, r21
    1abe:	e1 e0       	ldi	r30, 0x01	; 1
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	ec 0f       	add	r30, r28
    1ac4:	fd 1f       	adc	r31, r29
    1ac6:	e1 0f       	add	r30, r17
    1ac8:	f1 1d       	adc	r31, r1
    1aca:	a2 9e       	mul	r10, r18
    1acc:	b0 18       	sub	r11, r0
    1ace:	11 24       	eor	r1, r1
    1ad0:	b0 82       	st	Z, r11
    1ad2:	09 c0       	rjmp	.+18     	; 0x1ae6 <OLED_DisplayNumber+0xee>
                v_number_u32=v_number_u32/v_numericSystem_u8;
            }
            else if( (v_numOfDigitsToDisplay_u8 == C_DisplayDefaultDigits_U8) ||
    1ad4:	0b 30       	cpi	r16, 0x0B	; 11
    1ad6:	e8 f4       	brcc	.+58     	; 0x1b12 <OLED_DisplayNumber+0x11a>
            else
            {
                /* In case user expects more digits to be displayed than the actual digits in number,
                 then update the remaining digits with zero.
                 Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
    1ad8:	e1 e0       	ldi	r30, 0x01	; 1
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	ec 0f       	add	r30, r28
    1ade:	fd 1f       	adc	r31, r29
    1ae0:	e1 0f       	add	r30, r17
    1ae2:	f1 1d       	adc	r31, r1
    1ae4:	10 82       	st	Z, r1
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            OLED_DisplayChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
    1ae6:	1f 5f       	subi	r17, 0xFF	; 255
    1ae8:	10 17       	cp	r17, r16
    1aea:	a8 f2       	brcs	.-86     	; 0x1a96 <OLED_DisplayNumber+0x9e>
    1aec:	12 c0       	rjmp	.+36     	; 0x1b12 <OLED_DisplayNumber+0x11a>
        }

        while(i!=0)
        {
            /* Finally get the ascii values of the digits and display*/
            OLED_DisplayChar(util_Hex2Ascii(a[i-1]));
    1aee:	e1 2f       	mov	r30, r17
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	31 97       	sbiw	r30, 0x01	; 1
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	8c 0f       	add	r24, r28
    1afa:	9d 1f       	adc	r25, r29
    1afc:	e8 0f       	add	r30, r24
    1afe:	f9 1f       	adc	r31, r25
    1b00:	80 81       	ld	r24, Z
    1b02:	8a 30       	cpi	r24, 0x0A	; 10
    1b04:	10 f0       	brcs	.+4      	; 0x1b0a <OLED_DisplayNumber+0x112>
    1b06:	89 5c       	subi	r24, 0xC9	; 201
    1b08:	01 c0       	rjmp	.+2      	; 0x1b0c <OLED_DisplayNumber+0x114>
    1b0a:	80 5d       	subi	r24, 0xD0	; 208
    1b0c:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <OLED_DisplayChar>
            i--;
    1b10:	11 50       	subi	r17, 0x01	; 1
                 Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
            }
        }

        while(i!=0)
    1b12:	11 11       	cpse	r17, r1
    1b14:	ec cf       	rjmp	.-40     	; 0x1aee <OLED_DisplayNumber+0xf6>
            /* Finally get the ascii values of the digits and display*/
            OLED_DisplayChar(util_Hex2Ascii(a[i-1]));
            i--;
        }
    }
}
    1b16:	2a 96       	adiw	r28, 0x0a	; 10
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	1f 91       	pop	r17
    1b28:	0f 91       	pop	r16
    1b2a:	ff 90       	pop	r15
    1b2c:	ef 90       	pop	r14
    1b2e:	df 90       	pop	r13
    1b30:	cf 90       	pop	r12
    1b32:	bf 90       	pop	r11
    1b34:	af 90       	pop	r10
    1b36:	7f 90       	pop	r7
    1b38:	6f 90       	pop	r6
    1b3a:	5f 90       	pop	r5
    1b3c:	4f 90       	pop	r4
    1b3e:	08 95       	ret

Disassembly of section .text.OLED_DisplayFloatNumber:

000033ac <OLED_DisplayFloatNumber>:
 Note: Float will be disabled by default as it takes huge controller resources
 It can be enabled by changing value of Enable_OLED_DisplayFloatNumber to 1 in lcd.h
 ***************************************************************************************************/
#if (Enable_OLED_DisplayFloatNumber == 1)
void OLED_DisplayFloatNumber(double v_floatNum_f32)
{
    33ac:	8f 92       	push	r8
    33ae:	9f 92       	push	r9
    33b0:	af 92       	push	r10
    33b2:	bf 92       	push	r11
    33b4:	cf 92       	push	r12
    33b6:	df 92       	push	r13
    33b8:	ef 92       	push	r14
    33ba:	ff 92       	push	r15
    33bc:	6b 01       	movw	r12, r22
    33be:	7c 01       	movw	r14, r24
     1.Type cast the number to int to get the integer part.
     2.Display the extracted integer part followed by a decimal point(.)
     3.Later the integer part is made zero by subtracting with the extracted integer value.
     4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */

    v_temp_u32 = (uint32_t) v_floatNum_f32;
    33c0:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__fixunssfsi>
    33c4:	4b 01       	movw	r8, r22
    33c6:	5c 01       	movw	r10, r24
    OLED_DisplayNumber(C_DECIMAL_U8,v_temp_u32,C_DisplayDefaultDigits_U8);
    33c8:	2f ef       	ldi	r18, 0xFF	; 255
    33ca:	ab 01       	movw	r20, r22
    33cc:	bc 01       	movw	r22, r24
    33ce:	8a e0       	ldi	r24, 0x0A	; 10
    33d0:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <OLED_DisplayNumber>

    OLED_DisplayChar('.');
    33d4:	8e e2       	ldi	r24, 0x2E	; 46
    33d6:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <OLED_DisplayChar>

    v_floatNum_f32 = v_floatNum_f32 - v_temp_u32;
    33da:	c5 01       	movw	r24, r10
    33dc:	b4 01       	movw	r22, r8
    33de:	0e 94 ae 18 	call	0x315c	; 0x315c <__floatunsisf>
    33e2:	9b 01       	movw	r18, r22
    33e4:	ac 01       	movw	r20, r24
    33e6:	c7 01       	movw	r24, r14
    33e8:	b6 01       	movw	r22, r12
    33ea:	0e 94 39 20 	call	0x4072	; 0x4072 <__subsf3>
    v_temp_u32 = v_floatNum_f32 * 1000000;
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	34 e2       	ldi	r19, 0x24	; 36
    33f2:	44 e7       	ldi	r20, 0x74	; 116
    33f4:	59 e4       	ldi	r21, 0x49	; 73
    33f6:	0e 94 7f 20 	call	0x40fe	; 0x40fe <__mulsf3>
    33fa:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__fixunssfsi>
    33fe:	ab 01       	movw	r20, r22
    3400:	bc 01       	movw	r22, r24
    OLED_DisplayNumber(C_DECIMAL_U8,v_temp_u32,C_DisplayDefaultDigits_U8);
    3402:	2f ef       	ldi	r18, 0xFF	; 255
    3404:	8a e0       	ldi	r24, 0x0A	; 10
    3406:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <OLED_DisplayNumber>
}
    340a:	ff 90       	pop	r15
    340c:	ef 90       	pop	r14
    340e:	df 90       	pop	r13
    3410:	cf 90       	pop	r12
    3412:	bf 90       	pop	r11
    3414:	af 90       	pop	r10
    3416:	9f 90       	pop	r9
    3418:	8f 90       	pop	r8
    341a:	08 95       	ret

Disassembly of section .text.OLED_Printf:

00000ea0 <OLED_Printf>:
 uint8_t v_Num_u8;
 OLED_Printf("num1:%u",(uint16_t)v_Num_u8);
 **************************************************************************************************/
#if ( Enable_OLED_Printf == 1 )
void OLED_Printf(const char *argList, ...)
{
     ea0:	4f 92       	push	r4
     ea2:	5f 92       	push	r5
     ea4:	6f 92       	push	r6
     ea6:	7f 92       	push	r7
     ea8:	af 92       	push	r10
     eaa:	bf 92       	push	r11
     eac:	cf 92       	push	r12
     eae:	df 92       	push	r13
     eb0:	ef 92       	push	r14
     eb2:	1f 93       	push	r17
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	fe 01       	movw	r30, r28
     ebe:	3f 96       	adiw	r30, 0x0f	; 15
     ec0:	c1 90       	ld	r12, Z+
     ec2:	d1 90       	ld	r13, Z+
     ec4:	e1 90       	ld	r14, Z+
    uint8 v_numOfDigitsToDisp_u8;
#if (Enable_OLED_DisplayFloatNumber == 1)
    double v_floatNum_f32;
#endif

    va_start(argp, argList);
     ec6:	3f 01       	movw	r6, r30

    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
     ec8:	f6 c0       	rjmp	.+492    	; 0x10b6 <OLED_Printf+0x216>
    {

        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
     eca:	85 32       	cpi	r24, 0x25	; 37
     ecc:	09 f0       	breq	.+2      	; 0xed0 <OLED_Printf+0x30>
     ece:	ed c0       	rjmp	.+474    	; 0x10aa <OLED_Printf+0x20a>
        {
            ptr++;
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	c8 1a       	sub	r12, r24
     ed4:	d8 0a       	sbc	r13, r24
     ed6:	e8 0a       	sbc	r14, r24
            ch = *ptr;
     ed8:	f6 01       	movw	r30, r12
     eda:	84 91       	lpm	r24, Z
     edc:	e7 fc       	sbrc	r14, 7
     ede:	80 81       	ld	r24, Z
            if((ch>=0x30) && (ch<=0x39))
     ee0:	90 ed       	ldi	r25, 0xD0	; 208
     ee2:	98 0f       	add	r25, r24
     ee4:	9a 30       	cpi	r25, 0x0A	; 10
     ee6:	a0 f0       	brcs	.+40     	; 0xf10 <OLED_Printf+0x70>
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     ee8:	1f ef       	ldi	r17, 0xFF	; 255
     eea:	17 c0       	rjmp	.+46     	; 0xf1a <OLED_Printf+0x7a>
            if((ch>=0x30) && (ch<=0x39))
            {
                v_numOfDigitsToDisp_u8 = 0;
                while((ch>=0x30) && (ch<=0x39))
                {
                    v_numOfDigitsToDisp_u8 = (v_numOfDigitsToDisp_u8 * 10) + (ch-0x30);
     eec:	e1 2f       	mov	r30, r17
     eee:	ee 0f       	add	r30, r30
     ef0:	9e 2f       	mov	r25, r30
     ef2:	99 0f       	add	r25, r25
     ef4:	99 0f       	add	r25, r25
     ef6:	e9 0f       	add	r30, r25
     ef8:	8e 0f       	add	r24, r30
     efa:	10 ed       	ldi	r17, 0xD0	; 208
     efc:	18 0f       	add	r17, r24
                    ptr++;
     efe:	ef ef       	ldi	r30, 0xFF	; 255
     f00:	ce 1a       	sub	r12, r30
     f02:	de 0a       	sbc	r13, r30
     f04:	ee 0a       	sbc	r14, r30
                    ch = *ptr;
     f06:	f6 01       	movw	r30, r12
     f08:	84 91       	lpm	r24, Z
     f0a:	e7 fc       	sbrc	r14, 7
     f0c:	80 81       	ld	r24, Z
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <OLED_Printf+0x72>
     f10:	10 e0       	ldi	r17, 0x00	; 0
            ptr++;
            ch = *ptr;
            if((ch>=0x30) && (ch<=0x39))
            {
                v_numOfDigitsToDisp_u8 = 0;
                while((ch>=0x30) && (ch<=0x39))
     f12:	90 ed       	ldi	r25, 0xD0	; 208
     f14:	98 0f       	add	r25, r24
     f16:	9a 30       	cpi	r25, 0x0A	; 10
     f18:	48 f3       	brcs	.-46     	; 0xeec <OLED_Printf+0x4c>
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
            }


            switch(ch)       /* Decode the type of the argument */
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	fc 01       	movw	r30, r24
     f1e:	b5 97       	sbiw	r30, 0x25	; 37
     f20:	e4 35       	cpi	r30, 0x54	; 84
     f22:	f1 05       	cpc	r31, r1
     f24:	08 f0       	brcs	.+2      	; 0xf28 <OLED_Printf+0x88>
     f26:	c3 c0       	rjmp	.+390    	; 0x10ae <OLED_Printf+0x20e>
     f28:	e6 5d       	subi	r30, 0xD6	; 214
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	0c 94 67 20 	jmp	0x40ce	; 0x40ce <__tablejump2__>
            {
                case 'C':
                case 'c':     /* Argument type is of char, hence read char data from the argp */
                    ch = va_arg(argp, int);
     f30:	53 01       	movw	r10, r6
     f32:	f2 e0       	ldi	r31, 0x02	; 2
     f34:	af 0e       	add	r10, r31
     f36:	b1 1c       	adc	r11, r1
                    OLED_DisplayChar(ch);
     f38:	f3 01       	movw	r30, r6
     f3a:	80 81       	ld	r24, Z
     f3c:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <OLED_DisplayChar>

            switch(ch)       /* Decode the type of the argument */
            {
                case 'C':
                case 'c':     /* Argument type is of char, hence read char data from the argp */
                    ch = va_arg(argp, int);
     f40:	35 01       	movw	r6, r10
                    OLED_DisplayChar(ch);
                    break;
     f42:	b5 c0       	rjmp	.+362    	; 0x10ae <OLED_Printf+0x20e>

                case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
                    v_num_s16 = va_arg(argp, int);
     f44:	53 01       	movw	r10, r6
     f46:	f2 e0       	ldi	r31, 0x02	; 2
     f48:	af 0e       	add	r10, r31
     f4a:	b1 1c       	adc	r11, r1
     f4c:	f3 01       	movw	r30, r6
     f4e:	60 80       	ld	r6, Z
     f50:	71 80       	ldd	r7, Z+1	; 0x01
                    if(v_num_s16<0)
     f52:	77 20       	and	r7, r7
     f54:	34 f4       	brge	.+12     	; 0xf62 <OLED_Printf+0xc2>
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s16 = -v_num_s16;
     f56:	71 94       	neg	r7
     f58:	61 94       	neg	r6
     f5a:	71 08       	sbc	r7, r1
                        OLED_DisplayChar('-');
     f5c:	8d e2       	ldi	r24, 0x2D	; 45
     f5e:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <OLED_DisplayChar>
                    }
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
     f62:	a3 01       	movw	r20, r6
     f64:	77 0c       	add	r7, r7
     f66:	66 0b       	sbc	r22, r22
     f68:	77 0b       	sbc	r23, r23
     f6a:	21 2f       	mov	r18, r17
     f6c:	8a e0       	ldi	r24, 0x0A	; 10
     f6e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <OLED_DisplayNumber>
                    ch = va_arg(argp, int);
                    OLED_DisplayChar(ch);
                    break;

                case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
                    v_num_s16 = va_arg(argp, int);
     f72:	35 01       	movw	r6, r10
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s16 = -v_num_s16;
                        OLED_DisplayChar('-');
                    }
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
                    break;
     f74:	9c c0       	rjmp	.+312    	; 0x10ae <OLED_Printf+0x20e>

                case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
                    v_num_s32 = va_arg(argp, sint32);
     f76:	53 01       	movw	r10, r6
     f78:	f4 e0       	ldi	r31, 0x04	; 4
     f7a:	af 0e       	add	r10, r31
     f7c:	b1 1c       	adc	r11, r1
     f7e:	f3 01       	movw	r30, r6
     f80:	40 80       	ld	r4, Z
     f82:	51 80       	ldd	r5, Z+1	; 0x01
     f84:	62 80       	ldd	r6, Z+2	; 0x02
     f86:	73 80       	ldd	r7, Z+3	; 0x03
                    if(v_num_s32<0)
     f88:	77 20       	and	r7, r7
     f8a:	5c f4       	brge	.+22     	; 0xfa2 <OLED_Printf+0x102>
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s32 = -v_num_s32;
     f8c:	70 94       	com	r7
     f8e:	60 94       	com	r6
     f90:	50 94       	com	r5
     f92:	40 94       	com	r4
     f94:	41 1c       	adc	r4, r1
     f96:	51 1c       	adc	r5, r1
     f98:	61 1c       	adc	r6, r1
     f9a:	71 1c       	adc	r7, r1
                        OLED_DisplayChar('-');
     f9c:	8d e2       	ldi	r24, 0x2D	; 45
     f9e:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <OLED_DisplayChar>
                    }
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
     fa2:	21 2f       	mov	r18, r17
     fa4:	b3 01       	movw	r22, r6
     fa6:	a2 01       	movw	r20, r4
     fa8:	8a e0       	ldi	r24, 0x0A	; 10
     faa:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <OLED_DisplayNumber>
                    }
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
                    break;

                case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
                    v_num_s32 = va_arg(argp, sint32);
     fae:	35 01       	movw	r6, r10
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s32 = -v_num_s32;
                        OLED_DisplayChar('-');
                    }
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
                    break;
     fb0:	7e c0       	rjmp	.+252    	; 0x10ae <OLED_Printf+0x20e>

                case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
                    v_num_u16 = va_arg(argp, int);
     fb2:	53 01       	movw	r10, r6
     fb4:	f2 e0       	ldi	r31, 0x02	; 2
     fb6:	af 0e       	add	r10, r31
     fb8:	b1 1c       	adc	r11, r1
     fba:	f3 01       	movw	r30, r6
     fbc:	40 81       	ld	r20, Z
     fbe:	51 81       	ldd	r21, Z+1	; 0x01
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	21 2f       	mov	r18, r17
     fc6:	8a e0       	ldi	r24, 0x0A	; 10
     fc8:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <OLED_DisplayNumber>
                    }
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
                    break;

                case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
                    v_num_u16 = va_arg(argp, int);
     fcc:	35 01       	movw	r6, r10
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
     fce:	6f c0       	rjmp	.+222    	; 0x10ae <OLED_Printf+0x20e>

                case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
                    v_num_u32 = va_arg(argp, uint32);
     fd0:	53 01       	movw	r10, r6
     fd2:	f4 e0       	ldi	r31, 0x04	; 4
     fd4:	af 0e       	add	r10, r31
     fd6:	b1 1c       	adc	r11, r1
     fd8:	f3 01       	movw	r30, r6
     fda:	40 81       	ld	r20, Z
     fdc:	51 81       	ldd	r21, Z+1	; 0x01
     fde:	62 81       	ldd	r22, Z+2	; 0x02
     fe0:	73 81       	ldd	r23, Z+3	; 0x03
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
     fe2:	21 2f       	mov	r18, r17
     fe4:	8a e0       	ldi	r24, 0x0A	; 10
     fe6:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <OLED_DisplayNumber>
                    v_num_u16 = va_arg(argp, int);
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;

                case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
                    v_num_u32 = va_arg(argp, uint32);
     fea:	35 01       	movw	r6, r10
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
     fec:	60 c0       	rjmp	.+192    	; 0x10ae <OLED_Printf+0x20e>

                case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u16 = va_arg(argp, int);
     fee:	53 01       	movw	r10, r6
     ff0:	f2 e0       	ldi	r31, 0x02	; 2
     ff2:	af 0e       	add	r10, r31
     ff4:	b1 1c       	adc	r11, r1
     ff6:	f3 01       	movw	r30, r6
     ff8:	40 81       	ld	r20, Z
     ffa:	51 81       	ldd	r21, Z+1	; 0x01
                    OLED_DisplayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	21 2f       	mov	r18, r17
    1002:	80 e1       	ldi	r24, 0x10	; 16
    1004:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <OLED_DisplayNumber>
                    v_num_u32 = va_arg(argp, uint32);
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;

                case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u16 = va_arg(argp, int);
    1008:	35 01       	movw	r6, r10
                    OLED_DisplayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
    100a:	51 c0       	rjmp	.+162    	; 0x10ae <OLED_Printf+0x20e>

                case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u32 = va_arg(argp, uint32);
    100c:	53 01       	movw	r10, r6
    100e:	f4 e0       	ldi	r31, 0x04	; 4
    1010:	af 0e       	add	r10, r31
    1012:	b1 1c       	adc	r11, r1
    1014:	f3 01       	movw	r30, r6
    1016:	40 81       	ld	r20, Z
    1018:	51 81       	ldd	r21, Z+1	; 0x01
    101a:	62 81       	ldd	r22, Z+2	; 0x02
    101c:	73 81       	ldd	r23, Z+3	; 0x03
                    OLED_DisplayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
    101e:	21 2f       	mov	r18, r17
    1020:	80 e1       	ldi	r24, 0x10	; 16
    1022:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <OLED_DisplayNumber>
                    v_num_u16 = va_arg(argp, int);
                    OLED_DisplayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;

                case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u32 = va_arg(argp, uint32);
    1026:	35 01       	movw	r6, r10
                    OLED_DisplayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
    1028:	42 c0       	rjmp	.+132    	; 0x10ae <OLED_Printf+0x20e>


                case 'b':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u16 = va_arg(argp, int);
    102a:	53 01       	movw	r10, r6
    102c:	f2 e0       	ldi	r31, 0x02	; 2
    102e:	af 0e       	add	r10, r31
    1030:	b1 1c       	adc	r11, r1
    1032:	f3 01       	movw	r30, r6
    1034:	40 81       	ld	r20, Z
    1036:	51 81       	ldd	r21, Z+1	; 0x01
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
    1038:	1f 3f       	cpi	r17, 0xFF	; 255
    103a:	09 f4       	brne	.+2      	; 0x103e <OLED_Printf+0x19e>
                        v_numOfDigitsToDisp_u8 = 16;
    103c:	10 e1       	ldi	r17, 0x10	; 16
                    OLED_DisplayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	21 2f       	mov	r18, r17
    1044:	82 e0       	ldi	r24, 0x02	; 2
    1046:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <OLED_DisplayNumber>
                    OLED_DisplayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;


                case 'b':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u16 = va_arg(argp, int);
    104a:	35 01       	movw	r6, r10
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                        v_numOfDigitsToDisp_u8 = 16;
                    OLED_DisplayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
    104c:	30 c0       	rjmp	.+96     	; 0x10ae <OLED_Printf+0x20e>

                case 'B':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u32 = va_arg(argp, uint32);
    104e:	53 01       	movw	r10, r6
    1050:	f4 e0       	ldi	r31, 0x04	; 4
    1052:	af 0e       	add	r10, r31
    1054:	b1 1c       	adc	r11, r1
    1056:	f3 01       	movw	r30, r6
    1058:	40 81       	ld	r20, Z
    105a:	51 81       	ldd	r21, Z+1	; 0x01
    105c:	62 81       	ldd	r22, Z+2	; 0x02
    105e:	73 81       	ldd	r23, Z+3	; 0x03
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
    1060:	1f 3f       	cpi	r17, 0xFF	; 255
    1062:	09 f4       	brne	.+2      	; 0x1066 <OLED_Printf+0x1c6>
                        v_numOfDigitsToDisp_u8 = 16;
    1064:	10 e1       	ldi	r17, 0x10	; 16
                    OLED_DisplayNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToDisp_u8);
    1066:	21 2f       	mov	r18, r17
    1068:	82 e0       	ldi	r24, 0x02	; 2
    106a:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <OLED_DisplayNumber>
                        v_numOfDigitsToDisp_u8 = 16;
                    OLED_DisplayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;

                case 'B':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u32 = va_arg(argp, uint32);
    106e:	35 01       	movw	r6, r10
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                        v_numOfDigitsToDisp_u8 = 16;
                    OLED_DisplayNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
    1070:	1e c0       	rjmp	.+60     	; 0x10ae <OLED_Printf+0x20e>


                case 'F':
                case 'f': /* Argument type is of float, hence read double data from the argp */
#if (Enable_OLED_DisplayFloatNumber == 1)
                    v_floatNum_f32 = va_arg(argp, double);
    1072:	53 01       	movw	r10, r6
    1074:	f4 e0       	ldi	r31, 0x04	; 4
    1076:	af 0e       	add	r10, r31
    1078:	b1 1c       	adc	r11, r1
    107a:	f3 01       	movw	r30, r6
    107c:	60 81       	ld	r22, Z
    107e:	71 81       	ldd	r23, Z+1	; 0x01
    1080:	82 81       	ldd	r24, Z+2	; 0x02
    1082:	93 81       	ldd	r25, Z+3	; 0x03
                    OLED_DisplayFloatNumber(v_floatNum_f32);
    1084:	0e 94 d6 19 	call	0x33ac	; 0x33ac <OLED_DisplayFloatNumber>


                case 'F':
                case 'f': /* Argument type is of float, hence read double data from the argp */
#if (Enable_OLED_DisplayFloatNumber == 1)
                    v_floatNum_f32 = va_arg(argp, double);
    1088:	35 01       	movw	r6, r10
                    OLED_DisplayFloatNumber(v_floatNum_f32);
#endif
                    break;
    108a:	11 c0       	rjmp	.+34     	; 0x10ae <OLED_Printf+0x20e>


                case 'S':
                case 's': /* Argument type is of string, hence get the pointer to sting passed */
                    str = va_arg(argp, char *);
    108c:	53 01       	movw	r10, r6
    108e:	f2 e0       	ldi	r31, 0x02	; 2
    1090:	af 0e       	add	r10, r31
    1092:	b1 1c       	adc	r11, r1
                    OLED_DisplayString(str);
    1094:	f3 01       	movw	r30, r6
    1096:	80 81       	ld	r24, Z
    1098:	91 81       	ldd	r25, Z+1	; 0x01
    109a:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <OLED_DisplayString>
                    break;


                case 'S':
                case 's': /* Argument type is of string, hence get the pointer to sting passed */
                    str = va_arg(argp, char *);
    109e:	35 01       	movw	r6, r10
                    OLED_DisplayString(str);
                    break;
    10a0:	06 c0       	rjmp	.+12     	; 0x10ae <OLED_Printf+0x20e>

                case '%':
                    OLED_DisplayChar('%');
    10a2:	85 e2       	ldi	r24, 0x25	; 37
    10a4:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <OLED_DisplayChar>
                    break;
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <OLED_Printf+0x20e>
            }
        }
        else
        {
            /* As '%' is not detected display/transmit the char passed */
            OLED_DisplayChar(ch);
    10aa:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <OLED_DisplayChar>
#endif

    va_start(argp, argList);

    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
    10ae:	ff ef       	ldi	r31, 0xFF	; 255
    10b0:	cf 1a       	sub	r12, r31
    10b2:	df 0a       	sbc	r13, r31
    10b4:	ef 0a       	sbc	r14, r31
    10b6:	f6 01       	movw	r30, r12
    10b8:	84 91       	lpm	r24, Z
    10ba:	e7 fc       	sbrc	r14, 7
    10bc:	80 81       	ld	r24, Z
    10be:	81 11       	cpse	r24, r1
    10c0:	04 cf       	rjmp	.-504    	; 0xeca <OLED_Printf+0x2a>
            OLED_DisplayChar(ch);
        }
    }

    va_end(argp);
}
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	ef 90       	pop	r14
    10ca:	df 90       	pop	r13
    10cc:	cf 90       	pop	r12
    10ce:	bf 90       	pop	r11
    10d0:	af 90       	pop	r10
    10d2:	7f 90       	pop	r7
    10d4:	6f 90       	pop	r6
    10d6:	5f 90       	pop	r5
    10d8:	4f 90       	pop	r4
    10da:	08 95       	ret

Disassembly of section .text.ReadReg:

00003dea <ReadReg>:
#include <util/delay.h>

uint8 ReadReg(uint8 reg)
{
	uint8 data;
	clearBit(PORTB_R,SS);
    3dea:	98 b3       	in	r25, 0x18	; 24
    3dec:	97 7f       	andi	r25, 0xF7	; 247
    3dee:	98 bb       	out	0x18, r25	; 24
	SPI_DATA_RW(((reg << 1) & 0x7E) | 0x80);
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	88 0f       	add	r24, r24
    3df4:	99 1f       	adc	r25, r25
    3df6:	8e 77       	andi	r24, 0x7E	; 126
    3df8:	80 68       	ori	r24, 0x80	; 128
    3dfa:	0e 94 6d 20 	call	0x40da	; 0x40da <SPI_DATA_RW>
	data = SPI_DATA_RW (0x00);
    3dfe:	80 e0       	ldi	r24, 0x00	; 0
    3e00:	0e 94 6d 20 	call	0x40da	; 0x40da <SPI_DATA_RW>
	setBit(PORTB_R,SS);
    3e04:	98 b3       	in	r25, 0x18	; 24
    3e06:	98 60       	ori	r25, 0x08	; 8
    3e08:	98 bb       	out	0x18, r25	; 24
	return data;
}
    3e0a:	08 95       	ret

Disassembly of section .text.WriteReg:

00003ce6 <WriteReg>:
    }
  }


void WriteReg(uint8 reg, uint8 value)
{
    3ce6:	cf 93       	push	r28
    3ce8:	c6 2f       	mov	r28, r22
	clearBit(PORTB_R,SS);
    3cea:	98 b3       	in	r25, 0x18	; 24
    3cec:	97 7f       	andi	r25, 0xF7	; 247
    3cee:	98 bb       	out	0x18, r25	; 24
	SPI_DATA_RW((reg << 1) & 0x7E);
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	88 0f       	add	r24, r24
    3cf4:	99 1f       	adc	r25, r25
    3cf6:	8e 77       	andi	r24, 0x7E	; 126
    3cf8:	0e 94 6d 20 	call	0x40da	; 0x40da <SPI_DATA_RW>
	SPI_DATA_RW(value);
    3cfc:	8c 2f       	mov	r24, r28
    3cfe:	0e 94 6d 20 	call	0x40da	; 0x40da <SPI_DATA_RW>
	setBit(PORTB_R,SS);
    3d02:	88 b3       	in	r24, 0x18	; 24
    3d04:	88 60       	ori	r24, 0x08	; 8
    3d06:	88 bb       	out	0x18, r24	; 24
}
    3d08:	cf 91       	pop	r28
    3d0a:	08 95       	ret

Disassembly of section .text.WriteRegMulti:

00003062 <WriteRegMulti>:
	setBit(PORTB_R,SS);
    for (int i = 0; i < count; i++)
    {
    	values[i] = in[i + 1];
    }
  }
    3062:	cf 92       	push	r12
    3064:	df 92       	push	r13
    3066:	ff 92       	push	r15
    3068:	0f 93       	push	r16
    306a:	1f 93       	push	r17
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    3074:	6e 97       	sbiw	r28, 0x1e	; 30
    3076:	0f b6       	in	r0, 0x3f	; 63
    3078:	f8 94       	cli
    307a:	de bf       	out	0x3e, r29	; 62
    307c:	0f be       	out	0x3f, r0	; 63
    307e:	cd bf       	out	0x3d, r28	; 61
    3080:	6a 01       	movw	r12, r20
    3082:	ff 24       	eor	r15, r15
    3084:	f3 94       	inc	r15
    3086:	f6 0e       	add	r15, r22
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	88 0f       	add	r24, r24
    308c:	99 1f       	adc	r25, r25
    308e:	8e 77       	andi	r24, 0x7E	; 126
    3090:	89 83       	std	Y+1, r24	; 0x01
    3092:	88 b3       	in	r24, 0x18	; 24
    3094:	87 7f       	andi	r24, 0xF7	; 247
    3096:	88 bb       	out	0x18, r24	; 24
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	0e 94 6d 20 	call	0x40da	; 0x40da <SPI_DATA_RW>
    309e:	01 e0       	ldi	r16, 0x01	; 1
    30a0:	10 e0       	ldi	r17, 0x00	; 0
    30a2:	09 c0       	rjmp	.+18     	; 0x30b6 <WriteRegMulti+0x54>
    30a4:	f6 01       	movw	r30, r12
    30a6:	e0 0f       	add	r30, r16
    30a8:	f1 1f       	adc	r31, r17
    30aa:	31 97       	sbiw	r30, 0x01	; 1
    30ac:	80 81       	ld	r24, Z
    30ae:	0e 94 6d 20 	call	0x40da	; 0x40da <SPI_DATA_RW>
    30b2:	0f 5f       	subi	r16, 0xFF	; 255
    30b4:	1f 4f       	sbci	r17, 0xFF	; 255
    30b6:	8f 2d       	mov	r24, r15
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	08 17       	cp	r16, r24
    30bc:	19 07       	cpc	r17, r25
    30be:	94 f3       	brlt	.-28     	; 0x30a4 <WriteRegMulti+0x42>
    30c0:	88 b3       	in	r24, 0x18	; 24
    30c2:	88 60       	ori	r24, 0x08	; 8
    30c4:	88 bb       	out	0x18, r24	; 24
    30c6:	6e 96       	adiw	r28, 0x1e	; 30
    30c8:	0f b6       	in	r0, 0x3f	; 63
    30ca:	f8 94       	cli
    30cc:	de bf       	out	0x3e, r29	; 62
    30ce:	0f be       	out	0x3f, r0	; 63
    30d0:	cd bf       	out	0x3d, r28	; 61
    30d2:	df 91       	pop	r29
    30d4:	cf 91       	pop	r28
    30d6:	1f 91       	pop	r17
    30d8:	0f 91       	pop	r16
    30da:	ff 90       	pop	r15
    30dc:	df 90       	pop	r13
    30de:	cf 90       	pop	r12
    30e0:	08 95       	ret

Disassembly of section .text.ClearBitMask:

00003eac <ClearBitMask>:
    SPI_DATA_RW(out[i]);
    }
	setBit(PORTB_R,SS);
}
void ClearBitMask(uint8 reg, uint8 mask)
{
    3eac:	cf 93       	push	r28
    3eae:	df 93       	push	r29
    3eb0:	d8 2f       	mov	r29, r24
    3eb2:	c6 2f       	mov	r28, r22
	uint8 tmp = ReadReg(reg);
    3eb4:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <ReadReg>
    WriteReg(reg, tmp & (~mask));
    3eb8:	c0 95       	com	r28
    3eba:	6c 2f       	mov	r22, r28
    3ebc:	68 23       	and	r22, r24
    3ebe:	8d 2f       	mov	r24, r29
    3ec0:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
}
    3ec4:	df 91       	pop	r29
    3ec6:	cf 91       	pop	r28
    3ec8:	08 95       	ret

Disassembly of section .text.SetBitMask:

00003ee8 <SetBitMask>:

void SetBitMask(uint8 reg, uint8 mask)
{
    3ee8:	cf 93       	push	r28
    3eea:	df 93       	push	r29
    3eec:	d8 2f       	mov	r29, r24
    3eee:	c6 2f       	mov	r28, r22
      uint8 tmp = ReadReg(reg);
    3ef0:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <ReadReg>
      WriteReg(reg, tmp | mask);
    3ef4:	68 2f       	mov	r22, r24
    3ef6:	6c 2b       	or	r22, r28
    3ef8:	8d 2f       	mov	r24, r29
    3efa:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
}
    3efe:	df 91       	pop	r29
    3f00:	cf 91       	pop	r28
    3f02:	08 95       	ret

Disassembly of section .text.calculate_crc:

00002e5e <calculate_crc>:
	setBit(PORTB_R,SS);
    for (int i = 0; i < count; i++)
    {
    	values[i] = in[i + 1];
    }
  }
    2e5e:	ef 92       	push	r14
    2e60:	ff 92       	push	r15
    2e62:	0f 93       	push	r16
    2e64:	1f 93       	push	r17
    2e66:	cf 93       	push	r28
    2e68:	df 93       	push	r29
    2e6a:	7c 01       	movw	r14, r24
    2e6c:	c6 2f       	mov	r28, r22
    2e6e:	8a 01       	movw	r16, r20
    2e70:	60 e0       	ldi	r22, 0x00	; 0
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
    2e78:	64 e0       	ldi	r22, 0x04	; 4
    2e7a:	85 e0       	ldi	r24, 0x05	; 5
    2e7c:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
    2e80:	60 e8       	ldi	r22, 0x80	; 128
    2e82:	8a e0       	ldi	r24, 0x0A	; 10
    2e84:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <SetBitMask>
    2e88:	a7 01       	movw	r20, r14
    2e8a:	6c 2f       	mov	r22, r28
    2e8c:	89 e0       	ldi	r24, 0x09	; 9
    2e8e:	0e 94 31 18 	call	0x3062	; 0x3062 <WriteRegMulti>
    2e92:	63 e0       	ldi	r22, 0x03	; 3
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
    2e9a:	c8 e8       	ldi	r28, 0x88	; 136
    2e9c:	d3 e1       	ldi	r29, 0x13	; 19
    2e9e:	85 e0       	ldi	r24, 0x05	; 5
    2ea0:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <ReadReg>
    2ea4:	98 2f       	mov	r25, r24
    2ea6:	94 70       	andi	r25, 0x04	; 4
    2ea8:	82 fd       	sbrc	r24, 2
    2eaa:	03 c0       	rjmp	.+6      	; 0x2eb2 <calculate_crc+0x54>
    2eac:	21 97       	sbiw	r28, 0x01	; 1
    2eae:	b9 f7       	brne	.-18     	; 0x2e9e <calculate_crc+0x40>
    2eb0:	0f c0       	rjmp	.+30     	; 0x2ed0 <calculate_crc+0x72>
    2eb2:	60 e0       	ldi	r22, 0x00	; 0
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
    2eba:	82 e2       	ldi	r24, 0x22	; 34
    2ebc:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <ReadReg>
    2ec0:	f8 01       	movw	r30, r16
    2ec2:	80 83       	st	Z, r24
    2ec4:	81 e2       	ldi	r24, 0x21	; 33
    2ec6:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <ReadReg>
    2eca:	f8 01       	movw	r30, r16
    2ecc:	81 83       	std	Z+1, r24	; 0x01
    2ece:	91 e0       	ldi	r25, 0x01	; 1
    2ed0:	89 2f       	mov	r24, r25
    2ed2:	df 91       	pop	r29
    2ed4:	cf 91       	pop	r28
    2ed6:	1f 91       	pop	r17
    2ed8:	0f 91       	pop	r16
    2eda:	ff 90       	pop	r15
    2edc:	ef 90       	pop	r14
    2ede:	08 95       	ret

Disassembly of section .text.Communicate:

000010dc <Communicate>:
    10dc:	4f 92       	push	r4
    10de:	5f 92       	push	r5
    10e0:	6f 92       	push	r6
    10e2:	7f 92       	push	r7
    10e4:	8f 92       	push	r8
    10e6:	9f 92       	push	r9
    10e8:	af 92       	push	r10
    10ea:	bf 92       	push	r11
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <Communicate+0x22>
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	68 2e       	mov	r6, r24
    1104:	5b 01       	movw	r10, r22
    1106:	74 2e       	mov	r7, r20
    1108:	49 01       	movw	r8, r18
    110a:	e1 14       	cp	r14, r1
    110c:	f1 04       	cpc	r15, r1
    110e:	19 f0       	breq	.+6      	; 0x1116 <Communicate+0x3a>
    1110:	f7 01       	movw	r30, r14
    1112:	40 80       	ld	r4, Z
    1114:	01 c0       	rjmp	.+2      	; 0x1118 <Communicate+0x3c>
    1116:	41 2c       	mov	r4, r1
    1118:	fc e0       	ldi	r31, 0x0C	; 12
    111a:	6f 16       	cp	r6, r31
    111c:	29 f0       	breq	.+10     	; 0x1128 <Communicate+0x4c>
    111e:	8e e0       	ldi	r24, 0x0E	; 14
    1120:	68 16       	cp	r6, r24
    1122:	39 f0       	breq	.+14     	; 0x1132 <Communicate+0x56>
    1124:	51 2c       	mov	r5, r1
    1126:	08 c0       	rjmp	.+16     	; 0x1138 <Communicate+0x5c>
    1128:	0f 2e       	mov	r0, r31
    112a:	f0 e3       	ldi	r31, 0x30	; 48
    112c:	5f 2e       	mov	r5, r31
    112e:	f0 2d       	mov	r31, r0
    1130:	03 c0       	rjmp	.+6      	; 0x1138 <Communicate+0x5c>
    1132:	68 94       	set
    1134:	55 24       	eor	r5, r5
    1136:	54 f8       	bld	r5, 4
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
    1140:	6f e7       	ldi	r22, 0x7F	; 127
    1142:	84 e0       	ldi	r24, 0x04	; 4
    1144:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
    1148:	60 e8       	ldi	r22, 0x80	; 128
    114a:	8a e0       	ldi	r24, 0x0A	; 10
    114c:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <SetBitMask>
    1150:	d1 2c       	mov	r13, r1
    1152:	08 c0       	rjmp	.+16     	; 0x1164 <Communicate+0x88>
    1154:	f5 01       	movw	r30, r10
    1156:	ed 0d       	add	r30, r13
    1158:	f1 1d       	adc	r31, r1
    115a:	60 81       	ld	r22, Z
    115c:	89 e0       	ldi	r24, 0x09	; 9
    115e:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
    1162:	d3 94       	inc	r13
    1164:	d7 14       	cp	r13, r7
    1166:	b0 f3       	brcs	.-20     	; 0x1154 <Communicate+0x78>
    1168:	64 2d       	mov	r22, r4
    116a:	8d e0       	ldi	r24, 0x0D	; 13
    116c:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
    1170:	66 2d       	mov	r22, r6
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
    1178:	ec e0       	ldi	r30, 0x0C	; 12
    117a:	6e 12       	cpse	r6, r30
    117c:	14 c0       	rjmp	.+40     	; 0x11a6 <Communicate+0xca>
    117e:	60 e8       	ldi	r22, 0x80	; 128
    1180:	8d e0       	ldi	r24, 0x0D	; 13
    1182:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <SetBitMask>
    1186:	0f c0       	rjmp	.+30     	; 0x11a6 <Communicate+0xca>
    1188:	84 e0       	ldi	r24, 0x04	; 4
    118a:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <ReadReg>
    118e:	d5 2c       	mov	r13, r5
    1190:	d8 22       	and	r13, r24
    1192:	91 f4       	brne	.+36     	; 0x11b8 <Communicate+0xdc>
    1194:	98 2f       	mov	r25, r24
    1196:	91 70       	andi	r25, 0x01	; 1
    1198:	80 fd       	sbrc	r24, 0
    119a:	7c c0       	rjmp	.+248    	; 0x1294 <Communicate+0x1b8>
    119c:	f1 e0       	ldi	r31, 0x01	; 1
    119e:	af 1a       	sub	r10, r31
    11a0:	b1 08       	sbc	r11, r1
    11a2:	39 f4       	brne	.+14     	; 0x11b2 <Communicate+0xd6>
    11a4:	6b c0       	rjmp	.+214    	; 0x127c <Communicate+0x1a0>
    11a6:	0f 2e       	mov	r0, r31
    11a8:	f0 ed       	ldi	r31, 0xD0	; 208
    11aa:	af 2e       	mov	r10, r31
    11ac:	f7 e0       	ldi	r31, 0x07	; 7
    11ae:	bf 2e       	mov	r11, r31
    11b0:	f0 2d       	mov	r31, r0
    11b2:	1a 14       	cp	r1, r10
    11b4:	1b 04       	cpc	r1, r11
    11b6:	44 f3       	brlt	.-48     	; 0x1188 <Communicate+0xac>
    11b8:	86 e0       	ldi	r24, 0x06	; 6
    11ba:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <ReadReg>
    11be:	68 2e       	mov	r6, r24
    11c0:	83 71       	andi	r24, 0x13	; 19
    11c2:	d8 2e       	mov	r13, r24
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <Communicate+0xec>
    11c6:	5c c0       	rjmp	.+184    	; 0x1280 <Communicate+0x1a4>
    11c8:	81 14       	cp	r8, r1
    11ca:	91 04       	cpc	r9, r1
    11cc:	31 f1       	breq	.+76     	; 0x121a <Communicate+0x13e>
    11ce:	01 15       	cp	r16, r1
    11d0:	11 05       	cpc	r17, r1
    11d2:	19 f1       	breq	.+70     	; 0x121a <Communicate+0x13e>
    11d4:	8a e0       	ldi	r24, 0x0A	; 10
    11d6:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <ReadReg>
    11da:	58 2e       	mov	r5, r24
    11dc:	f8 01       	movw	r30, r16
    11de:	80 81       	ld	r24, Z
    11e0:	85 15       	cp	r24, r5
    11e2:	08 f4       	brcc	.+2      	; 0x11e6 <Communicate+0x10a>
    11e4:	57 c0       	rjmp	.+174    	; 0x1294 <Communicate+0x1b8>
    11e6:	55 20       	and	r5, r5
    11e8:	09 f4       	brne	.+2      	; 0x11ec <Communicate+0x110>
    11ea:	54 c0       	rjmp	.+168    	; 0x1294 <Communicate+0x1b8>
    11ec:	50 82       	st	Z, r5
    11ee:	71 2c       	mov	r7, r1
    11f0:	09 c0       	rjmp	.+18     	; 0x1204 <Communicate+0x128>
    11f2:	54 01       	movw	r10, r8
    11f4:	a7 0c       	add	r10, r7
    11f6:	b1 1c       	adc	r11, r1
    11f8:	89 e0       	ldi	r24, 0x09	; 9
    11fa:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <ReadReg>
    11fe:	f5 01       	movw	r30, r10
    1200:	80 83       	st	Z, r24
    1202:	73 94       	inc	r7
    1204:	75 14       	cp	r7, r5
    1206:	a8 f3       	brcs	.-22     	; 0x11f2 <Communicate+0x116>
    1208:	8c e0       	ldi	r24, 0x0C	; 12
    120a:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <ReadReg>
    120e:	87 70       	andi	r24, 0x07	; 7
    1210:	e1 14       	cp	r14, r1
    1212:	f1 04       	cpc	r15, r1
    1214:	11 f0       	breq	.+4      	; 0x121a <Communicate+0x13e>
    1216:	f7 01       	movw	r30, r14
    1218:	80 83       	st	Z, r24
    121a:	f6 2d       	mov	r31, r6
    121c:	f8 70       	andi	r31, 0x08	; 8
    121e:	ff 2e       	mov	r15, r31
    1220:	63 fc       	sbrc	r6, 3
    1222:	38 c0       	rjmp	.+112    	; 0x1294 <Communicate+0x1b8>
    1224:	81 14       	cp	r8, r1
    1226:	91 04       	cpc	r9, r1
    1228:	69 f1       	breq	.+90     	; 0x1284 <Communicate+0x1a8>
    122a:	01 15       	cp	r16, r1
    122c:	11 05       	cpc	r17, r1
    122e:	69 f1       	breq	.+90     	; 0x128a <Communicate+0x1ae>
    1230:	cc 20       	and	r12, r12
    1232:	71 f1       	breq	.+92     	; 0x1290 <Communicate+0x1b4>
    1234:	f8 01       	movw	r30, r16
    1236:	60 81       	ld	r22, Z
    1238:	62 50       	subi	r22, 0x02	; 2
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	ae 01       	movw	r20, r28
    123e:	4f 5f       	subi	r20, 0xFF	; 255
    1240:	5f 4f       	sbci	r21, 0xFF	; 255
    1242:	c4 01       	movw	r24, r8
    1244:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <calculate_crc>
    1248:	88 23       	and	r24, r24
    124a:	b1 f0       	breq	.+44     	; 0x1278 <Communicate+0x19c>
    124c:	f8 01       	movw	r30, r16
    124e:	80 81       	ld	r24, Z
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	f4 01       	movw	r30, r8
    1254:	e8 0f       	add	r30, r24
    1256:	f9 1f       	adc	r31, r25
    1258:	32 97       	sbiw	r30, 0x02	; 2
    125a:	30 81       	ld	r19, Z
    125c:	29 81       	ldd	r18, Y+1	; 0x01
    125e:	32 13       	cpse	r19, r18
    1260:	0b c0       	rjmp	.+22     	; 0x1278 <Communicate+0x19c>
    1262:	88 0d       	add	r24, r8
    1264:	99 1d       	adc	r25, r9
    1266:	fc 01       	movw	r30, r24
    1268:	31 97       	sbiw	r30, 0x01	; 1
    126a:	90 81       	ld	r25, Z
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	98 13       	cpse	r25, r24
    1270:	03 c0       	rjmp	.+6      	; 0x1278 <Communicate+0x19c>
    1272:	dd 24       	eor	r13, r13
    1274:	d3 94       	inc	r13
    1276:	0e c0       	rjmp	.+28     	; 0x1294 <Communicate+0x1b8>
    1278:	df 2c       	mov	r13, r15
    127a:	0c c0       	rjmp	.+24     	; 0x1294 <Communicate+0x1b8>
    127c:	d9 2e       	mov	r13, r25
    127e:	0a c0       	rjmp	.+20     	; 0x1294 <Communicate+0x1b8>
    1280:	d1 2c       	mov	r13, r1
    1282:	08 c0       	rjmp	.+16     	; 0x1294 <Communicate+0x1b8>
    1284:	dd 24       	eor	r13, r13
    1286:	d3 94       	inc	r13
    1288:	05 c0       	rjmp	.+10     	; 0x1294 <Communicate+0x1b8>
    128a:	dd 24       	eor	r13, r13
    128c:	d3 94       	inc	r13
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <Communicate+0x1b8>
    1290:	dd 24       	eor	r13, r13
    1292:	d3 94       	inc	r13
    1294:	8d 2d       	mov	r24, r13
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	ff 90       	pop	r15
    12a4:	ef 90       	pop	r14
    12a6:	df 90       	pop	r13
    12a8:	cf 90       	pop	r12
    12aa:	bf 90       	pop	r11
    12ac:	af 90       	pop	r10
    12ae:	9f 90       	pop	r9
    12b0:	8f 90       	pop	r8
    12b2:	7f 90       	pop	r7
    12b4:	6f 90       	pop	r6
    12b6:	5f 90       	pop	r5
    12b8:	4f 90       	pop	r4
    12ba:	08 95       	ret

Disassembly of section .text.begin:

000039aa <begin>:
    39aa:	60 e8       	ldi	r22, 0x80	; 128
    39ac:	8a e2       	ldi	r24, 0x2A	; 42
    39ae:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
    39b2:	6a e9       	ldi	r22, 0x9A	; 154
    39b4:	8b e2       	ldi	r24, 0x2B	; 43
    39b6:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
    39ba:	63 e0       	ldi	r22, 0x03	; 3
    39bc:	8c e2       	ldi	r24, 0x2C	; 44
    39be:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
    39c2:	68 ee       	ldi	r22, 0xE8	; 232
    39c4:	8d e2       	ldi	r24, 0x2D	; 45
    39c6:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
    39ca:	60 e4       	ldi	r22, 0x40	; 64
    39cc:	85 e1       	ldi	r24, 0x15	; 21
    39ce:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
    39d2:	6d e3       	ldi	r22, 0x3D	; 61
    39d4:	81 e1       	ldi	r24, 0x11	; 17
    39d6:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
    39da:	84 e1       	ldi	r24, 0x14	; 20
    39dc:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <ReadReg>
    39e0:	83 70       	andi	r24, 0x03	; 3
    39e2:	83 30       	cpi	r24, 0x03	; 3
    39e4:	21 f0       	breq	.+8      	; 0x39ee <begin+0x44>
    39e6:	63 e0       	ldi	r22, 0x03	; 3
    39e8:	84 e1       	ldi	r24, 0x14	; 20
    39ea:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <SetBitMask>
    39ee:	08 95       	ret

Disassembly of section .text.DetectCard:

00002ee0 <DetectCard>:
    2ee0:	cf 92       	push	r12
    2ee2:	ef 92       	push	r14
    2ee4:	ff 92       	push	r15
    2ee6:	0f 93       	push	r16
    2ee8:	1f 93       	push	r17
    2eea:	cf 93       	push	r28
    2eec:	df 93       	push	r29
    2eee:	00 d0       	rcall	.+0      	; 0x2ef0 <DetectCard+0x10>
    2ef0:	00 d0       	rcall	.+0      	; 0x2ef2 <DetectCard+0x12>
    2ef2:	0f 92       	push	r0
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
    2ef8:	82 e0       	ldi	r24, 0x02	; 2
    2efa:	8b 83       	std	Y+3, r24	; 0x03
    2efc:	87 e0       	ldi	r24, 0x07	; 7
    2efe:	8c 83       	std	Y+4, r24	; 0x04
    2f00:	60 e8       	ldi	r22, 0x80	; 128
    2f02:	8e e0       	ldi	r24, 0x0E	; 14
    2f04:	0e 94 56 1f 	call	0x3eac	; 0x3eac <ClearBitMask>
    2f08:	86 e2       	ldi	r24, 0x26	; 38
    2f0a:	8d 83       	std	Y+5, r24	; 0x05
    2f0c:	c1 2c       	mov	r12, r1
    2f0e:	ce 01       	movw	r24, r28
    2f10:	04 96       	adiw	r24, 0x04	; 4
    2f12:	7c 01       	movw	r14, r24
    2f14:	8e 01       	movw	r16, r28
    2f16:	0d 5f       	subi	r16, 0xFD	; 253
    2f18:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1a:	9e 01       	movw	r18, r28
    2f1c:	2f 5f       	subi	r18, 0xFF	; 255
    2f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f20:	41 e0       	ldi	r20, 0x01	; 1
    2f22:	be 01       	movw	r22, r28
    2f24:	6b 5f       	subi	r22, 0xFB	; 251
    2f26:	7f 4f       	sbci	r23, 0xFF	; 255
    2f28:	8c e0       	ldi	r24, 0x0C	; 12
    2f2a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <Communicate>
    2f2e:	88 23       	and	r24, r24
    2f30:	59 f0       	breq	.+22     	; 0x2f48 <DetectCard+0x68>
    2f32:	8b 81       	ldd	r24, Y+3	; 0x03
    2f34:	82 30       	cpi	r24, 0x02	; 2
    2f36:	29 f4       	brne	.+10     	; 0x2f42 <DetectCard+0x62>
    2f38:	8c 81       	ldd	r24, Y+4	; 0x04
    2f3a:	88 23       	and	r24, r24
    2f3c:	21 f0       	breq	.+8      	; 0x2f46 <DetectCard+0x66>
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	03 c0       	rjmp	.+6      	; 0x2f48 <DetectCard+0x68>
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	01 c0       	rjmp	.+2      	; 0x2f48 <DetectCard+0x68>
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	df 91       	pop	r29
    2f54:	cf 91       	pop	r28
    2f56:	1f 91       	pop	r17
    2f58:	0f 91       	pop	r16
    2f5a:	ff 90       	pop	r15
    2f5c:	ef 90       	pop	r14
    2f5e:	cf 90       	pop	r12
    2f60:	08 95       	ret

Disassembly of section .text.GetCardId:

000028fa <GetCardId>:
    28fa:	af 92       	push	r10
    28fc:	bf 92       	push	r11
    28fe:	cf 92       	push	r12
    2900:	ef 92       	push	r14
    2902:	ff 92       	push	r15
    2904:	0f 93       	push	r16
    2906:	1f 93       	push	r17
    2908:	cf 93       	push	r28
    290a:	df 93       	push	r29
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	2a 97       	sbiw	r28, 0x0a	; 10
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	f8 94       	cli
    2916:	de bf       	out	0x3e, r29	; 62
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	cd bf       	out	0x3d, r28	; 61
    291c:	5c 01       	movw	r10, r24
    291e:	89 e0       	ldi	r24, 0x09	; 9
    2920:	8a 87       	std	Y+10, r24	; 0x0a
    2922:	60 e8       	ldi	r22, 0x80	; 128
    2924:	8e e0       	ldi	r24, 0x0E	; 14
    2926:	0e 94 56 1f 	call	0x3eac	; 0x3eac <ClearBitMask>
    292a:	60 e0       	ldi	r22, 0x00	; 0
    292c:	8d e0       	ldi	r24, 0x0D	; 13
    292e:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <WriteReg>
    2932:	83 e9       	ldi	r24, 0x93	; 147
    2934:	89 83       	std	Y+1, r24	; 0x01
    2936:	80 e2       	ldi	r24, 0x20	; 32
    2938:	8a 83       	std	Y+2, r24	; 0x02
    293a:	c1 2c       	mov	r12, r1
    293c:	e1 2c       	mov	r14, r1
    293e:	f1 2c       	mov	r15, r1
    2940:	8e 01       	movw	r16, r28
    2942:	06 5f       	subi	r16, 0xF6	; 246
    2944:	1f 4f       	sbci	r17, 0xFF	; 255
    2946:	9e 01       	movw	r18, r28
    2948:	2f 5f       	subi	r18, 0xFF	; 255
    294a:	3f 4f       	sbci	r19, 0xFF	; 255
    294c:	42 e0       	ldi	r20, 0x02	; 2
    294e:	b9 01       	movw	r22, r18
    2950:	8c e0       	ldi	r24, 0x0C	; 12
    2952:	0e 94 6e 08 	call	0x10dc	; 0x10dc <Communicate>
    2956:	88 23       	and	r24, r24
    2958:	99 f0       	breq	.+38     	; 0x2980 <GetCardId+0x86>
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	0e c0       	rjmp	.+28     	; 0x297a <GetCardId+0x80>
    295e:	82 2f       	mov	r24, r18
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	f5 01       	movw	r30, r10
    2964:	e8 0f       	add	r30, r24
    2966:	f9 1f       	adc	r31, r25
    2968:	a1 e0       	ldi	r26, 0x01	; 1
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	ac 0f       	add	r26, r28
    296e:	bd 1f       	adc	r27, r29
    2970:	a8 0f       	add	r26, r24
    2972:	b9 1f       	adc	r27, r25
    2974:	8c 91       	ld	r24, X
    2976:	80 83       	st	Z, r24
    2978:	2f 5f       	subi	r18, 0xFF	; 255
    297a:	24 30       	cpi	r18, 0x04	; 4
    297c:	80 f3       	brcs	.-32     	; 0x295e <GetCardId+0x64>
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	2a 96       	adiw	r28, 0x0a	; 10
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	de bf       	out	0x3e, r29	; 62
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	cd bf       	out	0x3d, r28	; 61
    298c:	df 91       	pop	r29
    298e:	cf 91       	pop	r28
    2990:	1f 91       	pop	r17
    2992:	0f 91       	pop	r16
    2994:	ff 90       	pop	r15
    2996:	ef 90       	pop	r14
    2998:	cf 90       	pop	r12
    299a:	bf 90       	pop	r11
    299c:	af 90       	pop	r10
    299e:	08 95       	ret

Disassembly of section .text.ULTRASONIC2_INIT:

00003e2e <ULTRASONIC2_INIT>:

void ULTRASONIC2_INIT(void)

{

	DIO_vSetPinDirection(TRIG2_PORT, TRIG2_Pin, OUTPUT);
    3e2e:	42 e0       	ldi	r20, 0x02	; 2
    3e30:	60 e0       	ldi	r22, 0x00	; 0
    3e32:	83 e0       	ldi	r24, 0x03	; 3
    3e34:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_vSetPinDirection>
	DIO_vSetPinDirection(ECHO2_PORT, ECHO2_Pin, INPUT_WITHOUT_PULLUP);
    3e38:	41 e0       	ldi	r20, 0x01	; 1
    3e3a:	61 e0       	ldi	r22, 0x01	; 1
    3e3c:	83 e0       	ldi	r24, 0x03	; 3
    3e3e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_vSetPinDirection>
	TIMER0_init(&config);
    3e42:	6e e6       	ldi	r22, 0x6E	; 110
    3e44:	70 e0       	ldi	r23, 0x00	; 0
    3e46:	80 e8       	ldi	r24, 0x80	; 128
    3e48:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <TIMER0_init>
    3e4c:	08 95       	ret

Disassembly of section .text._ultrasonic2__Tim_delay_us:

00003f54 <_ultrasonic2__Tim_delay_us>:

}

void _ultrasonic2__Tim_delay_us(uint8 uSec)
{
	if(uSec < 2) uSec = 2;
    3f54:	82 30       	cpi	r24, 0x02	; 2
    3f56:	08 f4       	brcc	.+2      	; 0x3f5a <_ultrasonic2__Tim_delay_us+0x6>
    3f58:	82 e0       	ldi	r24, 0x02	; 2

	OCR0=uSec-1;
    3f5a:	81 50       	subi	r24, 0x01	; 1
    3f5c:	8c bf       	out	0x3c, r24	; 60

	while(READ_BIT(TIFR,7)==1);
    3f5e:	08 b6       	in	r0, 0x38	; 56
    3f60:	07 fc       	sbrc	r0, 7
    3f62:	fd cf       	rjmp	.-6      	; 0x3f5e <_ultrasonic2__Tim_delay_us+0xa>
	SET_BIT(TIFR,7);
    3f64:	88 b7       	in	r24, 0x38	; 56
    3f66:	80 68       	ori	r24, 0x80	; 128
    3f68:	88 bf       	out	0x38, r24	; 56
    3f6a:	08 95       	ret

Disassembly of section .text.ULTRASONIC2_GET_DISTANCE:

00002630 <ULTRASONIC2_GET_DISTANCE>:

float ULTRASONIC2_GET_DISTANCE(void )
{	

	///starting trigger Pulse
	DIO_vWritePin(TRIG2_PORT, TRIG2_Pin, HIGH);
    2630:	41 e0       	ldi	r20, 0x01	; 1
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	83 e0       	ldi	r24, 0x03	; 3
    2636:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    263a:	85 e3       	ldi	r24, 0x35	; 53
    263c:	8a 95       	dec	r24
    263e:	f1 f7       	brne	.-4      	; 0x263c <ULTRASONIC2_GET_DISTANCE+0xc>
    2640:	00 00       	nop
	_delay_us(10);
	DIO_vWritePin(TRIG2_PORT, TRIG2_Pin, LOW);
    2642:	40 e0       	ldi	r20, 0x00	; 0
    2644:	60 e0       	ldi	r22, 0x00	; 0
    2646:	83 e0       	ldi	r24, 0x03	; 3
    2648:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
	
	//Wait for ECHO pin to become high 
	while( !  DIO_u8GetPinValue(ECHO2_PORT, ECHO2_Pin) );
    264c:	61 e0       	ldi	r22, 0x01	; 1
    264e:	83 e0       	ldi	r24, 0x03	; 3
    2650:	0e 94 71 18 	call	0x30e2	; 0x30e2 <DIO_u8GetPinValue>
    2654:	88 23       	and	r24, r24
    2656:	d1 f3       	breq	.-12     	; 0x264c <ULTRASONIC2_GET_DISTANCE+0x1c>
    2658:	0c c0       	rjmp	.+24     	; 0x2672 <ULTRASONIC2_GET_DISTANCE+0x42>
	
	//Start measuring ECHO time in usec
	while(DIO_u8GetPinValue(ECHO2_PORT, ECHO2_Pin) == 1)
	{
		numTicks++;
    265a:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <numTicks>
    265e:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <numTicks+0x1>
    2662:	01 96       	adiw	r24, 0x01	; 1
    2664:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <numTicks+0x1>
    2668:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <numTicks>
		_ultrasonic2__Tim_delay_us(2);
    266c:	82 e0       	ldi	r24, 0x02	; 2
    266e:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <_ultrasonic2__Tim_delay_us>
	
	//Wait for ECHO pin to become high 
	while( !  DIO_u8GetPinValue(ECHO2_PORT, ECHO2_Pin) );
	
	//Start measuring ECHO time in usec
	while(DIO_u8GetPinValue(ECHO2_PORT, ECHO2_Pin) == 1)
    2672:	61 e0       	ldi	r22, 0x01	; 1
    2674:	83 e0       	ldi	r24, 0x03	; 3
    2676:	0e 94 71 18 	call	0x30e2	; 0x30e2 <DIO_u8GetPinValue>
    267a:	81 30       	cpi	r24, 0x01	; 1
    267c:	71 f3       	breq	.-36     	; 0x265a <ULTRASONIC2_GET_DISTANCE+0x2a>
		_ultrasonic2__Tim_delay_us(2);
		
	}
	
	//calculate distance in cm
	ultrasonic_distance =(float)(numTicks*2.8*speedOfSound*2);
    267e:	60 91 8c 00 	lds	r22, 0x008C	; 0x80008c <numTicks>
    2682:	70 91 8d 00 	lds	r23, 0x008D	; 0x80008d <numTicks+0x1>
    2686:	07 2e       	mov	r0, r23
    2688:	00 0c       	add	r0, r0
    268a:	88 0b       	sbc	r24, r24
    268c:	99 0b       	sbc	r25, r25
    268e:	0e 94 b0 18 	call	0x3160	; 0x3160 <__floatsisf>
    2692:	23 e3       	ldi	r18, 0x33	; 51
    2694:	33 e3       	ldi	r19, 0x33	; 51
    2696:	43 e3       	ldi	r20, 0x33	; 51
    2698:	50 e4       	ldi	r21, 0x40	; 64
    269a:	0e 94 7f 20 	call	0x40fe	; 0x40fe <__mulsf3>
    269e:	28 e2       	ldi	r18, 0x28	; 40
    26a0:	3e e7       	ldi	r19, 0x7E	; 126
    26a2:	4c e8       	ldi	r20, 0x8C	; 140
    26a4:	5c e3       	ldi	r21, 0x3C	; 60
    26a6:	0e 94 7f 20 	call	0x40fe	; 0x40fe <__mulsf3>
    26aa:	9b 01       	movw	r18, r22
    26ac:	ac 01       	movw	r20, r24
    26ae:	0e 94 3a 20 	call	0x4074	; 0x4074 <__addsf3>
    26b2:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <ultrasonic_distance>
    26b6:	70 93 82 00 	sts	0x0082, r23	; 0x800082 <ultrasonic_distance+0x1>
    26ba:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <ultrasonic_distance+0x2>
    26be:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <ultrasonic_distance+0x3>
	numTicks=0;
    26c2:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <numTicks+0x1>
    26c6:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <numTicks>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    26ca:	8f e3       	ldi	r24, 0x3F	; 63
    26cc:	9c e9       	ldi	r25, 0x9C	; 156
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <ULTRASONIC2_GET_DISTANCE+0x9e>
    26d2:	00 c0       	rjmp	.+0      	; 0x26d4 <ULTRASONIC2_GET_DISTANCE+0xa4>
    26d4:	00 00       	nop
	_delay_ms(10);
	return ultrasonic_distance;
    26d6:	60 91 81 00 	lds	r22, 0x0081	; 0x800081 <ultrasonic_distance>
    26da:	70 91 82 00 	lds	r23, 0x0082	; 0x800082 <ultrasonic_distance+0x1>
    26de:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <ultrasonic_distance+0x2>
    26e2:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <ultrasonic_distance+0x3>

}
    26e6:	08 95       	ret

Disassembly of section .text.ULTRASONIC_INIT:

00003e4e <ULTRASONIC_INIT>:

void ULTRASONIC_INIT(void)

{

	DIO_vSetPinDirection(TRIG_PORT, TRIG_Pin, OUTPUT);
    3e4e:	42 e0       	ldi	r20, 0x02	; 2
    3e50:	60 e0       	ldi	r22, 0x00	; 0
    3e52:	80 e0       	ldi	r24, 0x00	; 0
    3e54:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_vSetPinDirection>
	DIO_vSetPinDirection(ECHO_PORT, ECHO_Pin, INPUT_WITHOUT_PULLUP);
    3e58:	41 e0       	ldi	r20, 0x01	; 1
    3e5a:	61 e0       	ldi	r22, 0x01	; 1
    3e5c:	80 e0       	ldi	r24, 0x00	; 0
    3e5e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_vSetPinDirection>
	TIMER0_init(&config);
    3e62:	63 e7       	ldi	r22, 0x73	; 115
    3e64:	70 e0       	ldi	r23, 0x00	; 0
    3e66:	80 e8       	ldi	r24, 0x80	; 128
    3e68:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <TIMER0_init>
    3e6c:	08 95       	ret

Disassembly of section .text._ultrasonic__Tim_delay_us:

00003f6c <_ultrasonic__Tim_delay_us>:

}

void _ultrasonic__Tim_delay_us(uint8 uSec)
{
	if(uSec < 2) uSec = 2;
    3f6c:	82 30       	cpi	r24, 0x02	; 2
    3f6e:	08 f4       	brcc	.+2      	; 0x3f72 <_ultrasonic__Tim_delay_us+0x6>
    3f70:	82 e0       	ldi	r24, 0x02	; 2

	OCR0=uSec-1;
    3f72:	81 50       	subi	r24, 0x01	; 1
    3f74:	8c bf       	out	0x3c, r24	; 60

	while(READ_BIT(TIFR,7)==1);
    3f76:	08 b6       	in	r0, 0x38	; 56
    3f78:	07 fc       	sbrc	r0, 7
    3f7a:	fd cf       	rjmp	.-6      	; 0x3f76 <_ultrasonic__Tim_delay_us+0xa>
	SET_BIT(TIFR,7);
    3f7c:	88 b7       	in	r24, 0x38	; 56
    3f7e:	80 68       	ori	r24, 0x80	; 128
    3f80:	88 bf       	out	0x38, r24	; 56
    3f82:	08 95       	ret

Disassembly of section .text.ULTRASONIC_GET_DISTANCE:

000026e8 <ULTRASONIC_GET_DISTANCE>:

float ULTRASONIC_GET_DISTANCE(void )
{	

	///starting trigger Pulse
	DIO_vWritePin(TRIG_PORT, PIN0, HIGH);
    26e8:	41 e0       	ldi	r20, 0x01	; 1
    26ea:	60 e0       	ldi	r22, 0x00	; 0
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    26f2:	85 e3       	ldi	r24, 0x35	; 53
    26f4:	8a 95       	dec	r24
    26f6:	f1 f7       	brne	.-4      	; 0x26f4 <ULTRASONIC_GET_DISTANCE+0xc>
    26f8:	00 00       	nop
	_delay_us(10);
	DIO_vWritePin(TRIG_PORT, PIN0, LOW);
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	60 e0       	ldi	r22, 0x00	; 0
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_vWritePin>
	
	//Wait for ECHO pin to become high 
	while( !  DIO_u8GetPinValue(ECHO_PORT, ECHO_Pin) );
    2704:	61 e0       	ldi	r22, 0x01	; 1
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	0e 94 71 18 	call	0x30e2	; 0x30e2 <DIO_u8GetPinValue>
    270c:	88 23       	and	r24, r24
    270e:	d1 f3       	breq	.-12     	; 0x2704 <ULTRASONIC_GET_DISTANCE+0x1c>
    2710:	0c c0       	rjmp	.+24     	; 0x272a <ULTRASONIC_GET_DISTANCE+0x42>
	
	//Start measuring ECHO time in usec
	while(DIO_u8GetPinValue(ECHO_PORT, ECHO_Pin) == 1)
	{
		numTicks++;
    2712:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <numTicks>
    2716:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <numTicks+0x1>
    271a:	01 96       	adiw	r24, 0x01	; 1
    271c:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <numTicks+0x1>
    2720:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <numTicks>
		_ultrasonic__Tim_delay_us(2);
    2724:	82 e0       	ldi	r24, 0x02	; 2
    2726:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <_ultrasonic__Tim_delay_us>
	
	//Wait for ECHO pin to become high 
	while( !  DIO_u8GetPinValue(ECHO_PORT, ECHO_Pin) );
	
	//Start measuring ECHO time in usec
	while(DIO_u8GetPinValue(ECHO_PORT, ECHO_Pin) == 1)
    272a:	61 e0       	ldi	r22, 0x01	; 1
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	0e 94 71 18 	call	0x30e2	; 0x30e2 <DIO_u8GetPinValue>
    2732:	81 30       	cpi	r24, 0x01	; 1
    2734:	71 f3       	breq	.-36     	; 0x2712 <ULTRASONIC_GET_DISTANCE+0x2a>
		_ultrasonic__Tim_delay_us(2);
		
	}
	
	//calculate distance in cm
	ultrasonic_distance =(float)(numTicks*2.8*speedOfSound*2);
    2736:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <numTicks>
    273a:	70 91 8f 00 	lds	r23, 0x008F	; 0x80008f <numTicks+0x1>
    273e:	07 2e       	mov	r0, r23
    2740:	00 0c       	add	r0, r0
    2742:	88 0b       	sbc	r24, r24
    2744:	99 0b       	sbc	r25, r25
    2746:	0e 94 b0 18 	call	0x3160	; 0x3160 <__floatsisf>
    274a:	23 e3       	ldi	r18, 0x33	; 51
    274c:	33 e3       	ldi	r19, 0x33	; 51
    274e:	43 e3       	ldi	r20, 0x33	; 51
    2750:	50 e4       	ldi	r21, 0x40	; 64
    2752:	0e 94 7f 20 	call	0x40fe	; 0x40fe <__mulsf3>
    2756:	28 e2       	ldi	r18, 0x28	; 40
    2758:	3e e7       	ldi	r19, 0x7E	; 126
    275a:	4c e8       	ldi	r20, 0x8C	; 140
    275c:	5c e3       	ldi	r21, 0x3C	; 60
    275e:	0e 94 7f 20 	call	0x40fe	; 0x40fe <__mulsf3>
    2762:	9b 01       	movw	r18, r22
    2764:	ac 01       	movw	r20, r24
    2766:	0e 94 3a 20 	call	0x4074	; 0x4074 <__addsf3>
    276a:	60 93 85 00 	sts	0x0085, r22	; 0x800085 <ultrasonic_distance>
    276e:	70 93 86 00 	sts	0x0086, r23	; 0x800086 <ultrasonic_distance+0x1>
    2772:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <ultrasonic_distance+0x2>
    2776:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <ultrasonic_distance+0x3>
	numTicks=0;
    277a:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <numTicks+0x1>
    277e:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <numTicks>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2782:	8f e3       	ldi	r24, 0x3F	; 63
    2784:	9c e9       	ldi	r25, 0x9C	; 156
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	f1 f7       	brne	.-4      	; 0x2786 <ULTRASONIC_GET_DISTANCE+0x9e>
    278a:	00 c0       	rjmp	.+0      	; 0x278c <ULTRASONIC_GET_DISTANCE+0xa4>
    278c:	00 00       	nop
	_delay_ms(10);
	return ultrasonic_distance;
    278e:	60 91 85 00 	lds	r22, 0x0085	; 0x800085 <ultrasonic_distance>
    2792:	70 91 86 00 	lds	r23, 0x0086	; 0x800086 <ultrasonic_distance+0x1>
    2796:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <ultrasonic_distance+0x2>
    279a:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <ultrasonic_distance+0x3>

}
    279e:	08 95       	ret

Disassembly of section .text.main:

00003d0c <main>:



int main(void)
{	
	external_interrupt_register_callback(BUTTON_1_INT,INT_1);
    3d0c:	62 e0       	ldi	r22, 0x02	; 2
    3d0e:	83 e8       	ldi	r24, 0x83	; 131
    3d10:	90 e2       	ldi	r25, 0x20	; 32
    3d12:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <external_interrupt_register_callback>

	SREG |=(1<<7);//enable global interrupt of avr
    3d16:	8f b7       	in	r24, 0x3f	; 63
    3d18:	80 68       	ori	r24, 0x80	; 128
    3d1a:	8f bf       	out	0x3f, r24	; 63
	EXT_INT_Init();
    3d1c:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <EXT_INT_Init>
	EXT_INT_SET_CONFIG();
    3d20:	0e 94 9d 19 	call	0x333a	; 0x333a <EXT_INT_SET_CONFIG>
	APP_INIT();
    3d24:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <APP_INIT>
	while(1)
	{
		
		RFID_READ_CARD();
    3d28:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <RFID_READ_CARD>
		ULTRASONIC_TURN_LEDS_ON();
    3d2c:	0e 94 bc 12 	call	0x2578	; 0x2578 <ULTRASONIC_TURN_LEDS_ON>
    3d30:	fb cf       	rjmp	.-10     	; 0x3d28 <main+0x1c>

Disassembly of section .text.ADC_INIT:

0000341c <ADC_INIT>:

#include "ADC_interface.h"
ADC_CONFIG ADC_Config = {DIV_2,AVCC,LEFT};
void ADC_INIT(uint8 channel){
	//set channel to be input
	CLEAR_BIT(DDRA,channel);
    341c:	9a b3       	in	r25, 0x1a	; 26
    341e:	21 e0       	ldi	r18, 0x01	; 1
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	02 c0       	rjmp	.+4      	; 0x3428 <ADC_INIT+0xc>
    3424:	22 0f       	add	r18, r18
    3426:	33 1f       	adc	r19, r19
    3428:	8a 95       	dec	r24
    342a:	e2 f7       	brpl	.-8      	; 0x3424 <ADC_INIT+0x8>
    342c:	20 95       	com	r18
    342e:	29 23       	and	r18, r25
    3430:	2a bb       	out	0x1a, r18	; 26
	
	//setting the vref
	if(ADC_Config.VREF == AVCC){
    3432:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <ADC_Config+0x1>
    3436:	81 11       	cpse	r24, r1
    3438:	07 c0       	rjmp	.+14     	; 0x3448 <ADC_INIT+0x2c>
		SET_BIT(ADMUX,REFS0);
    343a:	87 b1       	in	r24, 0x07	; 7
    343c:	80 64       	ori	r24, 0x40	; 64
    343e:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,REFS1);
    3440:	87 b1       	in	r24, 0x07	; 7
    3442:	8f 77       	andi	r24, 0x7F	; 127
    3444:	87 b9       	out	0x07, r24	; 7
    3446:	08 c0       	rjmp	.+16     	; 0x3458 <ADC_INIT+0x3c>
	}
	else if(ADC_Config.VREF == AREF){
    3448:	81 30       	cpi	r24, 0x01	; 1
    344a:	31 f4       	brne	.+12     	; 0x3458 <ADC_INIT+0x3c>
		CLEAR_BIT(ADMUX,REFS0);
    344c:	87 b1       	in	r24, 0x07	; 7
    344e:	8f 7b       	andi	r24, 0xBF	; 191
    3450:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,REFS1);
    3452:	87 b1       	in	r24, 0x07	; 7
    3454:	8f 77       	andi	r24, 0x7F	; 127
    3456:	87 b9       	out	0x07, r24	; 7
	}
	
	//setting the prescaler
	ADCSRA |= ADC_Config.prescaler;
    3458:	96 b1       	in	r25, 0x06	; 6
    345a:	e9 e8       	ldi	r30, 0x89	; 137
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	80 81       	ld	r24, Z
    3460:	89 2b       	or	r24, r25
    3462:	86 b9       	out	0x06, r24	; 6
	
	//enabling the ADC
	SET_BIT(ADCSRA,ADEN);
    3464:	86 b1       	in	r24, 0x06	; 6
    3466:	80 68       	ori	r24, 0x80	; 128
    3468:	86 b9       	out	0x06, r24	; 6
	
	//adjusting the direction of ADC DATA register
	if(ADC_Config.ADJUST_LEFT_RIGHT == LEFT){
    346a:	82 81       	ldd	r24, Z+2	; 0x02
    346c:	81 30       	cpi	r24, 0x01	; 1
    346e:	21 f4       	brne	.+8      	; 0x3478 <ADC_INIT+0x5c>
		SET_BIT(ADMUX,ADLAR);
    3470:	87 b1       	in	r24, 0x07	; 7
    3472:	80 62       	ori	r24, 0x20	; 32
    3474:	87 b9       	out	0x07, r24	; 7
    3476:	08 95       	ret
	}
	else if(ADC_Config.ADJUST_LEFT_RIGHT == RIGHT){
    3478:	81 11       	cpse	r24, r1
    347a:	03 c0       	rjmp	.+6      	; 0x3482 <ADC_INIT+0x66>
		CLEAR_BIT(ADMUX,ADLAR);
    347c:	87 b1       	in	r24, 0x07	; 7
    347e:	8f 7d       	andi	r24, 0xDF	; 223
    3480:	87 b9       	out	0x07, r24	; 7
    3482:	08 95       	ret

Disassembly of section .text.ADC_READ:

000038d4 <ADC_READ>:
	}
}
uint16 ADC_READ(uint8 channel){
	//initializing first five bits by 0
	ADMUX &= 0xE0;
    38d4:	97 b1       	in	r25, 0x07	; 7
    38d6:	90 7e       	andi	r25, 0xE0	; 224
    38d8:	97 b9       	out	0x07, r25	; 7
	
	//choosing the channel
	ADMUX |=channel;
    38da:	97 b1       	in	r25, 0x07	; 7
    38dc:	89 2b       	or	r24, r25
    38de:	87 b9       	out	0x07, r24	; 7
	 
	//starting conversion
	SET_BIT(ADCSRA,ADSC);
    38e0:	86 b1       	in	r24, 0x06	; 6
    38e2:	80 64       	ori	r24, 0x40	; 64
    38e4:	86 b9       	out	0x06, r24	; 6
	
	while(READ_BIT(ADCSRA,ADIF) == 0);
    38e6:	34 9b       	sbis	0x06, 4	; 6
    38e8:	fe cf       	rjmp	.-4      	; 0x38e6 <ADC_READ+0x12>
	
	//read the converted input
	if(ADC_Config.ADJUST_LEFT_RIGHT == LEFT){
    38ea:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <ADC_Config+0x2>
    38ee:	81 30       	cpi	r24, 0x01	; 1
    38f0:	61 f4       	brne	.+24     	; 0x390a <ADC_READ+0x36>
		return ADC_DATA_REGISTER>>6;
    38f2:	24 b1       	in	r18, 0x04	; 4
    38f4:	35 b1       	in	r19, 0x05	; 5
    38f6:	00 24       	eor	r0, r0
    38f8:	22 0f       	add	r18, r18
    38fa:	33 1f       	adc	r19, r19
    38fc:	00 1c       	adc	r0, r0
    38fe:	22 0f       	add	r18, r18
    3900:	33 1f       	adc	r19, r19
    3902:	00 1c       	adc	r0, r0
    3904:	23 2f       	mov	r18, r19
    3906:	30 2d       	mov	r19, r0
    3908:	06 c0       	rjmp	.+12     	; 0x3916 <ADC_READ+0x42>
	}
	else if(ADC_Config.ADJUST_LEFT_RIGHT == RIGHT){
    390a:	81 11       	cpse	r24, r1
    390c:	03 c0       	rjmp	.+6      	; 0x3914 <ADC_READ+0x40>
		return ADC_DATA_REGISTER;
    390e:	24 b1       	in	r18, 0x04	; 4
    3910:	35 b1       	in	r19, 0x05	; 5
    3912:	01 c0       	rjmp	.+2      	; 0x3916 <ADC_READ+0x42>
	}
    3914:	08 95       	ret
    3916:	82 2f       	mov	r24, r18
    3918:	93 2f       	mov	r25, r19
    391a:	08 95       	ret

Disassembly of section .text.DIO_vSetPinDirection:

000012bc <DIO_vSetPinDirection>:
		case PORT_D: //PORTD
		if(Copy_u8value == HIGH){
			PORTD_BASE->Port = 0xFF;
		}
		else{
			PORTD_BASE->Port = 0x00;
    12bc:	68 30       	cpi	r22, 0x08	; 8
    12be:	08 f0       	brcs	.+2      	; 0x12c2 <DIO_vSetPinDirection+0x6>
    12c0:	c0 c0       	rjmp	.+384    	; 0x1442 <DIO_vSetPinDirection+0x186>
    12c2:	84 30       	cpi	r24, 0x04	; 4
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <DIO_vSetPinDirection+0xc>
    12c6:	bd c0       	rjmp	.+378    	; 0x1442 <DIO_vSetPinDirection+0x186>
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	a9 f1       	breq	.+106    	; 0x1336 <DIO_vSetPinDirection+0x7a>
    12cc:	38 f0       	brcs	.+14     	; 0x12dc <DIO_vSetPinDirection+0x20>
    12ce:	82 30       	cpi	r24, 0x02	; 2
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <DIO_vSetPinDirection+0x18>
    12d2:	5e c0       	rjmp	.+188    	; 0x1390 <DIO_vSetPinDirection+0xd4>
    12d4:	83 30       	cpi	r24, 0x03	; 3
    12d6:	09 f4       	brne	.+2      	; 0x12da <DIO_vSetPinDirection+0x1e>
    12d8:	88 c0       	rjmp	.+272    	; 0x13ea <DIO_vSetPinDirection+0x12e>
    12da:	08 95       	ret
    12dc:	42 30       	cpi	r20, 0x02	; 2
    12de:	59 f4       	brne	.+22     	; 0x12f6 <DIO_vSetPinDirection+0x3a>
    12e0:	2a b3       	in	r18, 0x1a	; 26
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_vSetPinDirection+0x30>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	6a 95       	dec	r22
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_vSetPinDirection+0x2c>
    12f0:	82 2b       	or	r24, r18
    12f2:	8a bb       	out	0x1a, r24	; 26
    12f4:	08 95       	ret
    12f6:	41 30       	cpi	r20, 0x01	; 1
    12f8:	61 f4       	brne	.+24     	; 0x1312 <DIO_vSetPinDirection+0x56>
    12fa:	2a b3       	in	r18, 0x1a	; 26
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_vSetPinDirection+0x4a>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	6a 95       	dec	r22
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_vSetPinDirection+0x46>
    130a:	80 95       	com	r24
    130c:	82 23       	and	r24, r18
    130e:	8a bb       	out	0x1a, r24	; 26
    1310:	08 95       	ret
    1312:	41 11       	cpse	r20, r1
    1314:	96 c0       	rjmp	.+300    	; 0x1442 <DIO_vSetPinDirection+0x186>
    1316:	2a b3       	in	r18, 0x1a	; 26
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_vSetPinDirection+0x66>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	6a 95       	dec	r22
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_vSetPinDirection+0x62>
    1326:	98 2f       	mov	r25, r24
    1328:	90 95       	com	r25
    132a:	92 23       	and	r25, r18
    132c:	9a bb       	out	0x1a, r25	; 26
    132e:	9b b3       	in	r25, 0x1b	; 27
    1330:	89 2b       	or	r24, r25
    1332:	8b bb       	out	0x1b, r24	; 27
    1334:	08 95       	ret
    1336:	42 30       	cpi	r20, 0x02	; 2
    1338:	59 f4       	brne	.+22     	; 0x1350 <DIO_vSetPinDirection+0x94>
    133a:	27 b3       	in	r18, 0x17	; 23
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_vSetPinDirection+0x8a>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	6a 95       	dec	r22
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_vSetPinDirection+0x86>
    134a:	82 2b       	or	r24, r18
    134c:	87 bb       	out	0x17, r24	; 23
    134e:	08 95       	ret
    1350:	41 30       	cpi	r20, 0x01	; 1
    1352:	61 f4       	brne	.+24     	; 0x136c <DIO_vSetPinDirection+0xb0>
    1354:	27 b3       	in	r18, 0x17	; 23
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_vSetPinDirection+0xa4>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	6a 95       	dec	r22
    1362:	e2 f7       	brpl	.-8      	; 0x135c <DIO_vSetPinDirection+0xa0>
    1364:	80 95       	com	r24
    1366:	82 23       	and	r24, r18
    1368:	87 bb       	out	0x17, r24	; 23
    136a:	08 95       	ret
    136c:	41 11       	cpse	r20, r1
    136e:	69 c0       	rjmp	.+210    	; 0x1442 <DIO_vSetPinDirection+0x186>
    1370:	27 b3       	in	r18, 0x17	; 23
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_vSetPinDirection+0xc0>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	6a 95       	dec	r22
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_vSetPinDirection+0xbc>
    1380:	98 2f       	mov	r25, r24
    1382:	90 95       	com	r25
    1384:	92 23       	and	r25, r18
    1386:	97 bb       	out	0x17, r25	; 23
    1388:	98 b3       	in	r25, 0x18	; 24
    138a:	89 2b       	or	r24, r25
    138c:	88 bb       	out	0x18, r24	; 24
    138e:	08 95       	ret
    1390:	42 30       	cpi	r20, 0x02	; 2
    1392:	59 f4       	brne	.+22     	; 0x13aa <DIO_vSetPinDirection+0xee>
    1394:	24 b3       	in	r18, 0x14	; 20
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_vSetPinDirection+0xe4>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	6a 95       	dec	r22
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_vSetPinDirection+0xe0>
    13a4:	82 2b       	or	r24, r18
    13a6:	84 bb       	out	0x14, r24	; 20
    13a8:	08 95       	ret
    13aa:	41 30       	cpi	r20, 0x01	; 1
    13ac:	61 f4       	brne	.+24     	; 0x13c6 <DIO_vSetPinDirection+0x10a>
    13ae:	24 b3       	in	r18, 0x14	; 20
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <DIO_vSetPinDirection+0xfe>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	6a 95       	dec	r22
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <DIO_vSetPinDirection+0xfa>
    13be:	80 95       	com	r24
    13c0:	82 23       	and	r24, r18
    13c2:	84 bb       	out	0x14, r24	; 20
    13c4:	08 95       	ret
    13c6:	41 11       	cpse	r20, r1
    13c8:	3c c0       	rjmp	.+120    	; 0x1442 <DIO_vSetPinDirection+0x186>
    13ca:	24 b3       	in	r18, 0x14	; 20
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_vSetPinDirection+0x11a>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	6a 95       	dec	r22
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_vSetPinDirection+0x116>
    13da:	98 2f       	mov	r25, r24
    13dc:	90 95       	com	r25
    13de:	92 23       	and	r25, r18
    13e0:	94 bb       	out	0x14, r25	; 20
    13e2:	95 b3       	in	r25, 0x15	; 21
    13e4:	89 2b       	or	r24, r25
    13e6:	85 bb       	out	0x15, r24	; 21
    13e8:	08 95       	ret
    13ea:	42 30       	cpi	r20, 0x02	; 2
    13ec:	59 f4       	brne	.+22     	; 0x1404 <DIO_vSetPinDirection+0x148>
    13ee:	21 b3       	in	r18, 0x11	; 17
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <DIO_vSetPinDirection+0x13e>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	6a 95       	dec	r22
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <DIO_vSetPinDirection+0x13a>
    13fe:	82 2b       	or	r24, r18
    1400:	81 bb       	out	0x11, r24	; 17
    1402:	08 95       	ret
    1404:	41 30       	cpi	r20, 0x01	; 1
    1406:	61 f4       	brne	.+24     	; 0x1420 <DIO_vSetPinDirection+0x164>
    1408:	21 b3       	in	r18, 0x11	; 17
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <DIO_vSetPinDirection+0x158>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	6a 95       	dec	r22
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <DIO_vSetPinDirection+0x154>
    1418:	80 95       	com	r24
    141a:	82 23       	and	r24, r18
    141c:	81 bb       	out	0x11, r24	; 17
    141e:	08 95       	ret
    1420:	41 11       	cpse	r20, r1
    1422:	0f c0       	rjmp	.+30     	; 0x1442 <DIO_vSetPinDirection+0x186>
    1424:	21 b3       	in	r18, 0x11	; 17
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <DIO_vSetPinDirection+0x174>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	6a 95       	dec	r22
    1432:	e2 f7       	brpl	.-8      	; 0x142c <DIO_vSetPinDirection+0x170>
    1434:	98 2f       	mov	r25, r24
    1436:	90 95       	com	r25
    1438:	92 23       	and	r25, r18
    143a:	91 bb       	out	0x11, r25	; 17
    143c:	92 b3       	in	r25, 0x12	; 18
    143e:	89 2b       	or	r24, r25
    1440:	82 bb       	out	0x12, r24	; 18
    1442:	08 95       	ret

Disassembly of section .text.DIO_vWritePin:

00001c4e <DIO_vWritePin>:
    1c4e:	68 30       	cpi	r22, 0x08	; 8
    1c50:	08 f0       	brcs	.+2      	; 0x1c54 <DIO_vWritePin+0x6>
    1c52:	6f c0       	rjmp	.+222    	; 0x1d32 <DIO_vWritePin+0xe4>
    1c54:	84 30       	cpi	r24, 0x04	; 4
    1c56:	08 f0       	brcs	.+2      	; 0x1c5a <DIO_vWritePin+0xc>
    1c58:	6c c0       	rjmp	.+216    	; 0x1d32 <DIO_vWritePin+0xe4>
    1c5a:	81 30       	cpi	r24, 0x01	; 1
    1c5c:	01 f1       	breq	.+64     	; 0x1c9e <DIO_vWritePin+0x50>
    1c5e:	30 f0       	brcs	.+12     	; 0x1c6c <DIO_vWritePin+0x1e>
    1c60:	82 30       	cpi	r24, 0x02	; 2
    1c62:	b1 f1       	breq	.+108    	; 0x1cd0 <DIO_vWritePin+0x82>
    1c64:	83 30       	cpi	r24, 0x03	; 3
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <DIO_vWritePin+0x1c>
    1c68:	4c c0       	rjmp	.+152    	; 0x1d02 <DIO_vWritePin+0xb4>
    1c6a:	08 95       	ret
    1c6c:	41 30       	cpi	r20, 0x01	; 1
    1c6e:	59 f4       	brne	.+22     	; 0x1c86 <DIO_vWritePin+0x38>
    1c70:	2b b3       	in	r18, 0x1b	; 27
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <DIO_vWritePin+0x2e>
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	6a 95       	dec	r22
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <DIO_vWritePin+0x2a>
    1c80:	82 2b       	or	r24, r18
    1c82:	8b bb       	out	0x1b, r24	; 27
    1c84:	08 95       	ret
    1c86:	2b b3       	in	r18, 0x1b	; 27
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <DIO_vWritePin+0x44>
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	6a 95       	dec	r22
    1c94:	e2 f7       	brpl	.-8      	; 0x1c8e <DIO_vWritePin+0x40>
    1c96:	80 95       	com	r24
    1c98:	82 23       	and	r24, r18
    1c9a:	8b bb       	out	0x1b, r24	; 27
    1c9c:	08 95       	ret
    1c9e:	41 30       	cpi	r20, 0x01	; 1
    1ca0:	59 f4       	brne	.+22     	; 0x1cb8 <DIO_vWritePin+0x6a>
    1ca2:	28 b3       	in	r18, 0x18	; 24
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <DIO_vWritePin+0x60>
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	6a 95       	dec	r22
    1cb0:	e2 f7       	brpl	.-8      	; 0x1caa <DIO_vWritePin+0x5c>
    1cb2:	82 2b       	or	r24, r18
    1cb4:	88 bb       	out	0x18, r24	; 24
    1cb6:	08 95       	ret
    1cb8:	28 b3       	in	r18, 0x18	; 24
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <DIO_vWritePin+0x76>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	6a 95       	dec	r22
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <DIO_vWritePin+0x72>
    1cc8:	80 95       	com	r24
    1cca:	82 23       	and	r24, r18
    1ccc:	88 bb       	out	0x18, r24	; 24
    1cce:	08 95       	ret
    1cd0:	41 30       	cpi	r20, 0x01	; 1
    1cd2:	59 f4       	brne	.+22     	; 0x1cea <DIO_vWritePin+0x9c>
    1cd4:	25 b3       	in	r18, 0x15	; 21
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <DIO_vWritePin+0x92>
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	6a 95       	dec	r22
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <DIO_vWritePin+0x8e>
    1ce4:	82 2b       	or	r24, r18
    1ce6:	85 bb       	out	0x15, r24	; 21
    1ce8:	08 95       	ret
    1cea:	25 b3       	in	r18, 0x15	; 21
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <DIO_vWritePin+0xa8>
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	6a 95       	dec	r22
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <DIO_vWritePin+0xa4>
    1cfa:	80 95       	com	r24
    1cfc:	82 23       	and	r24, r18
    1cfe:	85 bb       	out	0x15, r24	; 21
    1d00:	08 95       	ret
    1d02:	41 30       	cpi	r20, 0x01	; 1
    1d04:	59 f4       	brne	.+22     	; 0x1d1c <DIO_vWritePin+0xce>
    1d06:	22 b3       	in	r18, 0x12	; 18
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <DIO_vWritePin+0xc4>
    1d0e:	88 0f       	add	r24, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	6a 95       	dec	r22
    1d14:	e2 f7       	brpl	.-8      	; 0x1d0e <DIO_vWritePin+0xc0>
    1d16:	82 2b       	or	r24, r18
    1d18:	82 bb       	out	0x12, r24	; 18
    1d1a:	08 95       	ret
    1d1c:	22 b3       	in	r18, 0x12	; 18
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <DIO_vWritePin+0xda>
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	6a 95       	dec	r22
    1d2a:	e2 f7       	brpl	.-8      	; 0x1d24 <DIO_vWritePin+0xd6>
    1d2c:	80 95       	com	r24
    1d2e:	82 23       	and	r24, r18
    1d30:	82 bb       	out	0x12, r24	; 18
    1d32:	08 95       	ret

Disassembly of section .text.DIO_vSetPortDirection:

00002dd6 <DIO_vSetPortDirection>:
    2dd6:	81 30       	cpi	r24, 0x01	; 1
    2dd8:	a9 f0       	breq	.+42     	; 0x2e04 <DIO_vSetPortDirection+0x2e>
    2dda:	28 f0       	brcs	.+10     	; 0x2de6 <DIO_vSetPortDirection+0x10>
    2ddc:	82 30       	cpi	r24, 0x02	; 2
    2dde:	09 f1       	breq	.+66     	; 0x2e22 <DIO_vSetPortDirection+0x4c>
    2de0:	83 30       	cpi	r24, 0x03	; 3
    2de2:	71 f1       	breq	.+92     	; 0x2e40 <DIO_vSetPortDirection+0x6a>
    2de4:	08 95       	ret
    2de6:	62 30       	cpi	r22, 0x02	; 2
    2de8:	19 f4       	brne	.+6      	; 0x2df0 <DIO_vSetPortDirection+0x1a>
    2dea:	8f ef       	ldi	r24, 0xFF	; 255
    2dec:	8a bb       	out	0x1a, r24	; 26
    2dee:	08 95       	ret
    2df0:	61 11       	cpse	r22, r1
    2df2:	04 c0       	rjmp	.+8      	; 0x2dfc <DIO_vSetPortDirection+0x26>
    2df4:	1a ba       	out	0x1a, r1	; 26
    2df6:	8f ef       	ldi	r24, 0xFF	; 255
    2df8:	8b bb       	out	0x1b, r24	; 27
    2dfa:	08 95       	ret
    2dfc:	61 30       	cpi	r22, 0x01	; 1
    2dfe:	71 f5       	brne	.+92     	; 0x2e5c <DIO_vSetPortDirection+0x86>
    2e00:	1a ba       	out	0x1a, r1	; 26
    2e02:	08 95       	ret
    2e04:	62 30       	cpi	r22, 0x02	; 2
    2e06:	19 f4       	brne	.+6      	; 0x2e0e <DIO_vSetPortDirection+0x38>
    2e08:	8f ef       	ldi	r24, 0xFF	; 255
    2e0a:	87 bb       	out	0x17, r24	; 23
    2e0c:	08 95       	ret
    2e0e:	61 11       	cpse	r22, r1
    2e10:	04 c0       	rjmp	.+8      	; 0x2e1a <DIO_vSetPortDirection+0x44>
    2e12:	17 ba       	out	0x17, r1	; 23
    2e14:	8f ef       	ldi	r24, 0xFF	; 255
    2e16:	88 bb       	out	0x18, r24	; 24
    2e18:	08 95       	ret
    2e1a:	61 30       	cpi	r22, 0x01	; 1
    2e1c:	f9 f4       	brne	.+62     	; 0x2e5c <DIO_vSetPortDirection+0x86>
    2e1e:	17 ba       	out	0x17, r1	; 23
    2e20:	08 95       	ret
    2e22:	62 30       	cpi	r22, 0x02	; 2
    2e24:	19 f4       	brne	.+6      	; 0x2e2c <DIO_vSetPortDirection+0x56>
    2e26:	8f ef       	ldi	r24, 0xFF	; 255
    2e28:	84 bb       	out	0x14, r24	; 20
    2e2a:	08 95       	ret
    2e2c:	61 11       	cpse	r22, r1
    2e2e:	04 c0       	rjmp	.+8      	; 0x2e38 <DIO_vSetPortDirection+0x62>
    2e30:	14 ba       	out	0x14, r1	; 20
    2e32:	8f ef       	ldi	r24, 0xFF	; 255
    2e34:	85 bb       	out	0x15, r24	; 21
    2e36:	08 95       	ret
    2e38:	61 30       	cpi	r22, 0x01	; 1
    2e3a:	81 f4       	brne	.+32     	; 0x2e5c <DIO_vSetPortDirection+0x86>
    2e3c:	14 ba       	out	0x14, r1	; 20
    2e3e:	08 95       	ret
    2e40:	62 30       	cpi	r22, 0x02	; 2
    2e42:	19 f4       	brne	.+6      	; 0x2e4a <DIO_vSetPortDirection+0x74>
    2e44:	8f ef       	ldi	r24, 0xFF	; 255
    2e46:	81 bb       	out	0x11, r24	; 17
    2e48:	08 95       	ret
    2e4a:	61 11       	cpse	r22, r1
    2e4c:	04 c0       	rjmp	.+8      	; 0x2e56 <DIO_vSetPortDirection+0x80>
    2e4e:	11 ba       	out	0x11, r1	; 17
    2e50:	8f ef       	ldi	r24, 0xFF	; 255
    2e52:	82 bb       	out	0x12, r24	; 18
    2e54:	08 95       	ret
    2e56:	61 30       	cpi	r22, 0x01	; 1
    2e58:	09 f4       	brne	.+2      	; 0x2e5c <DIO_vSetPortDirection+0x86>
    2e5a:	11 ba       	out	0x11, r1	; 17
    2e5c:	08 95       	ret

Disassembly of section .text.DIO_u8GetPinValue:

000030e2 <DIO_u8GetPinValue>:
	}
}
//returns the pin value, if the port was wrong it returns -1
uint8 DIO_u8GetPinValue(uint8 Copy_u8PORT, uint8 Copy_u8PinNumber) {
		uint8 u8Pin_Value;
	switch (Copy_u8PORT) {
    30e2:	81 30       	cpi	r24, 0x01	; 1
    30e4:	89 f0       	breq	.+34     	; 0x3108 <DIO_u8GetPinValue+0x26>
    30e6:	28 f0       	brcs	.+10     	; 0x30f2 <DIO_u8GetPinValue+0x10>
    30e8:	82 30       	cpi	r24, 0x02	; 2
    30ea:	c9 f0       	breq	.+50     	; 0x311e <DIO_u8GetPinValue+0x3c>
    30ec:	83 30       	cpi	r24, 0x03	; 3
    30ee:	11 f1       	breq	.+68     	; 0x3134 <DIO_u8GetPinValue+0x52>
    30f0:	33 c0       	rjmp	.+102    	; 0x3158 <DIO_u8GetPinValue+0x76>
		case PORT_A: //PORTA
		if(BIT_IS_SET(PORTA_BASE->Pin,Copy_u8PinNumber))
    30f2:	89 b3       	in	r24, 0x19	; 25
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	02 c0       	rjmp	.+4      	; 0x30fc <DIO_u8GetPinValue+0x1a>
    30f8:	95 95       	asr	r25
    30fa:	87 95       	ror	r24
    30fc:	6a 95       	dec	r22
    30fe:	e2 f7       	brpl	.-8      	; 0x30f8 <DIO_u8GetPinValue+0x16>
    3100:	80 ff       	sbrs	r24, 0
    3102:	23 c0       	rjmp	.+70     	; 0x314a <DIO_u8GetPinValue+0x68>
		{
			u8Pin_Value = HIGH;
    3104:	91 e0       	ldi	r25, 0x01	; 1
    3106:	28 c0       	rjmp	.+80     	; 0x3158 <DIO_u8GetPinValue+0x76>
		{
			u8Pin_Value = LOW;
		}
		break;
		case PORT_B: //PORTB
		if(BIT_IS_SET(PORTB_BASE->Pin,Copy_u8PinNumber))
    3108:	86 b3       	in	r24, 0x16	; 22
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	02 c0       	rjmp	.+4      	; 0x3112 <DIO_u8GetPinValue+0x30>
    310e:	95 95       	asr	r25
    3110:	87 95       	ror	r24
    3112:	6a 95       	dec	r22
    3114:	e2 f7       	brpl	.-8      	; 0x310e <DIO_u8GetPinValue+0x2c>
    3116:	80 ff       	sbrs	r24, 0
    3118:	1a c0       	rjmp	.+52     	; 0x314e <DIO_u8GetPinValue+0x6c>
		{
			u8Pin_Value = HIGH;
    311a:	91 e0       	ldi	r25, 0x01	; 1
    311c:	1d c0       	rjmp	.+58     	; 0x3158 <DIO_u8GetPinValue+0x76>
		{
			u8Pin_Value = LOW;
		}
		break;
		case PORT_C: //PORTC
		if(BIT_IS_SET(PORTC_BASE->Pin,Copy_u8PinNumber))
    311e:	83 b3       	in	r24, 0x13	; 19
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	02 c0       	rjmp	.+4      	; 0x3128 <DIO_u8GetPinValue+0x46>
    3124:	95 95       	asr	r25
    3126:	87 95       	ror	r24
    3128:	6a 95       	dec	r22
    312a:	e2 f7       	brpl	.-8      	; 0x3124 <DIO_u8GetPinValue+0x42>
    312c:	80 ff       	sbrs	r24, 0
    312e:	11 c0       	rjmp	.+34     	; 0x3152 <DIO_u8GetPinValue+0x70>
		{
			u8Pin_Value = HIGH;
    3130:	91 e0       	ldi	r25, 0x01	; 1
    3132:	12 c0       	rjmp	.+36     	; 0x3158 <DIO_u8GetPinValue+0x76>
		{
			u8Pin_Value = LOW;
		}
		break;
		case PORT_D: //PORTD
		if(BIT_IS_SET(PORTD_BASE->Pin,Copy_u8PinNumber))
    3134:	80 b3       	in	r24, 0x10	; 16
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	02 c0       	rjmp	.+4      	; 0x313e <DIO_u8GetPinValue+0x5c>
    313a:	95 95       	asr	r25
    313c:	87 95       	ror	r24
    313e:	6a 95       	dec	r22
    3140:	e2 f7       	brpl	.-8      	; 0x313a <DIO_u8GetPinValue+0x58>
    3142:	80 ff       	sbrs	r24, 0
    3144:	08 c0       	rjmp	.+16     	; 0x3156 <DIO_u8GetPinValue+0x74>
		{
			u8Pin_Value = HIGH;
    3146:	91 e0       	ldi	r25, 0x01	; 1
    3148:	07 c0       	rjmp	.+14     	; 0x3158 <DIO_u8GetPinValue+0x76>
		{
			u8Pin_Value = HIGH;
		}
		else
		{
			u8Pin_Value = LOW;
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	05 c0       	rjmp	.+10     	; 0x3158 <DIO_u8GetPinValue+0x76>
		{
			u8Pin_Value = HIGH;
		}
		else
		{
			u8Pin_Value = LOW;
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	03 c0       	rjmp	.+6      	; 0x3158 <DIO_u8GetPinValue+0x76>
		{
			u8Pin_Value = HIGH;
		}
		else
		{
			u8Pin_Value = LOW;
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	01 c0       	rjmp	.+2      	; 0x3158 <DIO_u8GetPinValue+0x76>
		{
			u8Pin_Value = HIGH;
		}
		else
		{
			u8Pin_Value = LOW;
    3156:	90 e0       	ldi	r25, 0x00	; 0
		}
		break;
	}
	return u8Pin_Value;

}
    3158:	89 2f       	mov	r24, r25
    315a:	08 95       	ret

Disassembly of section .text.EEPROM_WRITE:

00003f84 <EEPROM_WRITE>:

//write function
void EEPROM_WRITE(uint16 address, uint8 data)
{
	/* Wait for completion of previous write */
	while(READ_BIT(EECR_REG,EEWE) == 1);
    3f84:	e1 99       	sbic	0x1c, 1	; 28
    3f86:	fe cf       	rjmp	.-4      	; 0x3f84 <EEPROM_WRITE>
	/* Set up address and data registers */
	EEAR_REG = address;
    3f88:	9f bb       	out	0x1f, r25	; 31
    3f8a:	8e bb       	out	0x1e, r24	; 30
	EEDR_REG = data;
    3f8c:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	SET_BIT(EECR_REG ,EEMWE);
    3f8e:	8c b3       	in	r24, 0x1c	; 28
    3f90:	84 60       	ori	r24, 0x04	; 4
    3f92:	8c bb       	out	0x1c, r24	; 28
	/* Start EEPROM write by setting EEWE */
	SET_BIT(EECR_REG ,EEWE);
    3f94:	8c b3       	in	r24, 0x1c	; 28
    3f96:	82 60       	ori	r24, 0x02	; 2
    3f98:	8c bb       	out	0x1c, r24	; 28
    3f9a:	08 95       	ret

Disassembly of section .text.EEPROM_READ:

0000401e <EEPROM_READ>:

//read function 
uint8 EEPROM_READ( uint16 address)
{
	/* Wait for completion of previous write */
	while(READ_BIT(EECR_REG,EEWE) == 1);
    401e:	e1 99       	sbic	0x1c, 1	; 28
    4020:	fe cf       	rjmp	.-4      	; 0x401e <EEPROM_READ>
	/* Set up address register */
	EEAR_REG = address;
    4022:	9f bb       	out	0x1f, r25	; 31
    4024:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	SET_BIT(EECR_REG ,EERE);
    4026:	8c b3       	in	r24, 0x1c	; 28
    4028:	81 60       	ori	r24, 0x01	; 1
    402a:	8c bb       	out	0x1c, r24	; 28
	/* Return data from data register */
	return EEDR_REG;
    402c:	8d b3       	in	r24, 0x1d	; 29
}
    402e:	08 95       	ret

Disassembly of section .text.__vector_1:

00003654 <__vector_1>:
static interrupt_callback_tcallback INT0_PTR =NULL_PTR;
static interrupt_callback_tcallback INT1_PTR =NULL_PTR;
static interrupt_callback_tcallback INT2_PTR =NULL_PTR;

ISR(INT0_vect)
{	
    3654:	1f 92       	push	r1
    3656:	0f 92       	push	r0
    3658:	0f b6       	in	r0, 0x3f	; 63
    365a:	0f 92       	push	r0
    365c:	11 24       	eor	r1, r1
    365e:	2f 93       	push	r18
    3660:	3f 93       	push	r19
    3662:	4f 93       	push	r20
    3664:	5f 93       	push	r21
    3666:	6f 93       	push	r22
    3668:	7f 93       	push	r23
    366a:	8f 93       	push	r24
    366c:	9f 93       	push	r25
    366e:	af 93       	push	r26
    3670:	bf 93       	push	r27
    3672:	ef 93       	push	r30
    3674:	ff 93       	push	r31
	if(INT0_PTR!=NULL_PTR)
    3676:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <INT0_PTR>
    367a:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <INT0_PTR+0x1>
    367e:	30 97       	sbiw	r30, 0x00	; 0
    3680:	09 f0       	breq	.+2      	; 0x3684 <__vector_1+0x30>
	{
		(*INT0_PTR)();
    3682:	09 95       	icall
	}


}
    3684:	ff 91       	pop	r31
    3686:	ef 91       	pop	r30
    3688:	bf 91       	pop	r27
    368a:	af 91       	pop	r26
    368c:	9f 91       	pop	r25
    368e:	8f 91       	pop	r24
    3690:	7f 91       	pop	r23
    3692:	6f 91       	pop	r22
    3694:	5f 91       	pop	r21
    3696:	4f 91       	pop	r20
    3698:	3f 91       	pop	r19
    369a:	2f 91       	pop	r18
    369c:	0f 90       	pop	r0
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	0f 90       	pop	r0
    36a2:	1f 90       	pop	r1
    36a4:	18 95       	reti

Disassembly of section .text.__vector_2:

000036a6 <__vector_2>:

ISR(INT1_vect)
{	
    36a6:	1f 92       	push	r1
    36a8:	0f 92       	push	r0
    36aa:	0f b6       	in	r0, 0x3f	; 63
    36ac:	0f 92       	push	r0
    36ae:	11 24       	eor	r1, r1
    36b0:	2f 93       	push	r18
    36b2:	3f 93       	push	r19
    36b4:	4f 93       	push	r20
    36b6:	5f 93       	push	r21
    36b8:	6f 93       	push	r22
    36ba:	7f 93       	push	r23
    36bc:	8f 93       	push	r24
    36be:	9f 93       	push	r25
    36c0:	af 93       	push	r26
    36c2:	bf 93       	push	r27
    36c4:	ef 93       	push	r30
    36c6:	ff 93       	push	r31
	if(INT1_PTR!=NULL_PTR)
    36c8:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <INT1_PTR>
    36cc:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <INT1_PTR+0x1>
    36d0:	30 97       	sbiw	r30, 0x00	; 0
    36d2:	09 f0       	breq	.+2      	; 0x36d6 <__vector_2+0x30>
	{
		(*INT1_PTR)();
    36d4:	09 95       	icall
	}

}
    36d6:	ff 91       	pop	r31
    36d8:	ef 91       	pop	r30
    36da:	bf 91       	pop	r27
    36dc:	af 91       	pop	r26
    36de:	9f 91       	pop	r25
    36e0:	8f 91       	pop	r24
    36e2:	7f 91       	pop	r23
    36e4:	6f 91       	pop	r22
    36e6:	5f 91       	pop	r21
    36e8:	4f 91       	pop	r20
    36ea:	3f 91       	pop	r19
    36ec:	2f 91       	pop	r18
    36ee:	0f 90       	pop	r0
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	0f 90       	pop	r0
    36f4:	1f 90       	pop	r1
    36f6:	18 95       	reti

Disassembly of section .text.__vector_3:

000036f8 <__vector_3>:

ISR (INT2_vect)
{
    36f8:	1f 92       	push	r1
    36fa:	0f 92       	push	r0
    36fc:	0f b6       	in	r0, 0x3f	; 63
    36fe:	0f 92       	push	r0
    3700:	11 24       	eor	r1, r1
    3702:	2f 93       	push	r18
    3704:	3f 93       	push	r19
    3706:	4f 93       	push	r20
    3708:	5f 93       	push	r21
    370a:	6f 93       	push	r22
    370c:	7f 93       	push	r23
    370e:	8f 93       	push	r24
    3710:	9f 93       	push	r25
    3712:	af 93       	push	r26
    3714:	bf 93       	push	r27
    3716:	ef 93       	push	r30
    3718:	ff 93       	push	r31
	if(INT2_PTR!=NULL_PTR)
    371a:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <INT2_PTR>
    371e:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <INT2_PTR+0x1>
    3722:	30 97       	sbiw	r30, 0x00	; 0
    3724:	09 f0       	breq	.+2      	; 0x3728 <__vector_3+0x30>
	{
		(*INT2_PTR)();
    3726:	09 95       	icall
	}


}
    3728:	ff 91       	pop	r31
    372a:	ef 91       	pop	r30
    372c:	bf 91       	pop	r27
    372e:	af 91       	pop	r26
    3730:	9f 91       	pop	r25
    3732:	8f 91       	pop	r24
    3734:	7f 91       	pop	r23
    3736:	6f 91       	pop	r22
    3738:	5f 91       	pop	r21
    373a:	4f 91       	pop	r20
    373c:	3f 91       	pop	r19
    373e:	2f 91       	pop	r18
    3740:	0f 90       	pop	r0
    3742:	0f be       	out	0x3f, r0	; 63
    3744:	0f 90       	pop	r0
    3746:	1f 90       	pop	r1
    3748:	18 95       	reti

Disassembly of section .text.EXT_INT_Init:

00003d32 <EXT_INT_Init>:

void EXT_INT_Init(void)
{
	//Configure INT0/PD2 as input pin
	CLEAR_BIT(INT0_1_DDR,Pin_Int0);
    3d32:	81 b3       	in	r24, 0x11	; 17
    3d34:	8b 7f       	andi	r24, 0xFB	; 251
    3d36:	81 bb       	out	0x11, r24	; 17
	SET_BIT(INT0_1_PORT,Pin_Int0);
    3d38:	82 b3       	in	r24, 0x12	; 18
    3d3a:	84 60       	ori	r24, 0x04	; 4
    3d3c:	82 bb       	out	0x12, r24	; 18
	// Configure INT1/PD3 as input pin
	CLEAR_BIT(INT0_1_DDR,Pin_Int1);
    3d3e:	81 b3       	in	r24, 0x11	; 17
    3d40:	87 7f       	andi	r24, 0xF7	; 247
    3d42:	81 bb       	out	0x11, r24	; 17
	SET_BIT(INT0_1_PORT,Pin_Int1);
    3d44:	82 b3       	in	r24, 0x12	; 18
    3d46:	88 60       	ori	r24, 0x08	; 8
    3d48:	82 bb       	out	0x12, r24	; 18
	// Configure INT2/PB2 as input pin
	CLEAR_BIT(INT2_DDR,Pin_Int2);
    3d4a:	87 b3       	in	r24, 0x17	; 23
    3d4c:	8b 7f       	andi	r24, 0xFB	; 251
    3d4e:	87 bb       	out	0x17, r24	; 23
	SET_BIT(INT2_PORT,Pin_Int2);
    3d50:	88 b3       	in	r24, 0x18	; 24
    3d52:	84 60       	ori	r24, 0x04	; 4
    3d54:	88 bb       	out	0x18, r24	; 24
    3d56:	08 95       	ret

Disassembly of section .text.EXT_INT_SET_CONFIG:

0000333a <EXT_INT_SET_CONFIG>:

}
void EXT_INT_SET_CONFIG(void)
{

	if(config.Enable_INT0_Interrupt==ENABLE_INT0)
    333a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <_end>
    333e:	86 30       	cpi	r24, 0x06	; 6
    3340:	21 f4       	brne	.+8      	; 0x334a <EXT_INT_SET_CONFIG+0x10>
	{
		SET_BIT(GICR,ENABLE_INT0);
    3342:	8b b7       	in	r24, 0x3b	; 59
    3344:	80 64       	ori	r24, 0x40	; 64
    3346:	8b bf       	out	0x3b, r24	; 59
    3348:	03 c0       	rjmp	.+6      	; 0x3350 <EXT_INT_SET_CONFIG+0x16>
	}
	else
	{
		CLEAR_BIT(GICR,ENABLE_INT0);
    334a:	8b b7       	in	r24, 0x3b	; 59
    334c:	8f 7b       	andi	r24, 0xBF	; 191
    334e:	8b bf       	out	0x3b, r24	; 59
	}
	if(config.Enable_INT1_Interrupt==ENABLE_INT1)
    3350:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <_end+0x1>
    3354:	87 30       	cpi	r24, 0x07	; 7
    3356:	21 f4       	brne	.+8      	; 0x3360 <EXT_INT_SET_CONFIG+0x26>
	{
		SET_BIT(GICR,ENABLE_INT1);
    3358:	8b b7       	in	r24, 0x3b	; 59
    335a:	80 68       	ori	r24, 0x80	; 128
    335c:	8b bf       	out	0x3b, r24	; 59
    335e:	03 c0       	rjmp	.+6      	; 0x3366 <EXT_INT_SET_CONFIG+0x2c>
	}
	else
	{
		CLEAR_BIT(GICR,ENABLE_INT1);
    3360:	8b b7       	in	r24, 0x3b	; 59
    3362:	8f 77       	andi	r24, 0x7F	; 127
    3364:	8b bf       	out	0x3b, r24	; 59
	}
	if(config.Enable_INT2_Interrupt==ENABLE_INT2)
    3366:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <_end+0x2>
    336a:	85 30       	cpi	r24, 0x05	; 5
    336c:	21 f4       	brne	.+8      	; 0x3376 <EXT_INT_SET_CONFIG+0x3c>
	{
		SET_BIT(GICR,ENABLE_INT2);
    336e:	8b b7       	in	r24, 0x3b	; 59
    3370:	80 62       	ori	r24, 0x20	; 32
    3372:	8b bf       	out	0x3b, r24	; 59
    3374:	03 c0       	rjmp	.+6      	; 0x337c <EXT_INT_SET_CONFIG+0x42>
	}
	else
	{
		CLEAR_BIT(GICR,ENABLE_INT2);
    3376:	8b b7       	in	r24, 0x3b	; 59
    3378:	8f 7d       	andi	r24, 0xDF	; 223
    337a:	8b bf       	out	0x3b, r24	; 59
	}
	MCUCR|=config.INT0_Triggering_Mode;
    337c:	e8 e6       	ldi	r30, 0x68	; 104
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	93 81       	ldd	r25, Z+3	; 0x03
    3382:	85 b7       	in	r24, 0x35	; 53
    3384:	89 2b       	or	r24, r25
    3386:	85 bf       	out	0x35, r24	; 53
	MCUCR|=((config.INT1_Triggering_Mode)<<ISC10_BIT);
    3388:	84 81       	ldd	r24, Z+4	; 0x04
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	88 0f       	add	r24, r24
    338e:	99 1f       	adc	r25, r25
    3390:	88 0f       	add	r24, r24
    3392:	99 1f       	adc	r25, r25
    3394:	95 b7       	in	r25, 0x35	; 53
    3396:	89 2b       	or	r24, r25
    3398:	85 bf       	out	0x35, r24	; 53
	MCUCSR|=((config.INT2_Triggering_Mode)<<ISC2_BIT);
    339a:	85 81       	ldd	r24, Z+5	; 0x05
    339c:	20 e4       	ldi	r18, 0x40	; 64
    339e:	82 9f       	mul	r24, r18
    33a0:	c0 01       	movw	r24, r0
    33a2:	11 24       	eor	r1, r1
    33a4:	94 b7       	in	r25, 0x34	; 52
    33a6:	89 2b       	or	r24, r25
    33a8:	84 bf       	out	0x34, r24	; 52
    33aa:	08 95       	ret

Disassembly of section .text.external_interrupt_register_callback:

00003c20 <external_interrupt_register_callback>:
}
void external_interrupt_register_callback(interrupt_callback_tcallback ptr,uint8 Int_Type)
{
	if(Int_Type==INT_0)
    3c20:	61 30       	cpi	r22, 0x01	; 1
    3c22:	29 f4       	brne	.+10     	; 0x3c2e <external_interrupt_register_callback+0xe>
	{
		INT0_PTR=ptr;
    3c24:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <INT0_PTR+0x1>
    3c28:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <INT0_PTR>
    3c2c:	08 95       	ret
	}
	else if (Int_Type==INT_1)
    3c2e:	62 30       	cpi	r22, 0x02	; 2
    3c30:	29 f4       	brne	.+10     	; 0x3c3c <external_interrupt_register_callback+0x1c>
	{
		INT1_PTR=ptr;
    3c32:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <INT1_PTR+0x1>
    3c36:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <INT1_PTR>
    3c3a:	08 95       	ret
	}
	else if (Int_Type==INT_2)
    3c3c:	63 30       	cpi	r22, 0x03	; 3
    3c3e:	21 f4       	brne	.+8      	; 0x3c48 <external_interrupt_register_callback+0x28>
	{
		INT2_PTR=ptr;
    3c40:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <INT2_PTR+0x1>
    3c44:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <INT2_PTR>
    3c48:	08 95       	ret

Disassembly of section .text.i2c_init:

000040aa <i2c_init>:

static uint8 masterMode;

void i2c_init(void)
{
    TWSR_REG &= ~((1 << TWPS1_PIN) | (1 << TWPS0_PIN)); // pre-scalar 1
    40aa:	81 b1       	in	r24, 0x01	; 1
    40ac:	8c 7f       	andi	r24, 0xFC	; 252
    40ae:	81 b9       	out	0x01, r24	; 1
    TWBR_REG = ((F_CPU / F_I2C) - 16) / 2; // baud rate factor 12
    40b0:	88 e4       	ldi	r24, 0x48	; 72
    40b2:	80 b9       	out	0x00, r24	; 0
    40b4:	08 95       	ret

Disassembly of section .text.i2c_tx_start:

00003dc6 <i2c_tx_start>:
    } else {
        status = TRANSMISSION_ERROR;
    }

    return status;
}
    3dc6:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <masterMode>
    3dca:	86 b7       	in	r24, 0x36	; 54
    3dcc:	84 6a       	ori	r24, 0xA4	; 164
    3dce:	86 bf       	out	0x36, r24	; 54
    3dd0:	06 b6       	in	r0, 0x36	; 54
    3dd2:	07 fe       	sbrs	r0, 7
    3dd4:	fd cf       	rjmp	.-6      	; 0x3dd0 <i2c_tx_start+0xa>
    3dd6:	81 b1       	in	r24, 0x01	; 1
    3dd8:	88 7f       	andi	r24, 0xF8	; 248
    3dda:	88 30       	cpi	r24, 0x08	; 8
    3ddc:	11 f0       	breq	.+4      	; 0x3de2 <i2c_tx_start+0x1c>
    3dde:	80 31       	cpi	r24, 0x10	; 16
    3de0:	11 f4       	brne	.+4      	; 0x3de6 <i2c_tx_start+0x20>
    3de2:	8f ef       	ldi	r24, 0xFF	; 255
    3de4:	08 95       	ret
    3de6:	8e ef       	ldi	r24, 0xFE	; 254
    3de8:	08 95       	ret

Disassembly of section .text.i2c_tx_address:

0000379c <i2c_tx_address>:
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	88 0f       	add	r24, r24
    37a0:	99 1f       	adc	r25, r25
    37a2:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <masterMode>
    37a6:	89 2b       	or	r24, r25
    37a8:	83 b9       	out	0x03, r24	; 3
    37aa:	86 b7       	in	r24, 0x36	; 54
    37ac:	8f 7d       	andi	r24, 0xDF	; 223
    37ae:	86 bf       	out	0x36, r24	; 54
    37b0:	86 b7       	in	r24, 0x36	; 54
    37b2:	80 68       	ori	r24, 0x80	; 128
    37b4:	86 bf       	out	0x36, r24	; 54
    37b6:	06 b6       	in	r0, 0x36	; 54
    37b8:	07 fe       	sbrs	r0, 7
    37ba:	fd cf       	rjmp	.-6      	; 0x37b6 <i2c_tx_address+0x1a>
    37bc:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <masterMode>
    37c0:	81 11       	cpse	r24, r1
    37c2:	06 c0       	rjmp	.+12     	; 0x37d0 <i2c_tx_address+0x34>
    37c4:	81 b1       	in	r24, 0x01	; 1
    37c6:	88 7f       	andi	r24, 0xF8	; 248
    37c8:	88 31       	cpi	r24, 0x18	; 24
    37ca:	51 f4       	brne	.+20     	; 0x37e0 <i2c_tx_address+0x44>
    37cc:	8f ef       	ldi	r24, 0xFF	; 255
    37ce:	08 95       	ret
    37d0:	81 30       	cpi	r24, 0x01	; 1
    37d2:	41 f4       	brne	.+16     	; 0x37e4 <i2c_tx_address+0x48>
    37d4:	81 b1       	in	r24, 0x01	; 1
    37d6:	88 7f       	andi	r24, 0xF8	; 248
    37d8:	80 34       	cpi	r24, 0x40	; 64
    37da:	31 f4       	brne	.+12     	; 0x37e8 <i2c_tx_address+0x4c>
    37dc:	8f ef       	ldi	r24, 0xFF	; 255
    37de:	08 95       	ret
    37e0:	8e ef       	ldi	r24, 0xFE	; 254
    37e2:	08 95       	ret
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	08 95       	ret
    37e8:	8e ef       	ldi	r24, 0xFE	; 254
    37ea:	08 95       	ret

Disassembly of section .text.i2c_tx_byte:

00003eca <i2c_tx_byte>:
    3eca:	83 b9       	out	0x03, r24	; 3
    3ecc:	86 b7       	in	r24, 0x36	; 54
    3ece:	80 68       	ori	r24, 0x80	; 128
    3ed0:	86 bf       	out	0x36, r24	; 54
    3ed2:	06 b6       	in	r0, 0x36	; 54
    3ed4:	07 fe       	sbrs	r0, 7
    3ed6:	fd cf       	rjmp	.-6      	; 0x3ed2 <i2c_tx_byte+0x8>
    3ed8:	81 b1       	in	r24, 0x01	; 1
    3eda:	88 7f       	andi	r24, 0xF8	; 248
    3edc:	88 32       	cpi	r24, 0x28	; 40
    3ede:	11 f4       	brne	.+4      	; 0x3ee4 <i2c_tx_byte+0x1a>
    3ee0:	8f ef       	ldi	r24, 0xFF	; 255
    3ee2:	08 95       	ret
    3ee4:	8e ef       	ldi	r24, 0xFE	; 254
    3ee6:	08 95       	ret

Disassembly of section .text.i2c_tx_stop:

00004064 <i2c_tx_stop>:

void i2c_tx_stop(void)
{
    /* clear interrupt flag, issue stop command (cleared automatically) */
    TWCR_REG |= (1 << TWINT_PIN) | (1 << TWSTO_PIN);
    4064:	86 b7       	in	r24, 0x36	; 54
    4066:	80 69       	ori	r24, 0x90	; 144
    4068:	86 bf       	out	0x36, r24	; 54

    while (!(TWCR_REG & (1 << TWSTO_PIN))); // wait until stop transmitted
    406a:	06 b6       	in	r0, 0x36	; 54
    406c:	04 fe       	sbrs	r0, 4
    406e:	fd cf       	rjmp	.-6      	; 0x406a <i2c_tx_stop+0x6>
}
    4070:	08 95       	ret

Disassembly of section .text.__vector_6:

0000374a <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    374a:	1f 92       	push	r1
    374c:	0f 92       	push	r0
    374e:	0f b6       	in	r0, 0x3f	; 63
    3750:	0f 92       	push	r0
    3752:	11 24       	eor	r1, r1
    3754:	2f 93       	push	r18
    3756:	3f 93       	push	r19
    3758:	4f 93       	push	r20
    375a:	5f 93       	push	r21
    375c:	6f 93       	push	r22
    375e:	7f 93       	push	r23
    3760:	8f 93       	push	r24
    3762:	9f 93       	push	r25
    3764:	af 93       	push	r26
    3766:	bf 93       	push	r27
    3768:	ef 93       	push	r30
    376a:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
    376c:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <g_callBackPtr>
    3770:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <g_callBackPtr+0x1>
    3774:	30 97       	sbiw	r30, 0x00	; 0
    3776:	09 f0       	breq	.+2      	; 0x377a <__vector_6+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3778:	09 95       	icall
	}
}
    377a:	ff 91       	pop	r31
    377c:	ef 91       	pop	r30
    377e:	bf 91       	pop	r27
    3780:	af 91       	pop	r26
    3782:	9f 91       	pop	r25
    3784:	8f 91       	pop	r24
    3786:	7f 91       	pop	r23
    3788:	6f 91       	pop	r22
    378a:	5f 91       	pop	r21
    378c:	4f 91       	pop	r20
    378e:	3f 91       	pop	r19
    3790:	2f 91       	pop	r18
    3792:	0f 90       	pop	r0
    3794:	0f be       	out	0x3f, r0	; 63
    3796:	0f 90       	pop	r0
    3798:	1f 90       	pop	r1
    379a:	18 95       	reti

Disassembly of section .text.PWM_Init:

00003bc6 <PWM_Init>:
#include "../DIO/DIO_Interface.h"

void PWM_Init(void)
{

TCNT1_REG &=TIMER1_initial_value & 0xFFFF;
    3bc6:	8c b5       	in	r24, 0x2c	; 44
    3bc8:	9d b5       	in	r25, 0x2d	; 45
    3bca:	1d bc       	out	0x2d, r1	; 45
    3bcc:	1c bc       	out	0x2c, r1	; 44

#if (PWM_mode==FAST_PWM_TOP_ICR)

CLEAR_BIT(TCCR1A_REG,WGM10_PIN);
    3bce:	8f b5       	in	r24, 0x2f	; 47
    3bd0:	8e 7f       	andi	r24, 0xFE	; 254
    3bd2:	8f bd       	out	0x2f, r24	; 47
SET_BIT(TCCR1A_REG,WGM11_PIN);
    3bd4:	8f b5       	in	r24, 0x2f	; 47
    3bd6:	82 60       	ori	r24, 0x02	; 2
    3bd8:	8f bd       	out	0x2f, r24	; 47
SET_BIT(TCCR1B_REG,WGM12_PIN);
    3bda:	8e b5       	in	r24, 0x2e	; 46
    3bdc:	88 60       	ori	r24, 0x08	; 8
    3bde:	8e bd       	out	0x2e, r24	; 46
SET_BIT(TCCR1B_REG,WGM13_PIN);
    3be0:	8e b5       	in	r24, 0x2e	; 46
    3be2:	80 61       	ori	r24, 0x10	; 16
    3be4:	8e bd       	out	0x2e, r24	; 46
SET_BIT(TCCR1A_REG,COM1A0_PIN);
CLEAR_BIT(TCCR1A_REG,COM1A1_PIN);

#elif (PWM_polarity==non_inverting)

CLEAR_BIT(TCCR1A_REG,COM1A0_PIN);
    3be6:	8f b5       	in	r24, 0x2f	; 47
    3be8:	8f 7b       	andi	r24, 0xBF	; 191
    3bea:	8f bd       	out	0x2f, r24	; 47
SET_BIT(TCCR1A_REG,COM1A1_PIN);
    3bec:	8f b5       	in	r24, 0x2f	; 47
    3bee:	80 68       	ori	r24, 0x80	; 128
    3bf0:	8f bd       	out	0x2f, r24	; 47
    3bf2:	08 95       	ret

Disassembly of section .text.PWM_Generate_CHANNELA:

00002cb6 <PWM_Generate_CHANNELA>:
#endif


}
void PWM_Generate_CHANNELA(float32 Copy_u8DutyCycle, uint32 Copy_u8Dutyfreq)
{
    2cb6:	cf 92       	push	r12
    2cb8:	df 92       	push	r13
    2cba:	ef 92       	push	r14
    2cbc:	ff 92       	push	r15
    2cbe:	6b 01       	movw	r12, r22
    2cc0:	7c 01       	movw	r14, r24

#if (PWM_mode==FAST_PWM_TOP_ICR)

	uint16 TOP=(F_CPU/(prescaler*Copy_u8Dutyfreq))-1;
    2cc2:	da 01       	movw	r26, r20
    2cc4:	c9 01       	movw	r24, r18
    2cc6:	88 0f       	add	r24, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	aa 1f       	adc	r26, r26
    2ccc:	bb 1f       	adc	r27, r27
    2cce:	88 0f       	add	r24, r24
    2cd0:	99 1f       	adc	r25, r25
    2cd2:	aa 1f       	adc	r26, r26
    2cd4:	bb 1f       	adc	r27, r27
    2cd6:	88 0f       	add	r24, r24
    2cd8:	99 1f       	adc	r25, r25
    2cda:	aa 1f       	adc	r26, r26
    2cdc:	bb 1f       	adc	r27, r27
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	aa 1f       	adc	r26, r26
    2ce4:	bb 1f       	adc	r27, r27
    2ce6:	9c 01       	movw	r18, r24
    2ce8:	ad 01       	movw	r20, r26
    2cea:	22 0f       	add	r18, r18
    2cec:	33 1f       	adc	r19, r19
    2cee:	44 1f       	adc	r20, r20
    2cf0:	55 1f       	adc	r21, r21
    2cf2:	22 0f       	add	r18, r18
    2cf4:	33 1f       	adc	r19, r19
    2cf6:	44 1f       	adc	r20, r20
    2cf8:	55 1f       	adc	r21, r21
    2cfa:	60 e0       	ldi	r22, 0x00	; 0
    2cfc:	74 e2       	ldi	r23, 0x24	; 36
    2cfe:	84 ef       	ldi	r24, 0xF4	; 244
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <__udivmodsi4>
	ICR1_REG =TOP+1;
    2d06:	37 bd       	out	0x27, r19	; 39
    2d08:	26 bd       	out	0x26, r18	; 38
	uint16 DutyCycle=((float32)(TOP+1)*Copy_u8DutyCycle/100);//for non-inverting mode
    2d0a:	b9 01       	movw	r22, r18
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	0e 94 ae 18 	call	0x315c	; 0x315c <__floatunsisf>
    2d14:	a7 01       	movw	r20, r14
    2d16:	96 01       	movw	r18, r12
    2d18:	0e 94 7f 20 	call	0x40fe	; 0x40fe <__mulsf3>
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	48 ec       	ldi	r20, 0xC8	; 200
    2d22:	52 e4       	ldi	r21, 0x42	; 66
    2d24:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <__divsf3>
    2d28:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__fixunssfsi>
	OCR1A_REG =DutyCycle;
    2d2c:	7b bd       	out	0x2b, r23	; 43
    2d2e:	6a bd       	out	0x2a, r22	; 42
	TCCR1B_REG |= (TCCR1B_REG & CLEAR_CLOCK_VALUE) | PWM_prescaler;
    2d30:	8e b5       	in	r24, 0x2e	; 46
    2d32:	9e b5       	in	r25, 0x2e	; 46
    2d34:	88 7f       	andi	r24, 0xF8	; 248
    2d36:	83 60       	ori	r24, 0x03	; 3
    2d38:	89 2b       	or	r24, r25
    2d3a:	8e bd       	out	0x2e, r24	; 46

#endif



}
    2d3c:	ff 90       	pop	r15
    2d3e:	ef 90       	pop	r14
    2d40:	df 90       	pop	r13
    2d42:	cf 90       	pop	r12
    2d44:	08 95       	ret

Disassembly of section .text.SPI_Init:

000035fe <SPI_Init>:

void SPI_Init()
{
	switch(SPI_DOUBLE_SPEED_MODE)
	{
		case DOUBLE_SPEED_MODE_DIS:clearBit(SPSR,SPI2X); break;
    35fe:	8e b1       	in	r24, 0x0e	; 14
    3600:	8e 7f       	andi	r24, 0xFE	; 254
    3602:	8e b9       	out	0x0e, r24	; 14
		case DOUBLE_SPEED_MODE_EN: setBit(SPSR,SPI2X);   break;
	}
	switch(DATA_ORDER)
	{
		case MSB:clearBit(SPCR,DORD); break;
    3604:	8d b1       	in	r24, 0x0d	; 13
    3606:	8f 7d       	andi	r24, 0xDF	; 223
    3608:	8d b9       	out	0x0d, r24	; 13
		case LSB: setBit(SPCR,DORD);  break;
	}
	switch(CLK_POLARITY)
	{
		case RISING_LEADING:clearBit(SPCR,CPOL); break;
    360a:	8d b1       	in	r24, 0x0d	; 13
    360c:	87 7f       	andi	r24, 0xF7	; 247
    360e:	8d b9       	out	0x0d, r24	; 13
		case FALLING_LEADING: setBit(SPCR,CPOL); break;
	}
	switch(CLK_PHASE)
	{
		case SAMPLE_LEADING: clearBit(SPCR,CPHA); break;
    3610:	8d b1       	in	r24, 0x0d	; 13
    3612:	8b 7f       	andi	r24, 0xFB	; 251
    3614:	8d b9       	out	0x0d, r24	; 13
		case SETUP_LEADING: setBit(SPCR,CPHA);	  break;
	}
	switch(SPI_INT_ENABLE)
	{
		case SPI_INT_DIS:clearBit(SPCR,SPIE); break;
    3616:	8d b1       	in	r24, 0x0d	; 13
    3618:	8f 77       	andi	r24, 0x7F	; 127
    361a:	8d b9       	out	0x0d, r24	; 13
		case SPI_INT_EN: setBit(SPCR,SPIE);   break;
	}
	switch(SPI_ENABLE)
	{
		case SPI_DIS:clearBit(SPCR,SPE);  break;
		case SPI_EN: setBit(SPCR,SPE);    break;
    361c:	8d b1       	in	r24, 0x0d	; 13
    361e:	80 64       	ori	r24, 0x40	; 64
    3620:	8d b9       	out	0x0d, r24	; 13
	}
	switch(IS_MSTR)
		{
			case SLAVE:	clearBit(DDRB_R,MOSI); clearBit(DDRB_R,SCK); clearBit(DDRB_R,SS); setBit(DDRB_R,MISO); clearBit(SPCR,MSTR); break;
			case MASTER:setBit(DDRB_R,MOSI); setBit(DDRB_R,SCK); setBit(DDRB_R,SS); clearBit(DDRB_R,MISO); setBit(PORTB_R,SS); setBit(SPCR,MSTR);  break;
    3622:	87 b3       	in	r24, 0x17	; 23
    3624:	80 62       	ori	r24, 0x20	; 32
    3626:	87 bb       	out	0x17, r24	; 23
    3628:	87 b3       	in	r24, 0x17	; 23
    362a:	80 68       	ori	r24, 0x80	; 128
    362c:	87 bb       	out	0x17, r24	; 23
    362e:	87 b3       	in	r24, 0x17	; 23
    3630:	88 60       	ori	r24, 0x08	; 8
    3632:	87 bb       	out	0x17, r24	; 23
    3634:	87 b3       	in	r24, 0x17	; 23
    3636:	8f 7b       	andi	r24, 0xBF	; 191
    3638:	87 bb       	out	0x17, r24	; 23
    363a:	88 b3       	in	r24, 0x18	; 24
    363c:	88 60       	ori	r24, 0x08	; 8
    363e:	88 bb       	out	0x18, r24	; 24
    3640:	8d b1       	in	r24, 0x0d	; 13
    3642:	80 61       	ori	r24, 0x10	; 16
    3644:	8d b9       	out	0x0d, r24	; 13
		}
	setBit(SPCR,SPR0);
    3646:	8d b1       	in	r24, 0x0d	; 13
    3648:	81 60       	ori	r24, 0x01	; 1
    364a:	8d b9       	out	0x0d, r24	; 13
	clearBit(SPCR,SPR1);
    364c:	8d b1       	in	r24, 0x0d	; 13
    364e:	8d 7f       	andi	r24, 0xFD	; 253
    3650:	8d b9       	out	0x0d, r24	; 13
    3652:	08 95       	ret

Disassembly of section .text.SPI_DATA_RW:

000040da <SPI_DATA_RW>:
}
uint8 SPI_DATA_RW(uint8 Copy_u8data)
{
	SPDR = Copy_u8data;
    40da:	8f b9       	out	0x0f, r24	; 15
	while (!getBit(SPSR,SPIF));
    40dc:	77 9b       	sbis	0x0e, 7	; 14
    40de:	fe cf       	rjmp	.-4      	; 0x40dc <SPI_DATA_RW+0x2>
	return SPDR;
    40e0:	8f b1       	in	r24, 0x0f	; 15
}
    40e2:	08 95       	ret

Disassembly of section .text.__vector_11:

0000324e <__vector_11>:
static void (*g_callback_ptr)(void) = NULL_PTR;
static uint8 flag = 0;
static uint16 g_Milli_Seconds;
static Timer0Config g_config;
ISR(TIMER0_OVF_vect)
{
    324e:	1f 92       	push	r1
    3250:	0f 92       	push	r0
    3252:	0f b6       	in	r0, 0x3f	; 63
    3254:	0f 92       	push	r0
    3256:	11 24       	eor	r1, r1
    3258:	2f 93       	push	r18
    325a:	3f 93       	push	r19
    325c:	4f 93       	push	r20
    325e:	5f 93       	push	r21
    3260:	6f 93       	push	r22
    3262:	7f 93       	push	r23
    3264:	8f 93       	push	r24
    3266:	9f 93       	push	r25
    3268:	af 93       	push	r26
    326a:	bf 93       	push	r27
    326c:	ef 93       	push	r30
    326e:	ff 93       	push	r31
	if(*g_ptr != NULL_PTR)
    3270:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <g_ptr>
    3274:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <g_ptr+0x1>
    3278:	30 97       	sbiw	r30, 0x00	; 0
    327a:	41 f0       	breq	.+16     	; 0x328c <__vector_11+0x3e>
	{
		(*g_ptr)(g_Milli_Seconds,&g_config);
    327c:	48 e7       	ldi	r20, 0x78	; 120
    327e:	50 e0       	ldi	r21, 0x00	; 0
    3280:	60 e8       	ldi	r22, 0x80	; 128
    3282:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <g_Milli_Seconds>
    3286:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <g_Milli_Seconds+0x1>
    328a:	09 95       	icall
	}
	if(flag != 0 && *g_callback_ptr != NULL_PTR)
    328c:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <flag>
    3290:	88 23       	and	r24, r24
    3292:	39 f0       	breq	.+14     	; 0x32a2 <__vector_11+0x54>
    3294:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <g_callback_ptr>
    3298:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <g_callback_ptr+0x1>
    329c:	30 97       	sbiw	r30, 0x00	; 0
    329e:	09 f0       	breq	.+2      	; 0x32a2 <__vector_11+0x54>
	{
		(*g_callback_ptr)();
    32a0:	09 95       	icall
	}
}
    32a2:	ff 91       	pop	r31
    32a4:	ef 91       	pop	r30
    32a6:	bf 91       	pop	r27
    32a8:	af 91       	pop	r26
    32aa:	9f 91       	pop	r25
    32ac:	8f 91       	pop	r24
    32ae:	7f 91       	pop	r23
    32b0:	6f 91       	pop	r22
    32b2:	5f 91       	pop	r21
    32b4:	4f 91       	pop	r20
    32b6:	3f 91       	pop	r19
    32b8:	2f 91       	pop	r18
    32ba:	0f 90       	pop	r0
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	0f 90       	pop	r0
    32c0:	1f 90       	pop	r1
    32c2:	18 95       	reti

Disassembly of section .text.__vector_10:

000032c4 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    32c4:	1f 92       	push	r1
    32c6:	0f 92       	push	r0
    32c8:	0f b6       	in	r0, 0x3f	; 63
    32ca:	0f 92       	push	r0
    32cc:	11 24       	eor	r1, r1
    32ce:	2f 93       	push	r18
    32d0:	3f 93       	push	r19
    32d2:	4f 93       	push	r20
    32d4:	5f 93       	push	r21
    32d6:	6f 93       	push	r22
    32d8:	7f 93       	push	r23
    32da:	8f 93       	push	r24
    32dc:	9f 93       	push	r25
    32de:	af 93       	push	r26
    32e0:	bf 93       	push	r27
    32e2:	ef 93       	push	r30
    32e4:	ff 93       	push	r31
	if(*g_ptr != NULL_PTR)
    32e6:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <g_ptr>
    32ea:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <g_ptr+0x1>
    32ee:	30 97       	sbiw	r30, 0x00	; 0
    32f0:	41 f0       	breq	.+16     	; 0x3302 <__vector_10+0x3e>
	{
		(*g_ptr)(g_Milli_Seconds,&g_config);
    32f2:	48 e7       	ldi	r20, 0x78	; 120
    32f4:	50 e0       	ldi	r21, 0x00	; 0
    32f6:	60 e8       	ldi	r22, 0x80	; 128
    32f8:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <g_Milli_Seconds>
    32fc:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <g_Milli_Seconds+0x1>
    3300:	09 95       	icall
	}
	if(flag != 0 && *g_callback_ptr != NULL_PTR)
    3302:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <flag>
    3306:	88 23       	and	r24, r24
    3308:	39 f0       	breq	.+14     	; 0x3318 <__vector_10+0x54>
    330a:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <g_callback_ptr>
    330e:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <g_callback_ptr+0x1>
    3312:	30 97       	sbiw	r30, 0x00	; 0
    3314:	09 f0       	breq	.+2      	; 0x3318 <__vector_10+0x54>
	{
		(*g_callback_ptr)();
    3316:	09 95       	icall
	}
}
    3318:	ff 91       	pop	r31
    331a:	ef 91       	pop	r30
    331c:	bf 91       	pop	r27
    331e:	af 91       	pop	r26
    3320:	9f 91       	pop	r25
    3322:	8f 91       	pop	r24
    3324:	7f 91       	pop	r23
    3326:	6f 91       	pop	r22
    3328:	5f 91       	pop	r21
    332a:	4f 91       	pop	r20
    332c:	3f 91       	pop	r19
    332e:	2f 91       	pop	r18
    3330:	0f 90       	pop	r0
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	0f 90       	pop	r0
    3336:	1f 90       	pop	r1
    3338:	18 95       	reti

Disassembly of section .text.TIMER0_init:

00001e12 <TIMER0_init>:
		MAX = 0;
		over = 0;
		ticks = 0;
		t = 0;
	}
}
    1e12:	cf 92       	push	r12
    1e14:	df 92       	push	r13
    1e16:	ef 92       	push	r14
    1e18:	9b 01       	movw	r18, r22
    1e1a:	48 2f       	mov	r20, r24
    1e1c:	13 be       	out	0x33, r1	; 51
    1e1e:	fb 01       	movw	r30, r22
    1e20:	84 91       	lpm	r24, Z
    1e22:	47 fd       	sbrc	r20, 7
    1e24:	80 81       	ld	r24, Z
    1e26:	81 11       	cpse	r24, r1
    1e28:	13 c0       	rjmp	.+38     	; 0x1e50 <TIMER0_init+0x3e>
    1e2a:	69 01       	movw	r12, r18
    1e2c:	e4 2e       	mov	r14, r20
    1e2e:	92 e0       	ldi	r25, 0x02	; 2
    1e30:	c9 0e       	add	r12, r25
    1e32:	d1 1c       	adc	r13, r1
    1e34:	e1 1c       	adc	r14, r1
    1e36:	f6 01       	movw	r30, r12
    1e38:	94 91       	lpm	r25, Z
    1e3a:	e7 fc       	sbrc	r14, 7
    1e3c:	90 81       	ld	r25, Z
    1e3e:	91 30       	cpi	r25, 0x01	; 1
    1e40:	39 f4       	brne	.+14     	; 0x1e50 <TIMER0_init+0x3e>
    1e42:	89 b7       	in	r24, 0x39	; 57
    1e44:	81 60       	ori	r24, 0x01	; 1
    1e46:	89 bf       	out	0x39, r24	; 57
    1e48:	8f b7       	in	r24, 0x3f	; 63
    1e4a:	80 68       	ori	r24, 0x80	; 128
    1e4c:	8f bf       	out	0x3f, r24	; 63
    1e4e:	1b c0       	rjmp	.+54     	; 0x1e86 <TIMER0_init+0x74>
    1e50:	82 30       	cpi	r24, 0x02	; 2
    1e52:	99 f4       	brne	.+38     	; 0x1e7a <TIMER0_init+0x68>
    1e54:	69 01       	movw	r12, r18
    1e56:	e4 2e       	mov	r14, r20
    1e58:	82 e0       	ldi	r24, 0x02	; 2
    1e5a:	c8 0e       	add	r12, r24
    1e5c:	d1 1c       	adc	r13, r1
    1e5e:	e1 1c       	adc	r14, r1
    1e60:	f6 01       	movw	r30, r12
    1e62:	84 91       	lpm	r24, Z
    1e64:	e7 fc       	sbrc	r14, 7
    1e66:	80 81       	ld	r24, Z
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	39 f4       	brne	.+14     	; 0x1e7a <TIMER0_init+0x68>
    1e6c:	89 b7       	in	r24, 0x39	; 57
    1e6e:	82 60       	ori	r24, 0x02	; 2
    1e70:	89 bf       	out	0x39, r24	; 57
    1e72:	8f b7       	in	r24, 0x3f	; 63
    1e74:	80 68       	ori	r24, 0x80	; 128
    1e76:	8f bf       	out	0x3f, r24	; 63
    1e78:	06 c0       	rjmp	.+12     	; 0x1e86 <TIMER0_init+0x74>
    1e7a:	89 b7       	in	r24, 0x39	; 57
    1e7c:	8e 7f       	andi	r24, 0xFE	; 254
    1e7e:	89 bf       	out	0x39, r24	; 57
    1e80:	89 b7       	in	r24, 0x39	; 57
    1e82:	8d 7f       	andi	r24, 0xFD	; 253
    1e84:	89 bf       	out	0x39, r24	; 57
    1e86:	83 b7       	in	r24, 0x33	; 51
    1e88:	80 68       	ori	r24, 0x80	; 128
    1e8a:	83 bf       	out	0x33, r24	; 51
    1e8c:	53 b7       	in	r21, 0x33	; 51
    1e8e:	f9 01       	movw	r30, r18
    1e90:	84 91       	lpm	r24, Z
    1e92:	47 fd       	sbrc	r20, 7
    1e94:	80 81       	ld	r24, Z
    1e96:	a8 2f       	mov	r26, r24
    1e98:	a1 70       	andi	r26, 0x01	; 1
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	00 24       	eor	r0, r0
    1e9e:	b6 95       	lsr	r27
    1ea0:	a7 95       	ror	r26
    1ea2:	07 94       	ror	r0
    1ea4:	b6 95       	lsr	r27
    1ea6:	a7 95       	ror	r26
    1ea8:	07 94       	ror	r0
    1eaa:	ba 2f       	mov	r27, r26
    1eac:	a0 2d       	mov	r26, r0
    1eae:	98 2f       	mov	r25, r24
    1eb0:	92 70       	andi	r25, 0x02	; 2
    1eb2:	89 2f       	mov	r24, r25
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	8a 2b       	or	r24, r26
    1ec0:	85 2b       	or	r24, r21
    1ec2:	83 bf       	out	0x33, r24	; 51
    1ec4:	a4 2f       	mov	r26, r20
    1ec6:	c9 01       	movw	r24, r18
    1ec8:	03 96       	adiw	r24, 0x03	; 3
    1eca:	a1 1d       	adc	r26, r1
    1ecc:	fc 01       	movw	r30, r24
    1ece:	84 91       	lpm	r24, Z
    1ed0:	a7 fd       	sbrc	r26, 7
    1ed2:	80 81       	ld	r24, Z
    1ed4:	82 bf       	out	0x32, r24	; 50
    1ed6:	2c 5f       	subi	r18, 0xFC	; 252
    1ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eda:	4f 4f       	sbci	r20, 0xFF	; 255
    1edc:	f9 01       	movw	r30, r18
    1ede:	84 91       	lpm	r24, Z
    1ee0:	47 fd       	sbrc	r20, 7
    1ee2:	80 81       	ld	r24, Z
    1ee4:	8c bf       	out	0x3c, r24	; 60
    1ee6:	ef 90       	pop	r14
    1ee8:	df 90       	pop	r13
    1eea:	cf 90       	pop	r12
    1eec:	08 95       	ret

Disassembly of section .text.__vector_5:

0000354a <__vector_5>:

static volatile timer_callback_ptr T2_callBack_Ptr = NULL;

                                     /*ISR for timer 2*/
ISR(TIMER2_OVF)
{
    354a:	1f 92       	push	r1
    354c:	0f 92       	push	r0
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	0f 92       	push	r0
    3552:	11 24       	eor	r1, r1
    3554:	2f 93       	push	r18
    3556:	3f 93       	push	r19
    3558:	4f 93       	push	r20
    355a:	5f 93       	push	r21
    355c:	6f 93       	push	r22
    355e:	7f 93       	push	r23
    3560:	8f 93       	push	r24
    3562:	9f 93       	push	r25
    3564:	af 93       	push	r26
    3566:	bf 93       	push	r27
    3568:	ef 93       	push	r30
    356a:	ff 93       	push	r31
	if(T2_callBack_Ptr != NULL)
    356c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <T2_callBack_Ptr>
    3570:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <T2_callBack_Ptr+0x1>
    3574:	89 2b       	or	r24, r25
    3576:	29 f0       	breq	.+10     	; 0x3582 <__vector_5+0x38>
	{

		(*T2_callBack_Ptr)(); //calling the function from the main using pointer to function
    3578:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <T2_callBack_Ptr>
    357c:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <T2_callBack_Ptr+0x1>
    3580:	09 95       	icall
	}
}
    3582:	ff 91       	pop	r31
    3584:	ef 91       	pop	r30
    3586:	bf 91       	pop	r27
    3588:	af 91       	pop	r26
    358a:	9f 91       	pop	r25
    358c:	8f 91       	pop	r24
    358e:	7f 91       	pop	r23
    3590:	6f 91       	pop	r22
    3592:	5f 91       	pop	r21
    3594:	4f 91       	pop	r20
    3596:	3f 91       	pop	r19
    3598:	2f 91       	pop	r18
    359a:	0f 90       	pop	r0
    359c:	0f be       	out	0x3f, r0	; 63
    359e:	0f 90       	pop	r0
    35a0:	1f 90       	pop	r1
    35a2:	18 95       	reti

Disassembly of section .text.__vector_4:

000035a4 <__vector_4>:

ISR(TIMER2_COMP)
{
    35a4:	1f 92       	push	r1
    35a6:	0f 92       	push	r0
    35a8:	0f b6       	in	r0, 0x3f	; 63
    35aa:	0f 92       	push	r0
    35ac:	11 24       	eor	r1, r1
    35ae:	2f 93       	push	r18
    35b0:	3f 93       	push	r19
    35b2:	4f 93       	push	r20
    35b4:	5f 93       	push	r21
    35b6:	6f 93       	push	r22
    35b8:	7f 93       	push	r23
    35ba:	8f 93       	push	r24
    35bc:	9f 93       	push	r25
    35be:	af 93       	push	r26
    35c0:	bf 93       	push	r27
    35c2:	ef 93       	push	r30
    35c4:	ff 93       	push	r31
	if(T2_callBack_Ptr != NULL)
    35c6:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <T2_callBack_Ptr>
    35ca:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <T2_callBack_Ptr+0x1>
    35ce:	89 2b       	or	r24, r25
    35d0:	29 f0       	breq	.+10     	; 0x35dc <__vector_4+0x38>
	{

		(*T2_callBack_Ptr)(); //calling the function from the main using pointer to function
    35d2:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <T2_callBack_Ptr>
    35d6:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <T2_callBack_Ptr+0x1>
    35da:	09 95       	icall
	}
}
    35dc:	ff 91       	pop	r31
    35de:	ef 91       	pop	r30
    35e0:	bf 91       	pop	r27
    35e2:	af 91       	pop	r26
    35e4:	9f 91       	pop	r25
    35e6:	8f 91       	pop	r24
    35e8:	7f 91       	pop	r23
    35ea:	6f 91       	pop	r22
    35ec:	5f 91       	pop	r21
    35ee:	4f 91       	pop	r20
    35f0:	3f 91       	pop	r19
    35f2:	2f 91       	pop	r18
    35f4:	0f 90       	pop	r0
    35f6:	0f be       	out	0x3f, r0	; 63
    35f8:	0f 90       	pop	r0
    35fa:	1f 90       	pop	r1
    35fc:	18 95       	reti

Disassembly of section .text.WATCHDOG_ON:

000040b6 <WATCHDOG_ON>:
 */ 

#include "WATCHDOG.h"
void WATCHDOG_ON(void){
	//watchdog resets after 2.1 seconds 
	WDTCR_REG = (1<<WDE)|(1<<WDP2)|(1<<WDP0);
    40b6:	8d e0       	ldi	r24, 0x0D	; 13
    40b8:	81 bd       	out	0x21, r24	; 33
	CLEAR_BIT(WDTCR_REG,WDP1);
    40ba:	81 b5       	in	r24, 0x21	; 33
    40bc:	8d 7f       	andi	r24, 0xFD	; 253
    40be:	81 bd       	out	0x21, r24	; 33
    40c0:	08 95       	ret

Disassembly of section .text:

00004072 <__subsf3>:
    4072:	50 58       	subi	r21, 0x80	; 128

00004074 <__addsf3>:
    4074:	bb 27       	eor	r27, r27
    4076:	aa 27       	eor	r26, r26
    4078:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__addsf3x>
    407c:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <__fp_round>

Disassembly of section .text:

000023e0 <__addsf3x>:
    23e0:	11 c0       	rjmp	.+34     	; 0x2404 <__addsf3x+0x24>
    23e2:	0e 94 40 20 	call	0x4080	; 0x4080 <__fp_pscA>
    23e6:	38 f0       	brcs	.+14     	; 0x23f6 <__addsf3x+0x16>
    23e8:	0e 94 47 20 	call	0x408e	; 0x408e <__fp_pscB>
    23ec:	20 f0       	brcs	.+8      	; 0x23f6 <__addsf3x+0x16>
    23ee:	39 f4       	brne	.+14     	; 0x23fe <__addsf3x+0x1e>
    23f0:	9f 3f       	cpi	r25, 0xFF	; 255
    23f2:	19 f4       	brne	.+6      	; 0x23fa <__addsf3x+0x1a>
    23f4:	26 f4       	brtc	.+8      	; 0x23fe <__addsf3x+0x1e>
    23f6:	0c 94 8c 20 	jmp	0x4118	; 0x4118 <__fp_nan>
    23fa:	0e f4       	brtc	.+2      	; 0x23fe <__addsf3x+0x1e>
    23fc:	e0 95       	com	r30
    23fe:	e7 fb       	bst	r30, 7
    2400:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <__fp_inf>
    2404:	e9 2f       	mov	r30, r25
    2406:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__fp_split3>
    240a:	58 f3       	brcs	.-42     	; 0x23e2 <__addsf3x+0x2>
    240c:	ba 17       	cp	r27, r26
    240e:	62 07       	cpc	r22, r18
    2410:	73 07       	cpc	r23, r19
    2412:	84 07       	cpc	r24, r20
    2414:	95 07       	cpc	r25, r21
    2416:	20 f0       	brcs	.+8      	; 0x2420 <__addsf3x+0x40>
    2418:	79 f4       	brne	.+30     	; 0x2438 <__addsf3x+0x58>
    241a:	a6 f5       	brtc	.+104    	; 0x2484 <__addsf3x+0xa4>
    241c:	0c 94 4e 20 	jmp	0x409c	; 0x409c <__fp_zero>
    2420:	0e f4       	brtc	.+2      	; 0x2424 <__addsf3x+0x44>
    2422:	e0 95       	com	r30
    2424:	0b 2e       	mov	r0, r27
    2426:	ba 2f       	mov	r27, r26
    2428:	a0 2d       	mov	r26, r0
    242a:	0b 01       	movw	r0, r22
    242c:	b9 01       	movw	r22, r18
    242e:	90 01       	movw	r18, r0
    2430:	0c 01       	movw	r0, r24
    2432:	ca 01       	movw	r24, r20
    2434:	a0 01       	movw	r20, r0
    2436:	11 24       	eor	r1, r1
    2438:	ff 27       	eor	r31, r31
    243a:	59 1b       	sub	r21, r25
    243c:	99 f0       	breq	.+38     	; 0x2464 <__addsf3x+0x84>
    243e:	59 3f       	cpi	r21, 0xF9	; 249
    2440:	50 f4       	brcc	.+20     	; 0x2456 <__addsf3x+0x76>
    2442:	50 3e       	cpi	r21, 0xE0	; 224
    2444:	68 f1       	brcs	.+90     	; 0x24a0 <__addsf3x+0xc0>
    2446:	1a 16       	cp	r1, r26
    2448:	f0 40       	sbci	r31, 0x00	; 0
    244a:	a2 2f       	mov	r26, r18
    244c:	23 2f       	mov	r18, r19
    244e:	34 2f       	mov	r19, r20
    2450:	44 27       	eor	r20, r20
    2452:	58 5f       	subi	r21, 0xF8	; 248
    2454:	f3 cf       	rjmp	.-26     	; 0x243c <__addsf3x+0x5c>
    2456:	46 95       	lsr	r20
    2458:	37 95       	ror	r19
    245a:	27 95       	ror	r18
    245c:	a7 95       	ror	r26
    245e:	f0 40       	sbci	r31, 0x00	; 0
    2460:	53 95       	inc	r21
    2462:	c9 f7       	brne	.-14     	; 0x2456 <__addsf3x+0x76>
    2464:	7e f4       	brtc	.+30     	; 0x2484 <__addsf3x+0xa4>
    2466:	1f 16       	cp	r1, r31
    2468:	ba 0b       	sbc	r27, r26
    246a:	62 0b       	sbc	r22, r18
    246c:	73 0b       	sbc	r23, r19
    246e:	84 0b       	sbc	r24, r20
    2470:	ba f0       	brmi	.+46     	; 0x24a0 <__addsf3x+0xc0>
    2472:	91 50       	subi	r25, 0x01	; 1
    2474:	a1 f0       	breq	.+40     	; 0x249e <__addsf3x+0xbe>
    2476:	ff 0f       	add	r31, r31
    2478:	bb 1f       	adc	r27, r27
    247a:	66 1f       	adc	r22, r22
    247c:	77 1f       	adc	r23, r23
    247e:	88 1f       	adc	r24, r24
    2480:	c2 f7       	brpl	.-16     	; 0x2472 <__addsf3x+0x92>
    2482:	0e c0       	rjmp	.+28     	; 0x24a0 <__addsf3x+0xc0>
    2484:	ba 0f       	add	r27, r26
    2486:	62 1f       	adc	r22, r18
    2488:	73 1f       	adc	r23, r19
    248a:	84 1f       	adc	r24, r20
    248c:	48 f4       	brcc	.+18     	; 0x24a0 <__addsf3x+0xc0>
    248e:	87 95       	ror	r24
    2490:	77 95       	ror	r23
    2492:	67 95       	ror	r22
    2494:	b7 95       	ror	r27
    2496:	f7 95       	ror	r31
    2498:	9e 3f       	cpi	r25, 0xFE	; 254
    249a:	08 f0       	brcs	.+2      	; 0x249e <__addsf3x+0xbe>
    249c:	b0 cf       	rjmp	.-160    	; 0x23fe <__addsf3x+0x1e>
    249e:	93 95       	inc	r25
    24a0:	88 0f       	add	r24, r24
    24a2:	08 f0       	brcs	.+2      	; 0x24a6 <__addsf3x+0xc6>
    24a4:	99 27       	eor	r25, r25
    24a6:	ee 0f       	add	r30, r30
    24a8:	97 95       	ror	r25
    24aa:	87 95       	ror	r24
    24ac:	08 95       	ret

Disassembly of section .text:

000040e4 <__cmpsf2>:
    40e4:	0e 94 8e 1c 	call	0x391c	; 0x391c <__fp_cmp>
    40e8:	08 f4       	brcc	.+2      	; 0x40ec <__cmpsf2+0x8>
    40ea:	81 e0       	ldi	r24, 0x01	; 1
    40ec:	08 95       	ret

Disassembly of section .text:

000040f6 <__divsf3>:
    40f6:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__divsf3x>
    40fa:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <__fp_round>

Disassembly of section .text:

00001d34 <__divsf3x>:
    1d34:	10 c0       	rjmp	.+32     	; 0x1d56 <__divsf3x+0x22>
    1d36:	0e 94 47 20 	call	0x408e	; 0x408e <__fp_pscB>
    1d3a:	58 f0       	brcs	.+22     	; 0x1d52 <__divsf3x+0x1e>
    1d3c:	0e 94 40 20 	call	0x4080	; 0x4080 <__fp_pscA>
    1d40:	40 f0       	brcs	.+16     	; 0x1d52 <__divsf3x+0x1e>
    1d42:	29 f4       	brne	.+10     	; 0x1d4e <__divsf3x+0x1a>
    1d44:	5f 3f       	cpi	r21, 0xFF	; 255
    1d46:	29 f0       	breq	.+10     	; 0x1d52 <__divsf3x+0x1e>
    1d48:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <__fp_inf>
    1d4c:	51 11       	cpse	r21, r1
    1d4e:	0c 94 4f 20 	jmp	0x409e	; 0x409e <__fp_szero>
    1d52:	0c 94 8c 20 	jmp	0x4118	; 0x4118 <__fp_nan>
    1d56:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__fp_split3>
    1d5a:	68 f3       	brcs	.-38     	; 0x1d36 <__divsf3x+0x2>

00001d5c <__divsf3_pse>:
    1d5c:	99 23       	and	r25, r25
    1d5e:	b1 f3       	breq	.-20     	; 0x1d4c <__divsf3x+0x18>
    1d60:	55 23       	and	r21, r21
    1d62:	91 f3       	breq	.-28     	; 0x1d48 <__divsf3x+0x14>
    1d64:	95 1b       	sub	r25, r21
    1d66:	55 0b       	sbc	r21, r21
    1d68:	bb 27       	eor	r27, r27
    1d6a:	aa 27       	eor	r26, r26
    1d6c:	62 17       	cp	r22, r18
    1d6e:	73 07       	cpc	r23, r19
    1d70:	84 07       	cpc	r24, r20
    1d72:	38 f0       	brcs	.+14     	; 0x1d82 <__divsf3_pse+0x26>
    1d74:	9f 5f       	subi	r25, 0xFF	; 255
    1d76:	5f 4f       	sbci	r21, 0xFF	; 255
    1d78:	22 0f       	add	r18, r18
    1d7a:	33 1f       	adc	r19, r19
    1d7c:	44 1f       	adc	r20, r20
    1d7e:	aa 1f       	adc	r26, r26
    1d80:	a9 f3       	breq	.-22     	; 0x1d6c <__divsf3_pse+0x10>
    1d82:	35 d0       	rcall	.+106    	; 0x1dee <__divsf3_pse+0x92>
    1d84:	0e 2e       	mov	r0, r30
    1d86:	3a f0       	brmi	.+14     	; 0x1d96 <__divsf3_pse+0x3a>
    1d88:	e0 e8       	ldi	r30, 0x80	; 128
    1d8a:	32 d0       	rcall	.+100    	; 0x1df0 <__divsf3_pse+0x94>
    1d8c:	91 50       	subi	r25, 0x01	; 1
    1d8e:	50 40       	sbci	r21, 0x00	; 0
    1d90:	e6 95       	lsr	r30
    1d92:	00 1c       	adc	r0, r0
    1d94:	ca f7       	brpl	.-14     	; 0x1d88 <__divsf3_pse+0x2c>
    1d96:	2b d0       	rcall	.+86     	; 0x1dee <__divsf3_pse+0x92>
    1d98:	fe 2f       	mov	r31, r30
    1d9a:	29 d0       	rcall	.+82     	; 0x1dee <__divsf3_pse+0x92>
    1d9c:	66 0f       	add	r22, r22
    1d9e:	77 1f       	adc	r23, r23
    1da0:	88 1f       	adc	r24, r24
    1da2:	bb 1f       	adc	r27, r27
    1da4:	26 17       	cp	r18, r22
    1da6:	37 07       	cpc	r19, r23
    1da8:	48 07       	cpc	r20, r24
    1daa:	ab 07       	cpc	r26, r27
    1dac:	b0 e8       	ldi	r27, 0x80	; 128
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <__divsf3_pse+0x56>
    1db0:	bb 0b       	sbc	r27, r27
    1db2:	80 2d       	mov	r24, r0
    1db4:	bf 01       	movw	r22, r30
    1db6:	ff 27       	eor	r31, r31
    1db8:	93 58       	subi	r25, 0x83	; 131
    1dba:	5f 4f       	sbci	r21, 0xFF	; 255
    1dbc:	3a f0       	brmi	.+14     	; 0x1dcc <__divsf3_pse+0x70>
    1dbe:	9e 3f       	cpi	r25, 0xFE	; 254
    1dc0:	51 05       	cpc	r21, r1
    1dc2:	78 f0       	brcs	.+30     	; 0x1de2 <__divsf3_pse+0x86>
    1dc4:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <__fp_inf>
    1dc8:	0c 94 4f 20 	jmp	0x409e	; 0x409e <__fp_szero>
    1dcc:	5f 3f       	cpi	r21, 0xFF	; 255
    1dce:	e4 f3       	brlt	.-8      	; 0x1dc8 <__divsf3_pse+0x6c>
    1dd0:	98 3e       	cpi	r25, 0xE8	; 232
    1dd2:	d4 f3       	brlt	.-12     	; 0x1dc8 <__divsf3_pse+0x6c>
    1dd4:	86 95       	lsr	r24
    1dd6:	77 95       	ror	r23
    1dd8:	67 95       	ror	r22
    1dda:	b7 95       	ror	r27
    1ddc:	f7 95       	ror	r31
    1dde:	9f 5f       	subi	r25, 0xFF	; 255
    1de0:	c9 f7       	brne	.-14     	; 0x1dd4 <__divsf3_pse+0x78>
    1de2:	88 0f       	add	r24, r24
    1de4:	91 1d       	adc	r25, r1
    1de6:	96 95       	lsr	r25
    1de8:	87 95       	ror	r24
    1dea:	97 f9       	bld	r25, 7
    1dec:	08 95       	ret
    1dee:	e1 e0       	ldi	r30, 0x01	; 1
    1df0:	66 0f       	add	r22, r22
    1df2:	77 1f       	adc	r23, r23
    1df4:	88 1f       	adc	r24, r24
    1df6:	bb 1f       	adc	r27, r27
    1df8:	62 17       	cp	r22, r18
    1dfa:	73 07       	cpc	r23, r19
    1dfc:	84 07       	cpc	r24, r20
    1dfe:	ba 07       	cpc	r27, r26
    1e00:	20 f0       	brcs	.+8      	; 0x1e0a <__divsf3_pse+0xae>
    1e02:	62 1b       	sub	r22, r18
    1e04:	73 0b       	sbc	r23, r19
    1e06:	84 0b       	sbc	r24, r20
    1e08:	ba 0b       	sbc	r27, r26
    1e0a:	ee 1f       	adc	r30, r30
    1e0c:	88 f7       	brcc	.-30     	; 0x1df0 <__divsf3_pse+0x94>
    1e0e:	e0 95       	com	r30
    1e10:	08 95       	ret

Disassembly of section .text:

000034ec <__fixunssfsi>:
    34ec:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <__fp_splitA>
    34f0:	88 f0       	brcs	.+34     	; 0x3514 <__fixunssfsi+0x28>
    34f2:	9f 57       	subi	r25, 0x7F	; 127
    34f4:	98 f0       	brcs	.+38     	; 0x351c <__fixunssfsi+0x30>
    34f6:	b9 2f       	mov	r27, r25
    34f8:	99 27       	eor	r25, r25
    34fa:	b7 51       	subi	r27, 0x17	; 23
    34fc:	b0 f0       	brcs	.+44     	; 0x352a <__fixunssfsi+0x3e>
    34fe:	e1 f0       	breq	.+56     	; 0x3538 <__fixunssfsi+0x4c>
    3500:	66 0f       	add	r22, r22
    3502:	77 1f       	adc	r23, r23
    3504:	88 1f       	adc	r24, r24
    3506:	99 1f       	adc	r25, r25
    3508:	1a f0       	brmi	.+6      	; 0x3510 <__fixunssfsi+0x24>
    350a:	ba 95       	dec	r27
    350c:	c9 f7       	brne	.-14     	; 0x3500 <__fixunssfsi+0x14>
    350e:	14 c0       	rjmp	.+40     	; 0x3538 <__fixunssfsi+0x4c>
    3510:	b1 30       	cpi	r27, 0x01	; 1
    3512:	91 f0       	breq	.+36     	; 0x3538 <__fixunssfsi+0x4c>
    3514:	0e 94 4e 20 	call	0x409c	; 0x409c <__fp_zero>
    3518:	b1 e0       	ldi	r27, 0x01	; 1
    351a:	08 95       	ret
    351c:	0c 94 4e 20 	jmp	0x409c	; 0x409c <__fp_zero>
    3520:	67 2f       	mov	r22, r23
    3522:	78 2f       	mov	r23, r24
    3524:	88 27       	eor	r24, r24
    3526:	b8 5f       	subi	r27, 0xF8	; 248
    3528:	39 f0       	breq	.+14     	; 0x3538 <__fixunssfsi+0x4c>
    352a:	b9 3f       	cpi	r27, 0xF9	; 249
    352c:	cc f3       	brlt	.-14     	; 0x3520 <__fixunssfsi+0x34>
    352e:	86 95       	lsr	r24
    3530:	77 95       	ror	r23
    3532:	67 95       	ror	r22
    3534:	b3 95       	inc	r27
    3536:	d9 f7       	brne	.-10     	; 0x352e <__fixunssfsi+0x42>
    3538:	3e f4       	brtc	.+14     	; 0x3548 <__fixunssfsi+0x5c>
    353a:	90 95       	com	r25
    353c:	80 95       	com	r24
    353e:	70 95       	com	r23
    3540:	61 95       	neg	r22
    3542:	7f 4f       	sbci	r23, 0xFF	; 255
    3544:	8f 4f       	sbci	r24, 0xFF	; 255
    3546:	9f 4f       	sbci	r25, 0xFF	; 255
    3548:	08 95       	ret

Disassembly of section .text:

0000315c <__floatunsisf>:
    315c:	e8 94       	clt
    315e:	09 c0       	rjmp	.+18     	; 0x3172 <__floatsisf+0x12>

00003160 <__floatsisf>:
    3160:	97 fb       	bst	r25, 7
    3162:	3e f4       	brtc	.+14     	; 0x3172 <__floatsisf+0x12>
    3164:	90 95       	com	r25
    3166:	80 95       	com	r24
    3168:	70 95       	com	r23
    316a:	61 95       	neg	r22
    316c:	7f 4f       	sbci	r23, 0xFF	; 255
    316e:	8f 4f       	sbci	r24, 0xFF	; 255
    3170:	9f 4f       	sbci	r25, 0xFF	; 255
    3172:	99 23       	and	r25, r25
    3174:	a9 f0       	breq	.+42     	; 0x31a0 <__floatsisf+0x40>
    3176:	f9 2f       	mov	r31, r25
    3178:	96 e9       	ldi	r25, 0x96	; 150
    317a:	bb 27       	eor	r27, r27
    317c:	93 95       	inc	r25
    317e:	f6 95       	lsr	r31
    3180:	87 95       	ror	r24
    3182:	77 95       	ror	r23
    3184:	67 95       	ror	r22
    3186:	b7 95       	ror	r27
    3188:	f1 11       	cpse	r31, r1
    318a:	f8 cf       	rjmp	.-16     	; 0x317c <__floatsisf+0x1c>
    318c:	fa f4       	brpl	.+62     	; 0x31cc <__floatsisf+0x6c>
    318e:	bb 0f       	add	r27, r27
    3190:	11 f4       	brne	.+4      	; 0x3196 <__floatsisf+0x36>
    3192:	60 ff       	sbrs	r22, 0
    3194:	1b c0       	rjmp	.+54     	; 0x31cc <__floatsisf+0x6c>
    3196:	6f 5f       	subi	r22, 0xFF	; 255
    3198:	7f 4f       	sbci	r23, 0xFF	; 255
    319a:	8f 4f       	sbci	r24, 0xFF	; 255
    319c:	9f 4f       	sbci	r25, 0xFF	; 255
    319e:	16 c0       	rjmp	.+44     	; 0x31cc <__floatsisf+0x6c>
    31a0:	88 23       	and	r24, r24
    31a2:	11 f0       	breq	.+4      	; 0x31a8 <__floatsisf+0x48>
    31a4:	96 e9       	ldi	r25, 0x96	; 150
    31a6:	11 c0       	rjmp	.+34     	; 0x31ca <__floatsisf+0x6a>
    31a8:	77 23       	and	r23, r23
    31aa:	21 f0       	breq	.+8      	; 0x31b4 <__floatsisf+0x54>
    31ac:	9e e8       	ldi	r25, 0x8E	; 142
    31ae:	87 2f       	mov	r24, r23
    31b0:	76 2f       	mov	r23, r22
    31b2:	05 c0       	rjmp	.+10     	; 0x31be <__floatsisf+0x5e>
    31b4:	66 23       	and	r22, r22
    31b6:	71 f0       	breq	.+28     	; 0x31d4 <__floatsisf+0x74>
    31b8:	96 e8       	ldi	r25, 0x86	; 134
    31ba:	86 2f       	mov	r24, r22
    31bc:	70 e0       	ldi	r23, 0x00	; 0
    31be:	60 e0       	ldi	r22, 0x00	; 0
    31c0:	2a f0       	brmi	.+10     	; 0x31cc <__floatsisf+0x6c>
    31c2:	9a 95       	dec	r25
    31c4:	66 0f       	add	r22, r22
    31c6:	77 1f       	adc	r23, r23
    31c8:	88 1f       	adc	r24, r24
    31ca:	da f7       	brpl	.-10     	; 0x31c2 <__floatsisf+0x62>
    31cc:	88 0f       	add	r24, r24
    31ce:	96 95       	lsr	r25
    31d0:	87 95       	ror	r24
    31d2:	97 f9       	bld	r25, 7
    31d4:	08 95       	ret

Disassembly of section .text:

0000391c <__fp_cmp>:
    391c:	99 0f       	add	r25, r25
    391e:	00 08       	sbc	r0, r0
    3920:	55 0f       	add	r21, r21
    3922:	aa 0b       	sbc	r26, r26
    3924:	e0 e8       	ldi	r30, 0x80	; 128
    3926:	fe ef       	ldi	r31, 0xFE	; 254
    3928:	16 16       	cp	r1, r22
    392a:	17 06       	cpc	r1, r23
    392c:	e8 07       	cpc	r30, r24
    392e:	f9 07       	cpc	r31, r25
    3930:	c0 f0       	brcs	.+48     	; 0x3962 <__fp_cmp+0x46>
    3932:	12 16       	cp	r1, r18
    3934:	13 06       	cpc	r1, r19
    3936:	e4 07       	cpc	r30, r20
    3938:	f5 07       	cpc	r31, r21
    393a:	98 f0       	brcs	.+38     	; 0x3962 <__fp_cmp+0x46>
    393c:	62 1b       	sub	r22, r18
    393e:	73 0b       	sbc	r23, r19
    3940:	84 0b       	sbc	r24, r20
    3942:	95 0b       	sbc	r25, r21
    3944:	39 f4       	brne	.+14     	; 0x3954 <__fp_cmp+0x38>
    3946:	0a 26       	eor	r0, r26
    3948:	61 f0       	breq	.+24     	; 0x3962 <__fp_cmp+0x46>
    394a:	23 2b       	or	r18, r19
    394c:	24 2b       	or	r18, r20
    394e:	25 2b       	or	r18, r21
    3950:	21 f4       	brne	.+8      	; 0x395a <__fp_cmp+0x3e>
    3952:	08 95       	ret
    3954:	0a 26       	eor	r0, r26
    3956:	09 f4       	brne	.+2      	; 0x395a <__fp_cmp+0x3e>
    3958:	a1 40       	sbci	r26, 0x01	; 1
    395a:	a6 95       	lsr	r26
    395c:	8f ef       	ldi	r24, 0xFF	; 255
    395e:	81 1d       	adc	r24, r1
    3960:	81 1d       	adc	r24, r1
    3962:	08 95       	ret

Disassembly of section .text:

000040c2 <__fp_inf>:
    40c2:	97 f9       	bld	r25, 7
    40c4:	9f 67       	ori	r25, 0x7F	; 127
    40c6:	80 e8       	ldi	r24, 0x80	; 128
    40c8:	70 e0       	ldi	r23, 0x00	; 0
    40ca:	60 e0       	ldi	r22, 0x00	; 0
    40cc:	08 95       	ret

Disassembly of section .text:

00004118 <__fp_nan>:
    4118:	9f ef       	ldi	r25, 0xFF	; 255
    411a:	80 ec       	ldi	r24, 0xC0	; 192
    411c:	08 95       	ret

Disassembly of section .text:

00004080 <__fp_pscA>:
    4080:	00 24       	eor	r0, r0
    4082:	0a 94       	dec	r0
    4084:	16 16       	cp	r1, r22
    4086:	17 06       	cpc	r1, r23
    4088:	18 06       	cpc	r1, r24
    408a:	09 06       	cpc	r0, r25
    408c:	08 95       	ret

Disassembly of section .text:

0000408e <__fp_pscB>:
    408e:	00 24       	eor	r0, r0
    4090:	0a 94       	dec	r0
    4092:	12 16       	cp	r1, r18
    4094:	13 06       	cpc	r1, r19
    4096:	14 06       	cpc	r1, r20
    4098:	05 06       	cpc	r0, r21
    409a:	08 95       	ret

Disassembly of section .text:

00003e0c <__fp_round>:
    3e0c:	09 2e       	mov	r0, r25
    3e0e:	03 94       	inc	r0
    3e10:	00 0c       	add	r0, r0
    3e12:	11 f4       	brne	.+4      	; 0x3e18 <__fp_round+0xc>
    3e14:	88 23       	and	r24, r24
    3e16:	52 f0       	brmi	.+20     	; 0x3e2c <__fp_round+0x20>
    3e18:	bb 0f       	add	r27, r27
    3e1a:	40 f4       	brcc	.+16     	; 0x3e2c <__fp_round+0x20>
    3e1c:	bf 2b       	or	r27, r31
    3e1e:	11 f4       	brne	.+4      	; 0x3e24 <__fp_round+0x18>
    3e20:	60 ff       	sbrs	r22, 0
    3e22:	04 c0       	rjmp	.+8      	; 0x3e2c <__fp_round+0x20>
    3e24:	6f 5f       	subi	r22, 0xFF	; 255
    3e26:	7f 4f       	sbci	r23, 0xFF	; 255
    3e28:	8f 4f       	sbci	r24, 0xFF	; 255
    3e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e2c:	08 95       	ret

Disassembly of section .text:

000039f0 <__fp_split3>:
    39f0:	57 fd       	sbrc	r21, 7
    39f2:	90 58       	subi	r25, 0x80	; 128
    39f4:	44 0f       	add	r20, r20
    39f6:	55 1f       	adc	r21, r21
    39f8:	59 f0       	breq	.+22     	; 0x3a10 <__fp_splitA+0x10>
    39fa:	5f 3f       	cpi	r21, 0xFF	; 255
    39fc:	71 f0       	breq	.+28     	; 0x3a1a <__fp_splitA+0x1a>
    39fe:	47 95       	ror	r20

00003a00 <__fp_splitA>:
    3a00:	88 0f       	add	r24, r24
    3a02:	97 fb       	bst	r25, 7
    3a04:	99 1f       	adc	r25, r25
    3a06:	61 f0       	breq	.+24     	; 0x3a20 <__fp_splitA+0x20>
    3a08:	9f 3f       	cpi	r25, 0xFF	; 255
    3a0a:	79 f0       	breq	.+30     	; 0x3a2a <__fp_splitA+0x2a>
    3a0c:	87 95       	ror	r24
    3a0e:	08 95       	ret
    3a10:	12 16       	cp	r1, r18
    3a12:	13 06       	cpc	r1, r19
    3a14:	14 06       	cpc	r1, r20
    3a16:	55 1f       	adc	r21, r21
    3a18:	f2 cf       	rjmp	.-28     	; 0x39fe <__fp_split3+0xe>
    3a1a:	46 95       	lsr	r20
    3a1c:	f1 df       	rcall	.-30     	; 0x3a00 <__fp_splitA>
    3a1e:	08 c0       	rjmp	.+16     	; 0x3a30 <__fp_splitA+0x30>
    3a20:	16 16       	cp	r1, r22
    3a22:	17 06       	cpc	r1, r23
    3a24:	18 06       	cpc	r1, r24
    3a26:	99 1f       	adc	r25, r25
    3a28:	f1 cf       	rjmp	.-30     	; 0x3a0c <__fp_splitA+0xc>
    3a2a:	86 95       	lsr	r24
    3a2c:	71 05       	cpc	r23, r1
    3a2e:	61 05       	cpc	r22, r1
    3a30:	08 94       	sec
    3a32:	08 95       	ret

Disassembly of section .text:

0000409c <__fp_zero>:
    409c:	e8 94       	clt

0000409e <__fp_szero>:
    409e:	bb 27       	eor	r27, r27
    40a0:	66 27       	eor	r22, r22
    40a2:	77 27       	eor	r23, r23
    40a4:	cb 01       	movw	r24, r22
    40a6:	97 f9       	bld	r25, 7
    40a8:	08 95       	ret

Disassembly of section .text:

000040fe <__mulsf3>:
    40fe:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__mulsf3x>
    4102:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <__fp_round>

Disassembly of section .text:

00001fc6 <__mulsf3x>:
    1fc6:	0f c0       	rjmp	.+30     	; 0x1fe6 <__mulsf3x+0x20>
    1fc8:	0e 94 40 20 	call	0x4080	; 0x4080 <__fp_pscA>
    1fcc:	38 f0       	brcs	.+14     	; 0x1fdc <__mulsf3x+0x16>
    1fce:	0e 94 47 20 	call	0x408e	; 0x408e <__fp_pscB>
    1fd2:	20 f0       	brcs	.+8      	; 0x1fdc <__mulsf3x+0x16>
    1fd4:	95 23       	and	r25, r21
    1fd6:	11 f0       	breq	.+4      	; 0x1fdc <__mulsf3x+0x16>
    1fd8:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <__fp_inf>
    1fdc:	0c 94 8c 20 	jmp	0x4118	; 0x4118 <__fp_nan>
    1fe0:	11 24       	eor	r1, r1
    1fe2:	0c 94 4f 20 	jmp	0x409e	; 0x409e <__fp_szero>
    1fe6:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__fp_split3>
    1fea:	70 f3       	brcs	.-36     	; 0x1fc8 <__mulsf3x+0x2>

00001fec <__mulsf3_pse>:
    1fec:	95 9f       	mul	r25, r21
    1fee:	c1 f3       	breq	.-16     	; 0x1fe0 <__mulsf3x+0x1a>
    1ff0:	95 0f       	add	r25, r21
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	55 1f       	adc	r21, r21
    1ff6:	62 9f       	mul	r22, r18
    1ff8:	f0 01       	movw	r30, r0
    1ffa:	72 9f       	mul	r23, r18
    1ffc:	bb 27       	eor	r27, r27
    1ffe:	f0 0d       	add	r31, r0
    2000:	b1 1d       	adc	r27, r1
    2002:	63 9f       	mul	r22, r19
    2004:	aa 27       	eor	r26, r26
    2006:	f0 0d       	add	r31, r0
    2008:	b1 1d       	adc	r27, r1
    200a:	aa 1f       	adc	r26, r26
    200c:	64 9f       	mul	r22, r20
    200e:	66 27       	eor	r22, r22
    2010:	b0 0d       	add	r27, r0
    2012:	a1 1d       	adc	r26, r1
    2014:	66 1f       	adc	r22, r22
    2016:	82 9f       	mul	r24, r18
    2018:	22 27       	eor	r18, r18
    201a:	b0 0d       	add	r27, r0
    201c:	a1 1d       	adc	r26, r1
    201e:	62 1f       	adc	r22, r18
    2020:	73 9f       	mul	r23, r19
    2022:	b0 0d       	add	r27, r0
    2024:	a1 1d       	adc	r26, r1
    2026:	62 1f       	adc	r22, r18
    2028:	83 9f       	mul	r24, r19
    202a:	a0 0d       	add	r26, r0
    202c:	61 1d       	adc	r22, r1
    202e:	22 1f       	adc	r18, r18
    2030:	74 9f       	mul	r23, r20
    2032:	33 27       	eor	r19, r19
    2034:	a0 0d       	add	r26, r0
    2036:	61 1d       	adc	r22, r1
    2038:	23 1f       	adc	r18, r19
    203a:	84 9f       	mul	r24, r20
    203c:	60 0d       	add	r22, r0
    203e:	21 1d       	adc	r18, r1
    2040:	82 2f       	mov	r24, r18
    2042:	76 2f       	mov	r23, r22
    2044:	6a 2f       	mov	r22, r26
    2046:	11 24       	eor	r1, r1
    2048:	9f 57       	subi	r25, 0x7F	; 127
    204a:	50 40       	sbci	r21, 0x00	; 0
    204c:	9a f0       	brmi	.+38     	; 0x2074 <__mulsf3_pse+0x88>
    204e:	f1 f0       	breq	.+60     	; 0x208c <__mulsf3_pse+0xa0>
    2050:	88 23       	and	r24, r24
    2052:	4a f0       	brmi	.+18     	; 0x2066 <__mulsf3_pse+0x7a>
    2054:	ee 0f       	add	r30, r30
    2056:	ff 1f       	adc	r31, r31
    2058:	bb 1f       	adc	r27, r27
    205a:	66 1f       	adc	r22, r22
    205c:	77 1f       	adc	r23, r23
    205e:	88 1f       	adc	r24, r24
    2060:	91 50       	subi	r25, 0x01	; 1
    2062:	50 40       	sbci	r21, 0x00	; 0
    2064:	a9 f7       	brne	.-22     	; 0x2050 <__mulsf3_pse+0x64>
    2066:	9e 3f       	cpi	r25, 0xFE	; 254
    2068:	51 05       	cpc	r21, r1
    206a:	80 f0       	brcs	.+32     	; 0x208c <__mulsf3_pse+0xa0>
    206c:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <__fp_inf>
    2070:	0c 94 4f 20 	jmp	0x409e	; 0x409e <__fp_szero>
    2074:	5f 3f       	cpi	r21, 0xFF	; 255
    2076:	e4 f3       	brlt	.-8      	; 0x2070 <__mulsf3_pse+0x84>
    2078:	98 3e       	cpi	r25, 0xE8	; 232
    207a:	d4 f3       	brlt	.-12     	; 0x2070 <__mulsf3_pse+0x84>
    207c:	86 95       	lsr	r24
    207e:	77 95       	ror	r23
    2080:	67 95       	ror	r22
    2082:	b7 95       	ror	r27
    2084:	f7 95       	ror	r31
    2086:	e7 95       	ror	r30
    2088:	9f 5f       	subi	r25, 0xFF	; 255
    208a:	c1 f7       	brne	.-16     	; 0x207c <__mulsf3_pse+0x90>
    208c:	fe 2b       	or	r31, r30
    208e:	88 0f       	add	r24, r24
    2090:	91 1d       	adc	r25, r1
    2092:	96 95       	lsr	r25
    2094:	87 95       	ror	r24
    2096:	97 f9       	bld	r25, 7
    2098:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003c72 <__udivmodhi4>:
    3c72:	aa 1b       	sub	r26, r26
    3c74:	bb 1b       	sub	r27, r27
    3c76:	51 e1       	ldi	r21, 0x11	; 17
    3c78:	07 c0       	rjmp	.+14     	; 0x3c88 <__udivmodhi4_ep>

00003c7a <__udivmodhi4_loop>:
    3c7a:	aa 1f       	adc	r26, r26
    3c7c:	bb 1f       	adc	r27, r27
    3c7e:	a6 17       	cp	r26, r22
    3c80:	b7 07       	cpc	r27, r23
    3c82:	10 f0       	brcs	.+4      	; 0x3c88 <__udivmodhi4_ep>
    3c84:	a6 1b       	sub	r26, r22
    3c86:	b7 0b       	sbc	r27, r23

00003c88 <__udivmodhi4_ep>:
    3c88:	88 1f       	adc	r24, r24
    3c8a:	99 1f       	adc	r25, r25
    3c8c:	5a 95       	dec	r21
    3c8e:	a9 f7       	brne	.-22     	; 0x3c7a <__udivmodhi4_loop>
    3c90:	80 95       	com	r24
    3c92:	90 95       	com	r25
    3c94:	bc 01       	movw	r22, r24
    3c96:	cd 01       	movw	r24, r26
    3c98:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003a34 <__udivmodsi4>:
    3a34:	a1 e2       	ldi	r26, 0x21	; 33
    3a36:	1a 2e       	mov	r1, r26
    3a38:	aa 1b       	sub	r26, r26
    3a3a:	bb 1b       	sub	r27, r27
    3a3c:	fd 01       	movw	r30, r26
    3a3e:	0d c0       	rjmp	.+26     	; 0x3a5a <__udivmodsi4_ep>

00003a40 <__udivmodsi4_loop>:
    3a40:	aa 1f       	adc	r26, r26
    3a42:	bb 1f       	adc	r27, r27
    3a44:	ee 1f       	adc	r30, r30
    3a46:	ff 1f       	adc	r31, r31
    3a48:	a2 17       	cp	r26, r18
    3a4a:	b3 07       	cpc	r27, r19
    3a4c:	e4 07       	cpc	r30, r20
    3a4e:	f5 07       	cpc	r31, r21
    3a50:	20 f0       	brcs	.+8      	; 0x3a5a <__udivmodsi4_ep>
    3a52:	a2 1b       	sub	r26, r18
    3a54:	b3 0b       	sbc	r27, r19
    3a56:	e4 0b       	sbc	r30, r20
    3a58:	f5 0b       	sbc	r31, r21

00003a5a <__udivmodsi4_ep>:
    3a5a:	66 1f       	adc	r22, r22
    3a5c:	77 1f       	adc	r23, r23
    3a5e:	88 1f       	adc	r24, r24
    3a60:	99 1f       	adc	r25, r25
    3a62:	1a 94       	dec	r1
    3a64:	69 f7       	brne	.-38     	; 0x3a40 <__udivmodsi4_loop>
    3a66:	60 95       	com	r22
    3a68:	70 95       	com	r23
    3a6a:	80 95       	com	r24
    3a6c:	90 95       	com	r25
    3a6e:	9b 01       	movw	r18, r22
    3a70:	ac 01       	movw	r20, r24
    3a72:	bd 01       	movw	r22, r26
    3a74:	cf 01       	movw	r24, r30
    3a76:	08 95       	ret

Disassembly of section .text.libgcc:

000040ce <__tablejump2__>:
    40ce:	ee 0f       	add	r30, r30
    40d0:	ff 1f       	adc	r31, r31
    40d2:	05 90       	lpm	r0, Z+
    40d4:	f4 91       	lpm	r31, Z
    40d6:	e0 2d       	mov	r30, r0
    40d8:	09 94       	ijmp

Disassembly of section .text.libgcc:

00003f3a <__movmemx_qi>:
    3f3a:	99 27       	eor	r25, r25

00003f3c <__movmemx_hi>:
    3f3c:	77 fd       	sbrc	r23, 7
    3f3e:	05 c0       	rjmp	.+10     	; 0x3f4a <__movmemx_hi+0xe>
    3f40:	05 90       	lpm	r0, Z+
    3f42:	0d 92       	st	X+, r0
    3f44:	01 97       	sbiw	r24, 0x01	; 1
    3f46:	e1 f7       	brne	.-8      	; 0x3f40 <__movmemx_hi+0x4>
    3f48:	08 95       	ret
    3f4a:	01 90       	ld	r0, Z+
    3f4c:	0d 92       	st	X+, r0
    3f4e:	01 97       	sbiw	r24, 0x01	; 1
    3f50:	e1 f7       	brne	.-8      	; 0x3f4a <__movmemx_hi+0xe>
    3f52:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000412c <_fini>:
    412c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000412e <__funcs_on_exit>:
    412e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00004130 <__simulator_exit>:
    4130:	08 95       	ret

Disassembly of section .text.exit:

00003fcc <exit>:
    3fcc:	ec 01       	movw	r28, r24
    3fce:	0e 94 97 20 	call	0x412e	; 0x412e <__funcs_on_exit>
    3fd2:	0e 94 96 20 	call	0x412c	; 0x412c <_fini>
    3fd6:	ce 01       	movw	r24, r28
    3fd8:	0e 94 98 20 	call	0x4130	; 0x4130 <__simulator_exit>
    3fdc:	ce 01       	movw	r24, r28
    3fde:	0e 94 94 20 	call	0x4128	; 0x4128 <_Exit>

Disassembly of section .text.__wrap_sprintf:

00003d58 <_sprintf_cdnopuxX>:
    3d58:	a0 e0       	ldi	r26, 0x00	; 0
    3d5a:	b0 e0       	ldi	r27, 0x00	; 0
    3d5c:	e2 eb       	ldi	r30, 0xB2	; 178
    3d5e:	fe e1       	ldi	r31, 0x1E	; 30
    3d60:	0c 94 8a 1d 	jmp	0x3b14	; 0x3b14 <__prologue_saves__+0x20>
    3d64:	9e 01       	movw	r18, r28
    3d66:	26 5f       	subi	r18, 0xF6	; 246
    3d68:	3f 4f       	sbci	r19, 0xFF	; 255
    3d6a:	4f 81       	ldd	r20, Y+7	; 0x07
    3d6c:	58 85       	ldd	r21, Y+8	; 0x08
    3d6e:	69 85       	ldd	r22, Y+9	; 0x09
    3d70:	8d 81       	ldd	r24, Y+5	; 0x05
    3d72:	9e 81       	ldd	r25, Y+6	; 0x06
    3d74:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <__vsprintf>
    3d78:	e2 e0       	ldi	r30, 0x02	; 2
    3d7a:	0c 94 a6 1d 	jmp	0x3b4c	; 0x3b4c <__epilogue_restores__+0x20>

Disassembly of section .text.__fmt_s:

000024ae <__fmt_s>:
    24ae:	2f 92       	push	r2
    24b0:	3f 92       	push	r3
    24b2:	4f 92       	push	r4
    24b4:	6f 92       	push	r6
    24b6:	7f 92       	push	r7
    24b8:	8f 92       	push	r8
    24ba:	af 92       	push	r10
    24bc:	bf 92       	push	r11
    24be:	cf 92       	push	r12
    24c0:	df 92       	push	r13
    24c2:	ef 92       	push	r14
    24c4:	ff 92       	push	r15
    24c6:	0f 93       	push	r16
    24c8:	1f 93       	push	r17
    24ca:	cf 93       	push	r28
    24cc:	df 93       	push	r29
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	27 97       	sbiw	r28, 0x07	; 7
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	cd bf       	out	0x3d, r28	; 61
    24de:	6c 01       	movw	r12, r24
    24e0:	7b 01       	movw	r14, r22
    24e2:	39 01       	movw	r6, r18
    24e4:	84 2e       	mov	r8, r20
    24e6:	98 01       	movw	r18, r16
    24e8:	81 ef       	ldi	r24, 0xF1	; 241
    24ea:	28 2e       	mov	r2, r24
    24ec:	83 e0       	ldi	r24, 0x03	; 3
    24ee:	38 2e       	mov	r3, r24
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	48 2e       	mov	r4, r24
    24f4:	87 e0       	ldi	r24, 0x07	; 7
    24f6:	f1 01       	movw	r30, r2
    24f8:	ae 01       	movw	r20, r28
    24fa:	4f 5f       	subi	r20, 0xFF	; 255
    24fc:	5f 4f       	sbci	r21, 0xFF	; 255
    24fe:	da 01       	movw	r26, r20
    2500:	74 2d       	mov	r23, r4
    2502:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <__movmemx_qi>
    2506:	f7 01       	movw	r30, r14
    2508:	02 81       	ldd	r16, Z+2	; 0x02
    250a:	13 81       	ldd	r17, Z+3	; 0x03
    250c:	a4 80       	ldd	r10, Z+4	; 0x04
    250e:	b5 80       	ldd	r11, Z+5	; 0x05
    2510:	e0 80       	ld	r14, Z
    2512:	f1 80       	ldd	r15, Z+1	; 0x01
    2514:	61 14       	cp	r6, r1
    2516:	71 04       	cpc	r7, r1
    2518:	81 04       	cpc	r8, r1
    251a:	19 f4       	brne	.+6      	; 0x2522 <__fmt_s+0x74>
    251c:	3a 01       	movw	r6, r20
    251e:	f0 e8       	ldi	r31, 0x80	; 128
    2520:	8f 2e       	mov	r8, r31
    2522:	21 15       	cp	r18, r1
    2524:	31 05       	cpc	r19, r1
    2526:	29 f4       	brne	.+10     	; 0x2532 <__fmt_s+0x84>
    2528:	88 2d       	mov	r24, r8
    252a:	b3 01       	movw	r22, r6
    252c:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <strlen>
    2530:	9c 01       	movw	r18, r24
    2532:	17 fd       	sbrc	r17, 7
    2534:	04 c0       	rjmp	.+8      	; 0x253e <__fmt_s+0x90>
    2536:	02 17       	cp	r16, r18
    2538:	13 07       	cpc	r17, r19
    253a:	08 f4       	brcc	.+2      	; 0x253e <__fmt_s+0x90>
    253c:	98 01       	movw	r18, r16
    253e:	85 01       	movw	r16, r10
    2540:	68 2d       	mov	r22, r8
    2542:	a3 01       	movw	r20, r6
    2544:	c6 01       	movw	r24, r12
    2546:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__pad>
    254a:	27 96       	adiw	r28, 0x07	; 7
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	1f 91       	pop	r17
    255c:	0f 91       	pop	r16
    255e:	ff 90       	pop	r15
    2560:	ef 90       	pop	r14
    2562:	df 90       	pop	r13
    2564:	cf 90       	pop	r12
    2566:	bf 90       	pop	r11
    2568:	af 90       	pop	r10
    256a:	8f 90       	pop	r8
    256c:	7f 90       	pop	r7
    256e:	6f 90       	pop	r6
    2570:	4f 90       	pop	r4
    2572:	3f 90       	pop	r3
    2574:	2f 90       	pop	r2
    2576:	08 95       	ret

Disassembly of section .text.__out:

00003484 <__out>:
    3484:	6f 92       	push	r6
    3486:	7f 92       	push	r7
    3488:	8f 92       	push	r8
    348a:	cf 92       	push	r12
    348c:	df 92       	push	r13
    348e:	ef 92       	push	r14
    3490:	0f 93       	push	r16
    3492:	1f 93       	push	r17
    3494:	cf 93       	push	r28
    3496:	df 93       	push	r29
    3498:	8c 01       	movw	r16, r24
    349a:	6a 01       	movw	r12, r20
    349c:	e6 2e       	mov	r14, r22
    349e:	e9 01       	movw	r28, r18
    34a0:	3a 01       	movw	r6, r20
    34a2:	86 2e       	mov	r8, r22
    34a4:	62 0e       	add	r6, r18
    34a6:	73 1e       	adc	r7, r19
    34a8:	81 1c       	adc	r8, r1
    34aa:	37 fd       	sbrc	r19, 7
    34ac:	8a 94       	dec	r8
    34ae:	c6 14       	cp	r12, r6
    34b0:	d7 04       	cpc	r13, r7
    34b2:	e8 04       	cpc	r14, r8
    34b4:	79 f0       	breq	.+30     	; 0x34d4 <__out+0x50>
    34b6:	f6 01       	movw	r30, r12
    34b8:	84 91       	lpm	r24, Z
    34ba:	e7 fc       	sbrc	r14, 7
    34bc:	80 81       	ld	r24, Z
    34be:	b8 01       	movw	r22, r16
    34c0:	08 2e       	mov	r0, r24
    34c2:	00 0c       	add	r0, r0
    34c4:	99 0b       	sbc	r25, r25
    34c6:	0e 94 12 16 	call	0x2c24	; 0x2c24 <fputc>
    34ca:	8f ef       	ldi	r24, 0xFF	; 255
    34cc:	c8 1a       	sub	r12, r24
    34ce:	d8 0a       	sbc	r13, r24
    34d0:	e8 0a       	sbc	r14, r24
    34d2:	ed cf       	rjmp	.-38     	; 0x34ae <__out+0x2a>
    34d4:	ce 01       	movw	r24, r28
    34d6:	df 91       	pop	r29
    34d8:	cf 91       	pop	r28
    34da:	1f 91       	pop	r17
    34dc:	0f 91       	pop	r16
    34de:	ef 90       	pop	r14
    34e0:	df 90       	pop	r13
    34e2:	cf 90       	pop	r12
    34e4:	8f 90       	pop	r8
    34e6:	7f 90       	pop	r7
    34e8:	6f 90       	pop	r6
    34ea:	08 95       	ret

Disassembly of section .text.__pad:

00001b40 <__pad>:
    1b40:	2f 92       	push	r2
    1b42:	3f 92       	push	r3
    1b44:	4f 92       	push	r4
    1b46:	6f 92       	push	r6
    1b48:	7f 92       	push	r7
    1b4a:	8f 92       	push	r8
    1b4c:	af 92       	push	r10
    1b4e:	bf 92       	push	r11
    1b50:	cf 92       	push	r12
    1b52:	df 92       	push	r13
    1b54:	ef 92       	push	r14
    1b56:	ff 92       	push	r15
    1b58:	0f 93       	push	r16
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	66 97       	sbiw	r28, 0x16	; 22
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	5c 01       	movw	r10, r24
    1b72:	3a 01       	movw	r6, r20
    1b74:	86 2e       	mov	r8, r22
    1b76:	69 01       	movw	r12, r18
    1b78:	c7 01       	movw	r24, r14
    1b7a:	81 70       	andi	r24, 0x01	; 1
    1b7c:	99 27       	eor	r25, r25
    1b7e:	9c 8b       	std	Y+20, r25	; 0x14
    1b80:	8b 8b       	std	Y+19, r24	; 0x13
    1b82:	e0 fc       	sbrc	r14, 0
    1b84:	1d c0       	rjmp	.+58     	; 0x1bc0 <__pad+0x80>
    1b86:	20 17       	cp	r18, r16
    1b88:	31 07       	cpc	r19, r17
    1b8a:	d4 f4       	brge	.+52     	; 0x1bc0 <__pad+0x80>
    1b8c:	78 01       	movw	r14, r16
    1b8e:	ec 18       	sub	r14, r12
    1b90:	fd 08       	sbc	r15, r13
    1b92:	fe 8a       	std	Y+22, r15	; 0x16
    1b94:	ed 8a       	std	Y+21, r14	; 0x15
    1b96:	a7 01       	movw	r20, r14
    1b98:	91 e1       	ldi	r25, 0x11	; 17
    1b9a:	e9 16       	cp	r14, r25
    1b9c:	f1 04       	cpc	r15, r1
    1b9e:	10 f0       	brcs	.+4      	; 0x1ba4 <__pad+0x64>
    1ba0:	40 e1       	ldi	r20, 0x10	; 16
    1ba2:	50 e0       	ldi	r21, 0x00	; 0
    1ba4:	60 e2       	ldi	r22, 0x20	; 32
    1ba6:	70 e0       	ldi	r23, 0x00	; 0
    1ba8:	ce 01       	movw	r24, r28
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	9a 8b       	std	Y+18, r25	; 0x12
    1bae:	89 8b       	std	Y+17, r24	; 0x11
    1bb0:	0e 94 18 20 	call	0x4030	; 0x4030 <memset>
    1bb4:	89 89       	ldd	r24, Y+17	; 0x11
    1bb6:	9a 89       	ldd	r25, Y+18	; 0x12
    1bb8:	1c 01       	movw	r2, r24
    1bba:	20 e8       	ldi	r18, 0x80	; 128
    1bbc:	42 2e       	mov	r4, r18
    1bbe:	0b c0       	rjmp	.+22     	; 0x1bd6 <__pad+0x96>
    1bc0:	96 01       	movw	r18, r12
    1bc2:	68 2d       	mov	r22, r8
    1bc4:	a3 01       	movw	r20, r6
    1bc6:	c5 01       	movw	r24, r10
    1bc8:	0e 94 42 1a 	call	0x3484	; 0x3484 <__out>
    1bcc:	c0 16       	cp	r12, r16
    1bce:	d1 06       	cpc	r13, r17
    1bd0:	ec f2       	brlt	.-70     	; 0x1b8c <__pad+0x4c>
    1bd2:	c6 01       	movw	r24, r12
    1bd4:	25 c0       	rjmp	.+74     	; 0x1c20 <__pad+0xe0>
    1bd6:	90 e1       	ldi	r25, 0x10	; 16
    1bd8:	e9 16       	cp	r14, r25
    1bda:	f1 04       	cpc	r15, r1
    1bdc:	58 f0       	brcs	.+22     	; 0x1bf4 <__pad+0xb4>
    1bde:	20 e1       	ldi	r18, 0x10	; 16
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	64 2d       	mov	r22, r4
    1be4:	a1 01       	movw	r20, r2
    1be6:	c5 01       	movw	r24, r10
    1be8:	0e 94 42 1a 	call	0x3484	; 0x3484 <__out>
    1bec:	80 e1       	ldi	r24, 0x10	; 16
    1bee:	e8 1a       	sub	r14, r24
    1bf0:	f1 08       	sbc	r15, r1
    1bf2:	f1 cf       	rjmp	.-30     	; 0x1bd6 <__pad+0x96>
    1bf4:	2d 89       	ldd	r18, Y+21	; 0x15
    1bf6:	3e 89       	ldd	r19, Y+22	; 0x16
    1bf8:	2f 70       	andi	r18, 0x0F	; 15
    1bfa:	33 27       	eor	r19, r19
    1bfc:	89 89       	ldd	r24, Y+17	; 0x11
    1bfe:	9a 89       	ldd	r25, Y+18	; 0x12
    1c00:	ac 01       	movw	r20, r24
    1c02:	60 e8       	ldi	r22, 0x80	; 128
    1c04:	c5 01       	movw	r24, r10
    1c06:	0e 94 42 1a 	call	0x3484	; 0x3484 <__out>
    1c0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0e:	89 2b       	or	r24, r25
    1c10:	31 f4       	brne	.+12     	; 0x1c1e <__pad+0xde>
    1c12:	96 01       	movw	r18, r12
    1c14:	68 2d       	mov	r22, r8
    1c16:	a3 01       	movw	r20, r6
    1c18:	c5 01       	movw	r24, r10
    1c1a:	0e 94 42 1a 	call	0x3484	; 0x3484 <__out>
    1c1e:	c8 01       	movw	r24, r16
    1c20:	66 96       	adiw	r28, 0x16	; 22
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	cd bf       	out	0x3d, r28	; 61
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	ff 90       	pop	r15
    1c36:	ef 90       	pop	r14
    1c38:	df 90       	pop	r13
    1c3a:	cf 90       	pop	r12
    1c3c:	bf 90       	pop	r11
    1c3e:	af 90       	pop	r10
    1c40:	8f 90       	pop	r8
    1c42:	7f 90       	pop	r7
    1c44:	6f 90       	pop	r6
    1c46:	4f 90       	pop	r4
    1c48:	3f 90       	pop	r3
    1c4a:	2f 90       	pop	r2
    1c4c:	08 95       	ret

Disassembly of section .text.__dummy_fmt4:

0000411e <__fmt_a>:
    411e:	80 e0       	ldi	r24, 0x00	; 0
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	08 95       	ret

Disassembly of section .text.__fmt_state:

00002b86 <__fmt_state>:
    2b86:	cf 92       	push	r12
    2b88:	df 92       	push	r13
    2b8a:	ef 92       	push	r14
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	29 2f       	mov	r18, r25
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	22 0f       	add	r18, r18
    2b96:	33 1f       	adc	r19, r19
    2b98:	69 01       	movw	r12, r18
    2b9a:	03 2e       	mov	r0, r19
    2b9c:	00 0c       	add	r0, r0
    2b9e:	ee 08       	sbc	r14, r14
    2ba0:	6e 2d       	mov	r22, r14
    2ba2:	a6 01       	movw	r20, r12
    2ba4:	45 52       	subi	r20, 0x25	; 37
    2ba6:	5c 4f       	sbci	r21, 0xFC	; 252
    2ba8:	6f 4f       	sbci	r22, 0xFF	; 255
    2baa:	6a 01       	movw	r12, r20
    2bac:	e6 2e       	mov	r14, r22
    2bae:	fa 01       	movw	r30, r20
    2bb0:	84 91       	lpm	r24, Z
    2bb2:	e7 fc       	sbrc	r14, 7
    2bb4:	80 81       	ld	r24, Z
    2bb6:	81 11       	cpse	r24, r1
    2bb8:	0d c0       	rjmp	.+26     	; 0x2bd4 <__fmt_state+0x4e>
    2bba:	2f 5f       	subi	r18, 0xFF	; 255
    2bbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bbe:	03 2e       	mov	r0, r19
    2bc0:	00 0c       	add	r0, r0
    2bc2:	44 0b       	sbc	r20, r20
    2bc4:	25 52       	subi	r18, 0x25	; 37
    2bc6:	3c 4f       	sbci	r19, 0xFC	; 252
    2bc8:	4f 4f       	sbci	r20, 0xFF	; 255
    2bca:	f9 01       	movw	r30, r18
    2bcc:	84 91       	lpm	r24, Z
    2bce:	47 fd       	sbrc	r20, 7
    2bd0:	80 81       	ld	r24, Z
    2bd2:	24 c0       	rjmp	.+72     	; 0x2c1c <__fmt_state+0x96>
    2bd4:	cd 90       	ld	r12, X+
    2bd6:	dd 90       	ld	r13, X+
    2bd8:	ec 90       	ld	r14, X
    2bda:	12 97       	sbiw	r26, 0x02	; 2
    2bdc:	f6 01       	movw	r30, r12
    2bde:	44 91       	lpm	r20, Z
    2be0:	e7 fc       	sbrc	r14, 7
    2be2:	40 81       	ld	r20, Z
    2be4:	84 13       	cpse	r24, r20
    2be6:	15 c0       	rjmp	.+42     	; 0x2c12 <__fmt_state+0x8c>
    2be8:	2f 5f       	subi	r18, 0xFF	; 255
    2bea:	3f 4f       	sbci	r19, 0xFF	; 255
    2bec:	03 2e       	mov	r0, r19
    2bee:	00 0c       	add	r0, r0
    2bf0:	44 0b       	sbc	r20, r20
    2bf2:	25 52       	subi	r18, 0x25	; 37
    2bf4:	3c 4f       	sbci	r19, 0xFC	; 252
    2bf6:	4f 4f       	sbci	r20, 0xFF	; 255
    2bf8:	f9 01       	movw	r30, r18
    2bfa:	94 91       	lpm	r25, Z
    2bfc:	47 fd       	sbrc	r20, 7
    2bfe:	90 81       	ld	r25, Z
    2c00:	5f ef       	ldi	r21, 0xFF	; 255
    2c02:	c5 1a       	sub	r12, r21
    2c04:	d5 0a       	sbc	r13, r21
    2c06:	e5 0a       	sbc	r14, r21
    2c08:	cd 92       	st	X+, r12
    2c0a:	dd 92       	st	X+, r13
    2c0c:	ec 92       	st	X, r14
    2c0e:	12 97       	sbiw	r26, 0x02	; 2
    2c10:	01 c0       	rjmp	.+2      	; 0x2c14 <__fmt_state+0x8e>
    2c12:	9f 5f       	subi	r25, 0xFF	; 255
    2c14:	9b 30       	cpi	r25, 0x0B	; 11
    2c16:	08 f4       	brcc	.+2      	; 0x2c1a <__fmt_state+0x94>
    2c18:	bb cf       	rjmp	.-138    	; 0x2b90 <__fmt_state+0xa>
    2c1a:	89 2f       	mov	r24, r25
    2c1c:	ef 90       	pop	r14
    2c1e:	df 90       	pop	r13
    2c20:	cf 90       	pop	r12
    2c22:	08 95       	ret

Disassembly of section .text.__printf_core:

000003fe <__printf_core>:
 3fe:	a3 ea       	ldi	r26, 0xA3	; 163
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	e5 e0       	ldi	r30, 0x05	; 5
 404:	f2 e0       	ldi	r31, 0x02	; 2
 406:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__prologue_saves__>
 40a:	4c 01       	movw	r8, r24
 40c:	59 01       	movw	r10, r18
 40e:	c7 56       	subi	r28, 0x67	; 103
 410:	df 4f       	sbci	r29, 0xFF	; 255
 412:	48 83       	st	Y, r20
 414:	59 83       	std	Y+1, r21	; 0x01
 416:	6a 83       	std	Y+2, r22	; 0x02
 418:	c9 59       	subi	r28, 0x99	; 153
 41a:	d0 40       	sbci	r29, 0x00	; 0
 41c:	21 2c       	mov	r2, r1
 41e:	31 2c       	mov	r3, r1
 420:	6e 01       	movw	r12, r28
 422:	2b e8       	ldi	r18, 0x8B	; 139
 424:	c2 0e       	add	r12, r18
 426:	d1 1c       	adc	r13, r1
 428:	85 e2       	ldi	r24, 0x25	; 37
 42a:	78 2e       	mov	r7, r24
 42c:	26 01       	movw	r4, r12
 42e:	30 e8       	ldi	r19, 0x80	; 128
 430:	63 2e       	mov	r6, r19
 432:	ce 01       	movw	r24, r28
 434:	8d 56       	subi	r24, 0x6D	; 109
 436:	9f 4f       	sbci	r25, 0xFF	; 255
 438:	c4 56       	subi	r28, 0x64	; 100
 43a:	df 4f       	sbci	r29, 0xFF	; 255
 43c:	99 83       	std	Y+1, r25	; 0x01
 43e:	88 83       	st	Y, r24
 440:	cc 59       	subi	r28, 0x9C	; 156
 442:	d0 40       	sbci	r29, 0x00	; 0
 444:	9c 01       	movw	r18, r24
 446:	40 e8       	ldi	r20, 0x80	; 128
 448:	cf 55       	subi	r28, 0x5F	; 95
 44a:	df 4f       	sbci	r29, 0xFF	; 255
 44c:	28 83       	st	Y, r18
 44e:	39 83       	std	Y+1, r19	; 0x01
 450:	4a 83       	std	Y+2, r20	; 0x02
 452:	c1 5a       	subi	r28, 0xA1	; 161
 454:	d0 40       	sbci	r29, 0x00	; 0
 456:	c7 56       	subi	r28, 0x67	; 103
 458:	df 4f       	sbci	r29, 0xFF	; 255
 45a:	48 81       	ld	r20, Y
 45c:	c9 59       	subi	r28, 0x99	; 153
 45e:	d0 40       	sbci	r29, 0x00	; 0
 460:	c6 56       	subi	r28, 0x66	; 102
 462:	df 4f       	sbci	r29, 0xFF	; 255
 464:	58 81       	ld	r21, Y
 466:	ca 59       	subi	r28, 0x9A	; 154
 468:	d0 40       	sbci	r29, 0x00	; 0
 46a:	c5 56       	subi	r28, 0x65	; 101
 46c:	df 4f       	sbci	r29, 0xFF	; 255
 46e:	68 81       	ld	r22, Y
 470:	cb 59       	subi	r28, 0x9B	; 155
 472:	d0 40       	sbci	r29, 0x00	; 0
 474:	fa 01       	movw	r30, r20
 476:	84 91       	lpm	r24, Z
 478:	67 fd       	sbrc	r22, 7
 47a:	80 81       	ld	r24, Z
 47c:	88 23       	and	r24, r24
 47e:	09 f4       	brne	.+2      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 480:	c9 c3       	rjmp	.+1938   	; 0xc14 <__stack+0x3b5>
 482:	cf 57       	subi	r28, 0x7F	; 127
 484:	df 4f       	sbci	r29, 0xFF	; 255
 486:	19 82       	std	Y+1, r1	; 0x01
 488:	18 82       	st	Y, r1
 48a:	c1 58       	subi	r28, 0x81	; 129
 48c:	d0 40       	sbci	r29, 0x00	; 0
 48e:	8f ef       	ldi	r24, 0xFF	; 255
 490:	9f ef       	ldi	r25, 0xFF	; 255
 492:	cd 57       	subi	r28, 0x7D	; 125
 494:	df 4f       	sbci	r29, 0xFF	; 255
 496:	99 83       	std	Y+1, r25	; 0x01
 498:	88 83       	st	Y, r24
 49a:	c3 58       	subi	r28, 0x83	; 131
 49c:	d0 40       	sbci	r29, 0x00	; 0
 49e:	cb 57       	subi	r28, 0x7B	; 123
 4a0:	df 4f       	sbci	r29, 0xFF	; 255
 4a2:	19 82       	std	Y+1, r1	; 0x01
 4a4:	18 82       	st	Y, r1
 4a6:	c5 58       	subi	r28, 0x85	; 133
 4a8:	d0 40       	sbci	r29, 0x00	; 0
 4aa:	a1 e0       	ldi	r26, 0x01	; 1
 4ac:	b0 e0       	ldi	r27, 0x00	; 0
 4ae:	ac 0f       	add	r26, r28
 4b0:	bd 1f       	adc	r27, r29
 4b2:	c9 57       	subi	r28, 0x79	; 121
 4b4:	df 4f       	sbci	r29, 0xFF	; 255
 4b6:	b9 83       	std	Y+1, r27	; 0x01
 4b8:	a8 83       	st	Y, r26
 4ba:	c7 58       	subi	r28, 0x87	; 135
 4bc:	d0 40       	sbci	r29, 0x00	; 0
 4be:	e0 e8       	ldi	r30, 0x80	; 128
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	c7 57       	subi	r28, 0x77	; 119
 4c4:	df 4f       	sbci	r29, 0xFF	; 255
 4c6:	f9 83       	std	Y+1, r31	; 0x01
 4c8:	e8 83       	st	Y, r30
 4ca:	c9 58       	subi	r28, 0x89	; 137
 4cc:	d0 40       	sbci	r29, 0x00	; 0
 4ce:	ca 01       	movw	r24, r20
 4d0:	a6 2f       	mov	r26, r22
 4d2:	e1 2c       	mov	r14, r1
 4d4:	f1 2c       	mov	r15, r1
 4d6:	fc 01       	movw	r30, r24
 4d8:	24 91       	lpm	r18, Z
 4da:	a7 fd       	sbrc	r26, 7
 4dc:	20 81       	ld	r18, Z
 4de:	21 11       	cpse	r18, r1
 4e0:	1b c0       	rjmp	.+54     	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 4e2:	e1 14       	cp	r14, r1
 4e4:	f1 04       	cpc	r15, r1
 4e6:	01 f1       	breq	.+64     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 4e8:	97 01       	movw	r18, r14
 4ea:	c4 01       	movw	r24, r8
 4ec:	0e 94 42 1a 	call	0x3484	; 0x3484 <__out>
 4f0:	c7 56       	subi	r28, 0x67	; 103
 4f2:	df 4f       	sbci	r29, 0xFF	; 255
 4f4:	88 81       	ld	r24, Y
 4f6:	99 81       	ldd	r25, Y+1	; 0x01
 4f8:	aa 81       	ldd	r26, Y+2	; 0x02
 4fa:	c9 59       	subi	r28, 0x99	; 153
 4fc:	d0 40       	sbci	r29, 0x00	; 0
 4fe:	8e 0d       	add	r24, r14
 500:	9f 1d       	adc	r25, r15
 502:	a1 1d       	adc	r26, r1
 504:	f7 fc       	sbrc	r15, 7
 506:	aa 95       	dec	r26
 508:	c7 56       	subi	r28, 0x67	; 103
 50a:	df 4f       	sbci	r29, 0xFF	; 255
 50c:	88 83       	st	Y, r24
 50e:	99 83       	std	Y+1, r25	; 0x01
 510:	aa 83       	std	Y+2, r26	; 0x02
 512:	c9 59       	subi	r28, 0x99	; 153
 514:	d0 40       	sbci	r29, 0x00	; 0
 516:	08 c0       	rjmp	.+16     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 518:	01 96       	adiw	r24, 0x01	; 1
 51a:	a1 1d       	adc	r26, r1
 51c:	25 32       	cpi	r18, 0x25	; 37
 51e:	09 f3       	breq	.-62     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 520:	ff ef       	ldi	r31, 0xFF	; 255
 522:	ef 1a       	sub	r14, r31
 524:	ff 0a       	sbc	r15, r31
 526:	d7 cf       	rjmp	.-82     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 528:	c7 56       	subi	r28, 0x67	; 103
 52a:	df 4f       	sbci	r29, 0xFF	; 255
 52c:	88 81       	ld	r24, Y
 52e:	99 81       	ldd	r25, Y+1	; 0x01
 530:	aa 81       	ldd	r26, Y+2	; 0x02
 532:	c9 59       	subi	r28, 0x99	; 153
 534:	d0 40       	sbci	r29, 0x00	; 0
 536:	fc 01       	movw	r30, r24
 538:	24 91       	lpm	r18, Z
 53a:	a7 fd       	sbrc	r26, 7
 53c:	20 81       	ld	r18, Z
 53e:	25 32       	cpi	r18, 0x25	; 37
 540:	09 f0       	breq	.+2      	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
 542:	56 c3       	rjmp	.+1708   	; 0xbf0 <__stack+0x391>
 544:	9c 01       	movw	r18, r24
 546:	4a 2f       	mov	r20, r26
 548:	2f 5f       	subi	r18, 0xFF	; 255
 54a:	3f 4f       	sbci	r19, 0xFF	; 255
 54c:	4f 4f       	sbci	r20, 0xFF	; 255
 54e:	c2 56       	subi	r28, 0x62	; 98
 550:	df 4f       	sbci	r29, 0xFF	; 255
 552:	28 83       	st	Y, r18
 554:	39 83       	std	Y+1, r19	; 0x01
 556:	4a 83       	std	Y+2, r20	; 0x02
 558:	ce 59       	subi	r28, 0x9E	; 158
 55a:	d0 40       	sbci	r29, 0x00	; 0
 55c:	c7 56       	subi	r28, 0x67	; 103
 55e:	df 4f       	sbci	r29, 0xFF	; 255
 560:	28 83       	st	Y, r18
 562:	39 83       	std	Y+1, r19	; 0x01
 564:	4a 83       	std	Y+2, r20	; 0x02
 566:	c9 59       	subi	r28, 0x99	; 153
 568:	d0 40       	sbci	r29, 0x00	; 0
 56a:	c7 56       	subi	r28, 0x67	; 103
 56c:	df 4f       	sbci	r29, 0xFF	; 255
 56e:	88 81       	ld	r24, Y
 570:	99 81       	ldd	r25, Y+1	; 0x01
 572:	aa 81       	ldd	r26, Y+2	; 0x02
 574:	c9 59       	subi	r28, 0x99	; 153
 576:	d0 40       	sbci	r29, 0x00	; 0
 578:	fc 01       	movw	r30, r24
 57a:	24 91       	lpm	r18, Z
 57c:	a7 fd       	sbrc	r26, 7
 57e:	20 81       	ld	r18, Z
 580:	2b 32       	cpi	r18, 0x2B	; 43
 582:	41 f4       	brne	.+16     	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
 584:	cf 57       	subi	r28, 0x7F	; 127
 586:	df 4f       	sbci	r29, 0xFF	; 255
 588:	28 81       	ld	r18, Y
 58a:	39 81       	ldd	r19, Y+1	; 0x01
 58c:	c1 58       	subi	r28, 0x81	; 129
 58e:	d0 40       	sbci	r29, 0x00	; 0
 590:	24 60       	ori	r18, 0x04	; 4
 592:	0b c0       	rjmp	.+22     	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
 594:	2c 32       	cpi	r18, 0x2C	; 44
 596:	cc f0       	brlt	.+50     	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
 598:	2d 32       	cpi	r18, 0x2D	; 45
 59a:	59 f5       	brne	.+86     	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
 59c:	cf 57       	subi	r28, 0x7F	; 127
 59e:	df 4f       	sbci	r29, 0xFF	; 255
 5a0:	28 81       	ld	r18, Y
 5a2:	39 81       	ldd	r19, Y+1	; 0x01
 5a4:	c1 58       	subi	r28, 0x81	; 129
 5a6:	d0 40       	sbci	r29, 0x00	; 0
 5a8:	21 60       	ori	r18, 0x01	; 1
 5aa:	cf 57       	subi	r28, 0x7F	; 127
 5ac:	df 4f       	sbci	r29, 0xFF	; 255
 5ae:	39 83       	std	Y+1, r19	; 0x01
 5b0:	28 83       	st	Y, r18
 5b2:	c1 58       	subi	r28, 0x81	; 129
 5b4:	d0 40       	sbci	r29, 0x00	; 0
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	a1 1d       	adc	r26, r1
 5ba:	c7 56       	subi	r28, 0x67	; 103
 5bc:	df 4f       	sbci	r29, 0xFF	; 255
 5be:	88 83       	st	Y, r24
 5c0:	99 83       	std	Y+1, r25	; 0x01
 5c2:	aa 83       	std	Y+2, r26	; 0x02
 5c4:	c9 59       	subi	r28, 0x99	; 153
 5c6:	d0 40       	sbci	r29, 0x00	; 0
 5c8:	d0 cf       	rjmp	.-96     	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
 5ca:	20 32       	cpi	r18, 0x20	; 32
 5cc:	41 f4       	brne	.+16     	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
 5ce:	cf 57       	subi	r28, 0x7F	; 127
 5d0:	df 4f       	sbci	r29, 0xFF	; 255
 5d2:	28 81       	ld	r18, Y
 5d4:	39 81       	ldd	r19, Y+1	; 0x01
 5d6:	c1 58       	subi	r28, 0x81	; 129
 5d8:	d0 40       	sbci	r29, 0x00	; 0
 5da:	28 60       	ori	r18, 0x08	; 8
 5dc:	e6 cf       	rjmp	.-52     	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
 5de:	23 32       	cpi	r18, 0x23	; 35
 5e0:	91 f4       	brne	.+36     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
 5e2:	cf 57       	subi	r28, 0x7F	; 127
 5e4:	df 4f       	sbci	r29, 0xFF	; 255
 5e6:	28 81       	ld	r18, Y
 5e8:	39 81       	ldd	r19, Y+1	; 0x01
 5ea:	c1 58       	subi	r28, 0x81	; 129
 5ec:	d0 40       	sbci	r29, 0x00	; 0
 5ee:	20 61       	ori	r18, 0x10	; 16
 5f0:	dc cf       	rjmp	.-72     	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
 5f2:	20 33       	cpi	r18, 0x30	; 48
 5f4:	41 f4       	brne	.+16     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
 5f6:	cf 57       	subi	r28, 0x7F	; 127
 5f8:	df 4f       	sbci	r29, 0xFF	; 255
 5fa:	28 81       	ld	r18, Y
 5fc:	39 81       	ldd	r19, Y+1	; 0x01
 5fe:	c1 58       	subi	r28, 0x81	; 129
 600:	d0 40       	sbci	r29, 0x00	; 0
 602:	22 60       	ori	r18, 0x02	; 2
 604:	d2 cf       	rjmp	.-92     	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
 606:	2a 32       	cpi	r18, 0x2A	; 42
 608:	99 f5       	brne	.+102    	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
 60a:	01 96       	adiw	r24, 0x01	; 1
 60c:	a1 1d       	adc	r26, r1
 60e:	c7 56       	subi	r28, 0x67	; 103
 610:	df 4f       	sbci	r29, 0xFF	; 255
 612:	88 83       	st	Y, r24
 614:	99 83       	std	Y+1, r25	; 0x01
 616:	aa 83       	std	Y+2, r26	; 0x02
 618:	c9 59       	subi	r28, 0x99	; 153
 61a:	d0 40       	sbci	r29, 0x00	; 0
 61c:	d5 01       	movw	r26, r10
 61e:	ed 91       	ld	r30, X+
 620:	fc 91       	ld	r31, X
 622:	11 97       	sbiw	r26, 0x01	; 1
 624:	cf 01       	movw	r24, r30
 626:	02 96       	adiw	r24, 0x02	; 2
 628:	8d 93       	st	X+, r24
 62a:	9c 93       	st	X, r25
 62c:	80 81       	ld	r24, Z
 62e:	91 81       	ldd	r25, Z+1	; 0x01
 630:	cb 57       	subi	r28, 0x7B	; 123
 632:	df 4f       	sbci	r29, 0xFF	; 255
 634:	99 83       	std	Y+1, r25	; 0x01
 636:	88 83       	st	Y, r24
 638:	c5 58       	subi	r28, 0x85	; 133
 63a:	d0 40       	sbci	r29, 0x00	; 0
 63c:	97 ff       	sbrs	r25, 7
 63e:	3e c0       	rjmp	.+124    	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
 640:	cf 57       	subi	r28, 0x7F	; 127
 642:	df 4f       	sbci	r29, 0xFF	; 255
 644:	28 81       	ld	r18, Y
 646:	39 81       	ldd	r19, Y+1	; 0x01
 648:	c1 58       	subi	r28, 0x81	; 129
 64a:	d0 40       	sbci	r29, 0x00	; 0
 64c:	b1 e0       	ldi	r27, 0x01	; 1
 64e:	2b 27       	eor	r18, r27
 650:	cf 57       	subi	r28, 0x7F	; 127
 652:	df 4f       	sbci	r29, 0xFF	; 255
 654:	39 83       	std	Y+1, r19	; 0x01
 656:	28 83       	st	Y, r18
 658:	c1 58       	subi	r28, 0x81	; 129
 65a:	d0 40       	sbci	r29, 0x00	; 0
 65c:	91 95       	neg	r25
 65e:	81 95       	neg	r24
 660:	91 09       	sbc	r25, r1
 662:	cb 57       	subi	r28, 0x7B	; 123
 664:	df 4f       	sbci	r29, 0xFF	; 255
 666:	99 83       	std	Y+1, r25	; 0x01
 668:	88 83       	st	Y, r24
 66a:	c5 58       	subi	r28, 0x85	; 133
 66c:	d0 40       	sbci	r29, 0x00	; 0
 66e:	26 c0       	rjmp	.+76     	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
 670:	bc 01       	movw	r22, r24
 672:	8a 2f       	mov	r24, r26
 674:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <atoi>
 678:	cb 57       	subi	r28, 0x7B	; 123
 67a:	df 4f       	sbci	r29, 0xFF	; 255
 67c:	99 83       	std	Y+1, r25	; 0x01
 67e:	88 83       	st	Y, r24
 680:	c5 58       	subi	r28, 0x85	; 133
 682:	d0 40       	sbci	r29, 0x00	; 0
 684:	c7 56       	subi	r28, 0x67	; 103
 686:	df 4f       	sbci	r29, 0xFF	; 255
 688:	28 81       	ld	r18, Y
 68a:	39 81       	ldd	r19, Y+1	; 0x01
 68c:	4a 81       	ldd	r20, Y+2	; 0x02
 68e:	c9 59       	subi	r28, 0x99	; 153
 690:	d0 40       	sbci	r29, 0x00	; 0
 692:	f9 01       	movw	r30, r18
 694:	84 91       	lpm	r24, Z
 696:	47 fd       	sbrc	r20, 7
 698:	80 81       	ld	r24, Z
 69a:	08 2e       	mov	r0, r24
 69c:	00 0c       	add	r0, r0
 69e:	99 0b       	sbc	r25, r25
 6a0:	c0 97       	sbiw	r24, 0x30	; 48
 6a2:	0a 97       	sbiw	r24, 0x0a	; 10
 6a4:	58 f4       	brcc	.+22     	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
 6a6:	2f 5f       	subi	r18, 0xFF	; 255
 6a8:	3f 4f       	sbci	r19, 0xFF	; 255
 6aa:	4f 4f       	sbci	r20, 0xFF	; 255
 6ac:	c7 56       	subi	r28, 0x67	; 103
 6ae:	df 4f       	sbci	r29, 0xFF	; 255
 6b0:	28 83       	st	Y, r18
 6b2:	39 83       	std	Y+1, r19	; 0x01
 6b4:	4a 83       	std	Y+2, r20	; 0x02
 6b6:	c9 59       	subi	r28, 0x99	; 153
 6b8:	d0 40       	sbci	r29, 0x00	; 0
 6ba:	e4 cf       	rjmp	.-56     	; 0x684 <__EEPROM_REGION_LENGTH__+0x284>
 6bc:	cf 57       	subi	r28, 0x7F	; 127
 6be:	df 4f       	sbci	r29, 0xFF	; 255
 6c0:	88 81       	ld	r24, Y
 6c2:	99 81       	ldd	r25, Y+1	; 0x01
 6c4:	c1 58       	subi	r28, 0x81	; 129
 6c6:	d0 40       	sbci	r29, 0x00	; 0
 6c8:	80 ff       	sbrs	r24, 0
 6ca:	07 c0       	rjmp	.+14     	; 0x6da <__EEPROM_REGION_LENGTH__+0x2da>
 6cc:	8d 7f       	andi	r24, 0xFD	; 253
 6ce:	cf 57       	subi	r28, 0x7F	; 127
 6d0:	df 4f       	sbci	r29, 0xFF	; 255
 6d2:	99 83       	std	Y+1, r25	; 0x01
 6d4:	88 83       	st	Y, r24
 6d6:	c1 58       	subi	r28, 0x81	; 129
 6d8:	d0 40       	sbci	r29, 0x00	; 0
 6da:	c7 56       	subi	r28, 0x67	; 103
 6dc:	df 4f       	sbci	r29, 0xFF	; 255
 6de:	88 81       	ld	r24, Y
 6e0:	99 81       	ldd	r25, Y+1	; 0x01
 6e2:	aa 81       	ldd	r26, Y+2	; 0x02
 6e4:	c9 59       	subi	r28, 0x99	; 153
 6e6:	d0 40       	sbci	r29, 0x00	; 0
 6e8:	fc 01       	movw	r30, r24
 6ea:	24 91       	lpm	r18, Z
 6ec:	a7 fd       	sbrc	r26, 7
 6ee:	20 81       	ld	r18, Z
 6f0:	2e 32       	cpi	r18, 0x2E	; 46
 6f2:	09 f0       	breq	.+2      	; 0x6f6 <__EEPROM_REGION_LENGTH__+0x2f6>
 6f4:	58 c0       	rjmp	.+176    	; 0x7a6 <__EEPROM_REGION_LENGTH__+0x3a6>
 6f6:	cd 57       	subi	r28, 0x7D	; 125
 6f8:	df 4f       	sbci	r29, 0xFF	; 255
 6fa:	19 82       	std	Y+1, r1	; 0x01
 6fc:	18 82       	st	Y, r1
 6fe:	c3 58       	subi	r28, 0x83	; 131
 700:	d0 40       	sbci	r29, 0x00	; 0
 702:	9c 01       	movw	r18, r24
 704:	4a 2f       	mov	r20, r26
 706:	2f 5f       	subi	r18, 0xFF	; 255
 708:	3f 4f       	sbci	r19, 0xFF	; 255
 70a:	4f 4f       	sbci	r20, 0xFF	; 255
 70c:	c7 56       	subi	r28, 0x67	; 103
 70e:	df 4f       	sbci	r29, 0xFF	; 255
 710:	28 83       	st	Y, r18
 712:	39 83       	std	Y+1, r19	; 0x01
 714:	4a 83       	std	Y+2, r20	; 0x02
 716:	c9 59       	subi	r28, 0x99	; 153
 718:	d0 40       	sbci	r29, 0x00	; 0
 71a:	f9 01       	movw	r30, r18
 71c:	54 91       	lpm	r21, Z
 71e:	47 fd       	sbrc	r20, 7
 720:	50 81       	ld	r21, Z
 722:	5a 32       	cpi	r21, 0x2A	; 42
 724:	d1 f4       	brne	.+52     	; 0x75a <__EEPROM_REGION_LENGTH__+0x35a>
 726:	02 96       	adiw	r24, 0x02	; 2
 728:	a1 1d       	adc	r26, r1
 72a:	c7 56       	subi	r28, 0x67	; 103
 72c:	df 4f       	sbci	r29, 0xFF	; 255
 72e:	88 83       	st	Y, r24
 730:	99 83       	std	Y+1, r25	; 0x01
 732:	aa 83       	std	Y+2, r26	; 0x02
 734:	c9 59       	subi	r28, 0x99	; 153
 736:	d0 40       	sbci	r29, 0x00	; 0
 738:	d5 01       	movw	r26, r10
 73a:	ed 91       	ld	r30, X+
 73c:	fc 91       	ld	r31, X
 73e:	11 97       	sbiw	r26, 0x01	; 1
 740:	cf 01       	movw	r24, r30
 742:	02 96       	adiw	r24, 0x02	; 2
 744:	8d 93       	st	X+, r24
 746:	9c 93       	st	X, r25
 748:	80 81       	ld	r24, Z
 74a:	91 81       	ldd	r25, Z+1	; 0x01
 74c:	cd 57       	subi	r28, 0x7D	; 125
 74e:	df 4f       	sbci	r29, 0xFF	; 255
 750:	99 83       	std	Y+1, r25	; 0x01
 752:	88 83       	st	Y, r24
 754:	c3 58       	subi	r28, 0x83	; 131
 756:	d0 40       	sbci	r29, 0x00	; 0
 758:	26 c0       	rjmp	.+76     	; 0x7a6 <__EEPROM_REGION_LENGTH__+0x3a6>
 75a:	84 2f       	mov	r24, r20
 75c:	b9 01       	movw	r22, r18
 75e:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <atoi>
 762:	cd 57       	subi	r28, 0x7D	; 125
 764:	df 4f       	sbci	r29, 0xFF	; 255
 766:	99 83       	std	Y+1, r25	; 0x01
 768:	88 83       	st	Y, r24
 76a:	c3 58       	subi	r28, 0x83	; 131
 76c:	d0 40       	sbci	r29, 0x00	; 0
 76e:	c7 56       	subi	r28, 0x67	; 103
 770:	df 4f       	sbci	r29, 0xFF	; 255
 772:	28 81       	ld	r18, Y
 774:	39 81       	ldd	r19, Y+1	; 0x01
 776:	4a 81       	ldd	r20, Y+2	; 0x02
 778:	c9 59       	subi	r28, 0x99	; 153
 77a:	d0 40       	sbci	r29, 0x00	; 0
 77c:	f9 01       	movw	r30, r18
 77e:	84 91       	lpm	r24, Z
 780:	47 fd       	sbrc	r20, 7
 782:	80 81       	ld	r24, Z
 784:	08 2e       	mov	r0, r24
 786:	00 0c       	add	r0, r0
 788:	99 0b       	sbc	r25, r25
 78a:	c0 97       	sbiw	r24, 0x30	; 48
 78c:	0a 97       	sbiw	r24, 0x0a	; 10
 78e:	58 f4       	brcc	.+22     	; 0x7a6 <__EEPROM_REGION_LENGTH__+0x3a6>
 790:	2f 5f       	subi	r18, 0xFF	; 255
 792:	3f 4f       	sbci	r19, 0xFF	; 255
 794:	4f 4f       	sbci	r20, 0xFF	; 255
 796:	c7 56       	subi	r28, 0x67	; 103
 798:	df 4f       	sbci	r29, 0xFF	; 255
 79a:	28 83       	st	Y, r18
 79c:	39 83       	std	Y+1, r19	; 0x01
 79e:	4a 83       	std	Y+2, r20	; 0x02
 7a0:	c9 59       	subi	r28, 0x99	; 153
 7a2:	d0 40       	sbci	r29, 0x00	; 0
 7a4:	e4 cf       	rjmp	.-56     	; 0x76e <__EEPROM_REGION_LENGTH__+0x36e>
 7a6:	ce 01       	movw	r24, r28
 7a8:	87 56       	subi	r24, 0x67	; 103
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__fmt_state>
 7b0:	18 2f       	mov	r17, r24
 7b2:	c7 56       	subi	r28, 0x67	; 103
 7b4:	df 4f       	sbci	r29, 0xFF	; 255
 7b6:	28 81       	ld	r18, Y
 7b8:	c9 59       	subi	r28, 0x99	; 153
 7ba:	d0 40       	sbci	r29, 0x00	; 0
 7bc:	c6 56       	subi	r28, 0x66	; 102
 7be:	df 4f       	sbci	r29, 0xFF	; 255
 7c0:	88 81       	ld	r24, Y
 7c2:	ca 59       	subi	r28, 0x9A	; 154
 7c4:	d0 40       	sbci	r29, 0x00	; 0
 7c6:	c5 56       	subi	r28, 0x65	; 101
 7c8:	df 4f       	sbci	r29, 0xFF	; 255
 7ca:	98 81       	ld	r25, Y
 7cc:	cb 59       	subi	r28, 0x9B	; 155
 7ce:	d0 40       	sbci	r29, 0x00	; 0
 7d0:	e2 2f       	mov	r30, r18
 7d2:	f8 2f       	mov	r31, r24
 7d4:	84 91       	lpm	r24, Z
 7d6:	97 fd       	sbrc	r25, 7
 7d8:	80 81       	ld	r24, Z
 7da:	08 2e       	mov	r0, r24
 7dc:	00 0c       	add	r0, r0
 7de:	99 0b       	sbc	r25, r25
 7e0:	0e 94 2a 20 	call	0x4054	; 0x4054 <tolower>
 7e4:	89 36       	cpi	r24, 0x69	; 105
 7e6:	91 05       	cpc	r25, r1
 7e8:	09 f4       	brne	.+2      	; 0x7ec <__EEPROM_REGION_LENGTH__+0x3ec>
 7ea:	5a c0       	rjmp	.+180    	; 0x8a0 <__stack+0x41>
 7ec:	b4 f4       	brge	.+44     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7ee:	83 36       	cpi	r24, 0x63	; 99
 7f0:	91 05       	cpc	r25, r1
 7f2:	09 f4       	brne	.+2      	; 0x7f6 <__EEPROM_REGION_LENGTH__+0x3f6>
 7f4:	66 c1       	rjmp	.+716    	; 0xac2 <__stack+0x263>
 7f6:	44 f4       	brge	.+16     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7f8:	85 32       	cpi	r24, 0x25	; 37
 7fa:	91 05       	cpc	r25, r1
 7fc:	09 f4       	brne	.+2      	; 0x800 <__DATA_REGION_LENGTH__>
 7fe:	a1 c1       	rjmp	.+834    	; 0xb42 <__stack+0x2e3>
 800:	81 36       	cpi	r24, 0x61	; 97
 802:	91 05       	cpc	r25, r1
 804:	29 f1       	breq	.+74     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 806:	b3 c1       	rjmp	.+870    	; 0xb6e <__stack+0x30f>
 808:	84 36       	cpi	r24, 0x64	; 100
 80a:	91 05       	cpc	r25, r1
 80c:	09 f4       	brne	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80e:	48 c0       	rjmp	.+144    	; 0x8a0 <__stack+0x41>
 810:	88 36       	cpi	r24, 0x68	; 104
 812:	91 05       	cpc	r25, r1
 814:	0c f4       	brge	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 816:	2d c1       	rjmp	.+602    	; 0xa72 <__stack+0x213>
 818:	aa c1       	rjmp	.+852    	; 0xb6e <__stack+0x30f>
 81a:	80 37       	cpi	r24, 0x70	; 112
 81c:	91 05       	cpc	r25, r1
 81e:	09 f4       	brne	.+2      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 820:	cb c0       	rjmp	.+406    	; 0x9b8 <__stack+0x159>
 822:	4c f4       	brge	.+18     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 824:	8e 36       	cpi	r24, 0x6E	; 110
 826:	91 05       	cpc	r25, r1
 828:	09 f4       	brne	.+2      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 82a:	19 c1       	rjmp	.+562    	; 0xa5e <__stack+0x1ff>
 82c:	8f 36       	cpi	r24, 0x6F	; 111
 82e:	91 05       	cpc	r25, r1
 830:	09 f4       	brne	.+2      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 832:	7c c0       	rjmp	.+248    	; 0x92c <__stack+0xcd>
 834:	9c c1       	rjmp	.+824    	; 0xb6e <__stack+0x30f>
 836:	85 37       	cpi	r24, 0x75	; 117
 838:	91 05       	cpc	r25, r1
 83a:	09 f4       	brne	.+2      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 83c:	54 c0       	rjmp	.+168    	; 0x8e6 <__stack+0x87>
 83e:	88 37       	cpi	r24, 0x78	; 120
 840:	91 05       	cpc	r25, r1
 842:	09 f4       	brne	.+2      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 844:	96 c0       	rjmp	.+300    	; 0x972 <__stack+0x113>
 846:	83 37       	cpi	r24, 0x73	; 115
 848:	91 05       	cpc	r25, r1
 84a:	09 f0       	breq	.+2      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 84c:	90 c1       	rjmp	.+800    	; 0xb6e <__stack+0x30f>
 84e:	58 c1       	rjmp	.+688    	; 0xb00 <__stack+0x2a1>
 850:	61 2f       	mov	r22, r17
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	a5 01       	movw	r20, r10
 856:	c6 01       	movw	r24, r12
 858:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__pop_float>
 85c:	89 2b       	or	r24, r25
 85e:	09 f4       	brne	.+2      	; 0x862 <__stack+0x3>
 860:	b7 c1       	rjmp	.+878    	; 0xbd0 <__stack+0x371>
 862:	c7 56       	subi	r28, 0x67	; 103
 864:	df 4f       	sbci	r29, 0xFF	; 255
 866:	88 81       	ld	r24, Y
 868:	99 81       	ldd	r25, Y+1	; 0x01
 86a:	aa 81       	ldd	r26, Y+2	; 0x02
 86c:	c9 59       	subi	r28, 0x99	; 153
 86e:	d0 40       	sbci	r29, 0x00	; 0
 870:	9c 01       	movw	r18, r24
 872:	4a 2f       	mov	r20, r26
 874:	2f 5f       	subi	r18, 0xFF	; 255
 876:	3f 4f       	sbci	r19, 0xFF	; 255
 878:	4f 4f       	sbci	r20, 0xFF	; 255
 87a:	c7 56       	subi	r28, 0x67	; 103
 87c:	df 4f       	sbci	r29, 0xFF	; 255
 87e:	28 83       	st	Y, r18
 880:	39 83       	std	Y+1, r19	; 0x01
 882:	4a 83       	std	Y+2, r20	; 0x02
 884:	c9 59       	subi	r28, 0x99	; 153
 886:	d0 40       	sbci	r29, 0x00	; 0
 888:	fc 01       	movw	r30, r24
 88a:	24 91       	lpm	r18, Z
 88c:	a7 fd       	sbrc	r26, 7
 88e:	20 81       	ld	r18, Z
 890:	a6 01       	movw	r20, r12
 892:	be 01       	movw	r22, r28
 894:	6f 57       	subi	r22, 0x7F	; 127
 896:	7f 4f       	sbci	r23, 0xFF	; 255
 898:	c4 01       	movw	r24, r8
 89a:	0e 94 8f 20 	call	0x411e	; 0x411e <__fmt_a>
 89e:	95 c1       	rjmp	.+810    	; 0xbca <__stack+0x36b>
 8a0:	61 2f       	mov	r22, r17
 8a2:	70 e0       	ldi	r23, 0x00	; 0
 8a4:	95 01       	movw	r18, r10
 8a6:	41 e0       	ldi	r20, 0x01	; 1
 8a8:	50 e0       	ldi	r21, 0x00	; 0
 8aa:	c6 01       	movw	r24, r12
 8ac:	0e 94 9e 0b 	call	0x173c	; 0x173c <__pop_int>
 8b0:	89 2b       	or	r24, r25
 8b2:	09 f4       	brne	.+2      	; 0x8b6 <__stack+0x57>
 8b4:	8d c1       	rjmp	.+794    	; 0xbd0 <__stack+0x371>
 8b6:	c7 56       	subi	r28, 0x67	; 103
 8b8:	df 4f       	sbci	r29, 0xFF	; 255
 8ba:	88 81       	ld	r24, Y
 8bc:	99 81       	ldd	r25, Y+1	; 0x01
 8be:	aa 81       	ldd	r26, Y+2	; 0x02
 8c0:	c9 59       	subi	r28, 0x99	; 153
 8c2:	d0 40       	sbci	r29, 0x00	; 0
 8c4:	01 96       	adiw	r24, 0x01	; 1
 8c6:	a1 1d       	adc	r26, r1
 8c8:	c7 56       	subi	r28, 0x67	; 103
 8ca:	df 4f       	sbci	r29, 0xFF	; 255
 8cc:	88 83       	st	Y, r24
 8ce:	99 83       	std	Y+1, r25	; 0x01
 8d0:	aa 83       	std	Y+2, r26	; 0x02
 8d2:	c9 59       	subi	r28, 0x99	; 153
 8d4:	d0 40       	sbci	r29, 0x00	; 0
 8d6:	a6 01       	movw	r20, r12
 8d8:	be 01       	movw	r22, r28
 8da:	6f 57       	subi	r22, 0x7F	; 127
 8dc:	7f 4f       	sbci	r23, 0xFF	; 255
 8de:	c4 01       	movw	r24, r8
 8e0:	0e 94 22 0a 	call	0x1444	; 0x1444 <__fmt_d>
 8e4:	72 c1       	rjmp	.+740    	; 0xbca <__stack+0x36b>
 8e6:	61 2f       	mov	r22, r17
 8e8:	70 e0       	ldi	r23, 0x00	; 0
 8ea:	95 01       	movw	r18, r10
 8ec:	40 e0       	ldi	r20, 0x00	; 0
 8ee:	50 e0       	ldi	r21, 0x00	; 0
 8f0:	c6 01       	movw	r24, r12
 8f2:	0e 94 9e 0b 	call	0x173c	; 0x173c <__pop_int>
 8f6:	89 2b       	or	r24, r25
 8f8:	09 f4       	brne	.+2      	; 0x8fc <__stack+0x9d>
 8fa:	6a c1       	rjmp	.+724    	; 0xbd0 <__stack+0x371>
 8fc:	c7 56       	subi	r28, 0x67	; 103
 8fe:	df 4f       	sbci	r29, 0xFF	; 255
 900:	88 81       	ld	r24, Y
 902:	99 81       	ldd	r25, Y+1	; 0x01
 904:	aa 81       	ldd	r26, Y+2	; 0x02
 906:	c9 59       	subi	r28, 0x99	; 153
 908:	d0 40       	sbci	r29, 0x00	; 0
 90a:	01 96       	adiw	r24, 0x01	; 1
 90c:	a1 1d       	adc	r26, r1
 90e:	c7 56       	subi	r28, 0x67	; 103
 910:	df 4f       	sbci	r29, 0xFF	; 255
 912:	88 83       	st	Y, r24
 914:	99 83       	std	Y+1, r25	; 0x01
 916:	aa 83       	std	Y+2, r26	; 0x02
 918:	c9 59       	subi	r28, 0x99	; 153
 91a:	d0 40       	sbci	r29, 0x00	; 0
 91c:	a6 01       	movw	r20, r12
 91e:	be 01       	movw	r22, r28
 920:	6f 57       	subi	r22, 0x7F	; 127
 922:	7f 4f       	sbci	r23, 0xFF	; 255
 924:	c4 01       	movw	r24, r8
 926:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__fmt_u>
 92a:	4f c1       	rjmp	.+670    	; 0xbca <__stack+0x36b>
 92c:	61 2f       	mov	r22, r17
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	95 01       	movw	r18, r10
 932:	40 e0       	ldi	r20, 0x00	; 0
 934:	50 e0       	ldi	r21, 0x00	; 0
 936:	c6 01       	movw	r24, r12
 938:	0e 94 9e 0b 	call	0x173c	; 0x173c <__pop_int>
 93c:	89 2b       	or	r24, r25
 93e:	09 f4       	brne	.+2      	; 0x942 <__stack+0xe3>
 940:	47 c1       	rjmp	.+654    	; 0xbd0 <__stack+0x371>
 942:	c7 56       	subi	r28, 0x67	; 103
 944:	df 4f       	sbci	r29, 0xFF	; 255
 946:	88 81       	ld	r24, Y
 948:	99 81       	ldd	r25, Y+1	; 0x01
 94a:	aa 81       	ldd	r26, Y+2	; 0x02
 94c:	c9 59       	subi	r28, 0x99	; 153
 94e:	d0 40       	sbci	r29, 0x00	; 0
 950:	01 96       	adiw	r24, 0x01	; 1
 952:	a1 1d       	adc	r26, r1
 954:	c7 56       	subi	r28, 0x67	; 103
 956:	df 4f       	sbci	r29, 0xFF	; 255
 958:	88 83       	st	Y, r24
 95a:	99 83       	std	Y+1, r25	; 0x01
 95c:	aa 83       	std	Y+2, r26	; 0x02
 95e:	c9 59       	subi	r28, 0x99	; 153
 960:	d0 40       	sbci	r29, 0x00	; 0
 962:	a6 01       	movw	r20, r12
 964:	be 01       	movw	r22, r28
 966:	6f 57       	subi	r22, 0x7F	; 127
 968:	7f 4f       	sbci	r23, 0xFF	; 255
 96a:	c4 01       	movw	r24, r8
 96c:	0e 94 4d 10 	call	0x209a	; 0x209a <__fmt_o>
 970:	2c c1       	rjmp	.+600    	; 0xbca <__stack+0x36b>
 972:	61 2f       	mov	r22, r17
 974:	70 e0       	ldi	r23, 0x00	; 0
 976:	95 01       	movw	r18, r10
 978:	40 e0       	ldi	r20, 0x00	; 0
 97a:	50 e0       	ldi	r21, 0x00	; 0
 97c:	c6 01       	movw	r24, r12
 97e:	0e 94 9e 0b 	call	0x173c	; 0x173c <__pop_int>
 982:	89 2b       	or	r24, r25
 984:	09 f4       	brne	.+2      	; 0x988 <__stack+0x129>
 986:	24 c1       	rjmp	.+584    	; 0xbd0 <__stack+0x371>
 988:	c7 56       	subi	r28, 0x67	; 103
 98a:	df 4f       	sbci	r29, 0xFF	; 255
 98c:	88 81       	ld	r24, Y
 98e:	99 81       	ldd	r25, Y+1	; 0x01
 990:	aa 81       	ldd	r26, Y+2	; 0x02
 992:	c9 59       	subi	r28, 0x99	; 153
 994:	d0 40       	sbci	r29, 0x00	; 0
 996:	9c 01       	movw	r18, r24
 998:	4a 2f       	mov	r20, r26
 99a:	2f 5f       	subi	r18, 0xFF	; 255
 99c:	3f 4f       	sbci	r19, 0xFF	; 255
 99e:	4f 4f       	sbci	r20, 0xFF	; 255
 9a0:	c7 56       	subi	r28, 0x67	; 103
 9a2:	df 4f       	sbci	r29, 0xFF	; 255
 9a4:	28 83       	st	Y, r18
 9a6:	39 83       	std	Y+1, r19	; 0x01
 9a8:	4a 83       	std	Y+2, r20	; 0x02
 9aa:	c9 59       	subi	r28, 0x99	; 153
 9ac:	d0 40       	sbci	r29, 0x00	; 0
 9ae:	fc 01       	movw	r30, r24
 9b0:	24 91       	lpm	r18, Z
 9b2:	a7 fd       	sbrc	r26, 7
 9b4:	20 81       	ld	r18, Z
 9b6:	4b c0       	rjmp	.+150    	; 0xa4e <__stack+0x1ef>
 9b8:	95 01       	movw	r18, r10
 9ba:	40 e0       	ldi	r20, 0x00	; 0
 9bc:	50 e0       	ldi	r21, 0x00	; 0
 9be:	60 ef       	ldi	r22, 0xF0	; 240
 9c0:	70 e0       	ldi	r23, 0x00	; 0
 9c2:	c6 01       	movw	r24, r12
 9c4:	0e 94 9e 0b 	call	0x173c	; 0x173c <__pop_int>
 9c8:	89 2b       	or	r24, r25
 9ca:	09 f4       	brne	.+2      	; 0x9ce <__stack+0x16f>
 9cc:	01 c1       	rjmp	.+514    	; 0xbd0 <__stack+0x371>
 9ce:	c7 56       	subi	r28, 0x67	; 103
 9d0:	df 4f       	sbci	r29, 0xFF	; 255
 9d2:	88 81       	ld	r24, Y
 9d4:	99 81       	ldd	r25, Y+1	; 0x01
 9d6:	aa 81       	ldd	r26, Y+2	; 0x02
 9d8:	c9 59       	subi	r28, 0x99	; 153
 9da:	d0 40       	sbci	r29, 0x00	; 0
 9dc:	01 96       	adiw	r24, 0x01	; 1
 9de:	a1 1d       	adc	r26, r1
 9e0:	c7 56       	subi	r28, 0x67	; 103
 9e2:	df 4f       	sbci	r29, 0xFF	; 255
 9e4:	88 83       	st	Y, r24
 9e6:	99 83       	std	Y+1, r25	; 0x01
 9e8:	aa 83       	std	Y+2, r26	; 0x02
 9ea:	c9 59       	subi	r28, 0x99	; 153
 9ec:	d0 40       	sbci	r29, 0x00	; 0
 9ee:	86 e0       	ldi	r24, 0x06	; 6
 9f0:	28 ef       	ldi	r18, 0xF8	; 248
 9f2:	33 e0       	ldi	r19, 0x03	; 3
 9f4:	40 e0       	ldi	r20, 0x00	; 0
 9f6:	f9 01       	movw	r30, r18
 9f8:	de 01       	movw	r26, r28
 9fa:	ad 56       	subi	r26, 0x6D	; 109
 9fc:	bf 4f       	sbci	r27, 0xFF	; 255
 9fe:	74 2f       	mov	r23, r20
 a00:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <__movmemx_qi>
 a04:	d6 01       	movw	r26, r12
 a06:	2c 91       	ld	r18, X
 a08:	11 96       	adiw	r26, 0x01	; 1
 a0a:	3c 91       	ld	r19, X
 a0c:	11 97       	sbiw	r26, 0x01	; 1
 a0e:	12 96       	adiw	r26, 0x02	; 2
 a10:	4c 91       	ld	r20, X
 a12:	12 97       	sbiw	r26, 0x02	; 2
 a14:	13 96       	adiw	r26, 0x03	; 3
 a16:	5c 91       	ld	r21, X
 a18:	13 97       	sbiw	r26, 0x03	; 3
 a1a:	14 96       	adiw	r26, 0x04	; 4
 a1c:	6c 91       	ld	r22, X
 a1e:	14 97       	sbiw	r26, 0x04	; 4
 a20:	15 96       	adiw	r26, 0x05	; 5
 a22:	7c 91       	ld	r23, X
 a24:	15 97       	sbiw	r26, 0x05	; 5
 a26:	16 96       	adiw	r26, 0x06	; 6
 a28:	8c 91       	ld	r24, X
 a2a:	16 97       	sbiw	r26, 0x06	; 6
 a2c:	17 96       	adiw	r26, 0x07	; 7
 a2e:	9c 91       	ld	r25, X
 a30:	a0 e0       	ldi	r26, 0x00	; 0
 a32:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__cmpdi2_s8>
 a36:	51 f4       	brne	.+20     	; 0xa4c <__stack+0x1ed>
 a38:	00 e0       	ldi	r16, 0x00	; 0
 a3a:	10 e0       	ldi	r17, 0x00	; 0
 a3c:	cf 55       	subi	r28, 0x5F	; 95
 a3e:	df 4f       	sbci	r29, 0xFF	; 255
 a40:	28 81       	ld	r18, Y
 a42:	39 81       	ldd	r19, Y+1	; 0x01
 a44:	4a 81       	ldd	r20, Y+2	; 0x02
 a46:	c1 5a       	subi	r28, 0xA1	; 161
 a48:	d0 40       	sbci	r29, 0x00	; 0
 a4a:	b9 c0       	rjmp	.+370    	; 0xbbe <__stack+0x35f>
 a4c:	28 e7       	ldi	r18, 0x78	; 120
 a4e:	a6 01       	movw	r20, r12
 a50:	be 01       	movw	r22, r28
 a52:	6f 57       	subi	r22, 0x7F	; 127
 a54:	7f 4f       	sbci	r23, 0xFF	; 255
 a56:	c4 01       	movw	r24, r8
 a58:	0e 94 10 06 	call	0xc20	; 0xc20 <__fmt_x>
 a5c:	b6 c0       	rjmp	.+364    	; 0xbca <__stack+0x36b>
 a5e:	61 2f       	mov	r22, r17
 a60:	70 e0       	ldi	r23, 0x00	; 0
 a62:	95 01       	movw	r18, r10
 a64:	a1 01       	movw	r20, r2
 a66:	4e 0d       	add	r20, r14
 a68:	5f 1d       	adc	r21, r15
 a6a:	c6 01       	movw	r24, r12
 a6c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__pop_ptr>
 a70:	af c0       	rjmp	.+350    	; 0xbd0 <__stack+0x371>
 a72:	61 2f       	mov	r22, r17
 a74:	70 e0       	ldi	r23, 0x00	; 0
 a76:	a5 01       	movw	r20, r10
 a78:	c6 01       	movw	r24, r12
 a7a:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__pop_float>
 a7e:	89 2b       	or	r24, r25
 a80:	09 f4       	brne	.+2      	; 0xa84 <__stack+0x225>
 a82:	a6 c0       	rjmp	.+332    	; 0xbd0 <__stack+0x371>
 a84:	c7 56       	subi	r28, 0x67	; 103
 a86:	df 4f       	sbci	r29, 0xFF	; 255
 a88:	88 81       	ld	r24, Y
 a8a:	99 81       	ldd	r25, Y+1	; 0x01
 a8c:	aa 81       	ldd	r26, Y+2	; 0x02
 a8e:	c9 59       	subi	r28, 0x99	; 153
 a90:	d0 40       	sbci	r29, 0x00	; 0
 a92:	9c 01       	movw	r18, r24
 a94:	4a 2f       	mov	r20, r26
 a96:	2f 5f       	subi	r18, 0xFF	; 255
 a98:	3f 4f       	sbci	r19, 0xFF	; 255
 a9a:	4f 4f       	sbci	r20, 0xFF	; 255
 a9c:	c7 56       	subi	r28, 0x67	; 103
 a9e:	df 4f       	sbci	r29, 0xFF	; 255
 aa0:	28 83       	st	Y, r18
 aa2:	39 83       	std	Y+1, r19	; 0x01
 aa4:	4a 83       	std	Y+2, r20	; 0x02
 aa6:	c9 59       	subi	r28, 0x99	; 153
 aa8:	d0 40       	sbci	r29, 0x00	; 0
 aaa:	fc 01       	movw	r30, r24
 aac:	24 91       	lpm	r18, Z
 aae:	a7 fd       	sbrc	r26, 7
 ab0:	20 81       	ld	r18, Z
 ab2:	a6 01       	movw	r20, r12
 ab4:	be 01       	movw	r22, r28
 ab6:	6f 57       	subi	r22, 0x7F	; 127
 ab8:	7f 4f       	sbci	r23, 0xFF	; 255
 aba:	c4 01       	movw	r24, r8
 abc:	0e 94 8f 20 	call	0x411e	; 0x411e <__fmt_a>
 ac0:	84 c0       	rjmp	.+264    	; 0xbca <__stack+0x36b>
 ac2:	10 38       	cpi	r17, 0x80	; 128
 ac4:	09 f0       	breq	.+2      	; 0xac8 <__stack+0x269>
 ac6:	84 c0       	rjmp	.+264    	; 0xbd0 <__stack+0x371>
 ac8:	c7 56       	subi	r28, 0x67	; 103
 aca:	df 4f       	sbci	r29, 0xFF	; 255
 acc:	88 81       	ld	r24, Y
 ace:	99 81       	ldd	r25, Y+1	; 0x01
 ad0:	aa 81       	ldd	r26, Y+2	; 0x02
 ad2:	c9 59       	subi	r28, 0x99	; 153
 ad4:	d0 40       	sbci	r29, 0x00	; 0
 ad6:	01 96       	adiw	r24, 0x01	; 1
 ad8:	a1 1d       	adc	r26, r1
 ada:	c7 56       	subi	r28, 0x67	; 103
 adc:	df 4f       	sbci	r29, 0xFF	; 255
 ade:	88 83       	st	Y, r24
 ae0:	99 83       	std	Y+1, r25	; 0x01
 ae2:	aa 83       	std	Y+2, r26	; 0x02
 ae4:	c9 59       	subi	r28, 0x99	; 153
 ae6:	d0 40       	sbci	r29, 0x00	; 0
 ae8:	d5 01       	movw	r26, r10
 aea:	ed 91       	ld	r30, X+
 aec:	fc 91       	ld	r31, X
 aee:	11 97       	sbiw	r26, 0x01	; 1
 af0:	cf 01       	movw	r24, r30
 af2:	02 96       	adiw	r24, 0x02	; 2
 af4:	8d 93       	st	X+, r24
 af6:	9c 93       	st	X, r25
 af8:	80 81       	ld	r24, Z
 afa:	f6 01       	movw	r30, r12
 afc:	80 83       	st	Z, r24
 afe:	5b c0       	rjmp	.+182    	; 0xbb6 <__stack+0x357>
 b00:	10 38       	cpi	r17, 0x80	; 128
 b02:	09 f0       	breq	.+2      	; 0xb06 <__stack+0x2a7>
 b04:	65 c0       	rjmp	.+202    	; 0xbd0 <__stack+0x371>
 b06:	c7 56       	subi	r28, 0x67	; 103
 b08:	df 4f       	sbci	r29, 0xFF	; 255
 b0a:	88 81       	ld	r24, Y
 b0c:	99 81       	ldd	r25, Y+1	; 0x01
 b0e:	aa 81       	ldd	r26, Y+2	; 0x02
 b10:	c9 59       	subi	r28, 0x99	; 153
 b12:	d0 40       	sbci	r29, 0x00	; 0
 b14:	01 96       	adiw	r24, 0x01	; 1
 b16:	a1 1d       	adc	r26, r1
 b18:	c7 56       	subi	r28, 0x67	; 103
 b1a:	df 4f       	sbci	r29, 0xFF	; 255
 b1c:	88 83       	st	Y, r24
 b1e:	99 83       	std	Y+1, r25	; 0x01
 b20:	aa 83       	std	Y+2, r26	; 0x02
 b22:	c9 59       	subi	r28, 0x99	; 153
 b24:	d0 40       	sbci	r29, 0x00	; 0
 b26:	d5 01       	movw	r26, r10
 b28:	ed 91       	ld	r30, X+
 b2a:	fc 91       	ld	r31, X
 b2c:	11 97       	sbiw	r26, 0x01	; 1
 b2e:	cf 01       	movw	r24, r30
 b30:	03 96       	adiw	r24, 0x03	; 3
 b32:	8d 93       	st	X+, r24
 b34:	9c 93       	st	X, r25
 b36:	20 81       	ld	r18, Z
 b38:	31 81       	ldd	r19, Z+1	; 0x01
 b3a:	42 81       	ldd	r20, Z+2	; 0x02
 b3c:	00 e0       	ldi	r16, 0x00	; 0
 b3e:	10 e0       	ldi	r17, 0x00	; 0
 b40:	3e c0       	rjmp	.+124    	; 0xbbe <__stack+0x35f>
 b42:	10 38       	cpi	r17, 0x80	; 128
 b44:	09 f0       	breq	.+2      	; 0xb48 <__stack+0x2e9>
 b46:	44 c0       	rjmp	.+136    	; 0xbd0 <__stack+0x371>
 b48:	c7 56       	subi	r28, 0x67	; 103
 b4a:	df 4f       	sbci	r29, 0xFF	; 255
 b4c:	88 81       	ld	r24, Y
 b4e:	99 81       	ldd	r25, Y+1	; 0x01
 b50:	aa 81       	ldd	r26, Y+2	; 0x02
 b52:	c9 59       	subi	r28, 0x99	; 153
 b54:	d0 40       	sbci	r29, 0x00	; 0
 b56:	01 96       	adiw	r24, 0x01	; 1
 b58:	a1 1d       	adc	r26, r1
 b5a:	c7 56       	subi	r28, 0x67	; 103
 b5c:	df 4f       	sbci	r29, 0xFF	; 255
 b5e:	88 83       	st	Y, r24
 b60:	99 83       	std	Y+1, r25	; 0x01
 b62:	aa 83       	std	Y+2, r26	; 0x02
 b64:	c9 59       	subi	r28, 0x99	; 153
 b66:	d0 40       	sbci	r29, 0x00	; 0
 b68:	f6 01       	movw	r30, r12
 b6a:	70 82       	st	Z, r7
 b6c:	24 c0       	rjmp	.+72     	; 0xbb6 <__stack+0x357>
 b6e:	d6 01       	movw	r26, r12
 b70:	7c 92       	st	X, r7
 b72:	c2 56       	subi	r28, 0x62	; 98
 b74:	df 4f       	sbci	r29, 0xFF	; 255
 b76:	28 81       	ld	r18, Y
 b78:	39 81       	ldd	r19, Y+1	; 0x01
 b7a:	4a 81       	ldd	r20, Y+2	; 0x02
 b7c:	ce 59       	subi	r28, 0x9E	; 158
 b7e:	d0 40       	sbci	r29, 0x00	; 0
 b80:	c7 56       	subi	r28, 0x67	; 103
 b82:	df 4f       	sbci	r29, 0xFF	; 255
 b84:	28 83       	st	Y, r18
 b86:	39 83       	std	Y+1, r19	; 0x01
 b88:	4a 83       	std	Y+2, r20	; 0x02
 b8a:	c9 59       	subi	r28, 0x99	; 153
 b8c:	d0 40       	sbci	r29, 0x00	; 0
 b8e:	cf 57       	subi	r28, 0x7F	; 127
 b90:	df 4f       	sbci	r29, 0xFF	; 255
 b92:	19 82       	std	Y+1, r1	; 0x01
 b94:	18 82       	st	Y, r1
 b96:	c1 58       	subi	r28, 0x81	; 129
 b98:	d0 40       	sbci	r29, 0x00	; 0
 b9a:	cb 57       	subi	r28, 0x7B	; 123
 b9c:	df 4f       	sbci	r29, 0xFF	; 255
 b9e:	19 82       	std	Y+1, r1	; 0x01
 ba0:	18 82       	st	Y, r1
 ba2:	c5 58       	subi	r28, 0x85	; 133
 ba4:	d0 40       	sbci	r29, 0x00	; 0
 ba6:	8f ef       	ldi	r24, 0xFF	; 255
 ba8:	9f ef       	ldi	r25, 0xFF	; 255
 baa:	cd 57       	subi	r28, 0x7D	; 125
 bac:	df 4f       	sbci	r29, 0xFF	; 255
 bae:	99 83       	std	Y+1, r25	; 0x01
 bb0:	88 83       	st	Y, r24
 bb2:	c3 58       	subi	r28, 0x83	; 131
 bb4:	d0 40       	sbci	r29, 0x00	; 0
 bb6:	01 e0       	ldi	r16, 0x01	; 1
 bb8:	10 e0       	ldi	r17, 0x00	; 0
 bba:	46 2d       	mov	r20, r6
 bbc:	92 01       	movw	r18, r4
 bbe:	be 01       	movw	r22, r28
 bc0:	6f 57       	subi	r22, 0x7F	; 127
 bc2:	7f 4f       	sbci	r23, 0xFF	; 255
 bc4:	c4 01       	movw	r24, r8
 bc6:	0e 94 57 12 	call	0x24ae	; 0x24ae <__fmt_s>
 bca:	8e 0d       	add	r24, r14
 bcc:	9f 1d       	adc	r25, r15
 bce:	11 c0       	rjmp	.+34     	; 0xbf2 <__stack+0x393>
 bd0:	c7 56       	subi	r28, 0x67	; 103
 bd2:	df 4f       	sbci	r29, 0xFF	; 255
 bd4:	88 81       	ld	r24, Y
 bd6:	99 81       	ldd	r25, Y+1	; 0x01
 bd8:	aa 81       	ldd	r26, Y+2	; 0x02
 bda:	c9 59       	subi	r28, 0x99	; 153
 bdc:	d0 40       	sbci	r29, 0x00	; 0
 bde:	01 96       	adiw	r24, 0x01	; 1
 be0:	a1 1d       	adc	r26, r1
 be2:	c7 56       	subi	r28, 0x67	; 103
 be4:	df 4f       	sbci	r29, 0xFF	; 255
 be6:	88 83       	st	Y, r24
 be8:	99 83       	std	Y+1, r25	; 0x01
 bea:	aa 83       	std	Y+2, r26	; 0x02
 bec:	c9 59       	subi	r28, 0x99	; 153
 bee:	d0 40       	sbci	r29, 0x00	; 0
 bf0:	c7 01       	movw	r24, r14
 bf2:	71 01       	movw	r14, r2
 bf4:	e8 0e       	add	r14, r24
 bf6:	f9 1e       	adc	r15, r25
 bf8:	e2 14       	cp	r14, r2
 bfa:	f3 04       	cpc	r15, r3
 bfc:	4c f4       	brge	.+18     	; 0xc10 <__stack+0x3b1>
 bfe:	8f e4       	ldi	r24, 0x4F	; 79
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__errno_val+0x1>
 c06:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__errno_val>
 c0a:	8f ef       	ldi	r24, 0xFF	; 255
 c0c:	9f ef       	ldi	r25, 0xFF	; 255
 c0e:	03 c0       	rjmp	.+6      	; 0xc16 <__stack+0x3b7>
 c10:	17 01       	movw	r2, r14
 c12:	21 cc       	rjmp	.-1982   	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 c14:	c1 01       	movw	r24, r2
 c16:	cd 55       	subi	r28, 0x5D	; 93
 c18:	df 4f       	sbci	r29, 0xFF	; 255
 c1a:	e2 e1       	ldi	r30, 0x12	; 18
 c1c:	0c 94 96 1d 	jmp	0x3b2c	; 0x3b2c <__epilogue_restores__>

Disassembly of section .text.fputc:

00002c24 <fputc>:
    2c24:	0f 93       	push	r16
    2c26:	1f 93       	push	r17
    2c28:	cf 93       	push	r28
    2c2a:	df 93       	push	r29
    2c2c:	db 01       	movw	r26, r22
    2c2e:	2d 91       	ld	r18, X+
    2c30:	3c 91       	ld	r19, X
    2c32:	11 97       	sbiw	r26, 0x01	; 1
    2c34:	30 ff       	sbrs	r19, 0
    2c36:	25 c0       	rjmp	.+74     	; 0x2c82 <fputc+0x5e>
    2c38:	17 96       	adiw	r26, 0x07	; 7
    2c3a:	4d 91       	ld	r20, X+
    2c3c:	5c 91       	ld	r21, X
    2c3e:	18 97       	sbiw	r26, 0x08	; 8
    2c40:	15 96       	adiw	r26, 0x05	; 5
    2c42:	2d 91       	ld	r18, X+
    2c44:	3c 91       	ld	r19, X
    2c46:	16 97       	sbiw	r26, 0x06	; 6
    2c48:	42 17       	cp	r20, r18
    2c4a:	53 07       	cpc	r21, r19
    2c4c:	78 f4       	brcc	.+30     	; 0x2c6c <fputc+0x48>
    2c4e:	12 96       	adiw	r26, 0x02	; 2
    2c50:	ed 91       	ld	r30, X+
    2c52:	fc 91       	ld	r31, X
    2c54:	13 97       	sbiw	r26, 0x03	; 3
    2c56:	80 83       	st	Z, r24
    2c58:	12 96       	adiw	r26, 0x02	; 2
    2c5a:	2d 91       	ld	r18, X+
    2c5c:	3c 91       	ld	r19, X
    2c5e:	13 97       	sbiw	r26, 0x03	; 3
    2c60:	2f 5f       	subi	r18, 0xFF	; 255
    2c62:	3f 4f       	sbci	r19, 0xFF	; 255
    2c64:	13 96       	adiw	r26, 0x03	; 3
    2c66:	3c 93       	st	X, r19
    2c68:	2e 93       	st	-X, r18
    2c6a:	12 97       	sbiw	r26, 0x02	; 2
    2c6c:	17 96       	adiw	r26, 0x07	; 7
    2c6e:	2d 91       	ld	r18, X+
    2c70:	3c 91       	ld	r19, X
    2c72:	18 97       	sbiw	r26, 0x08	; 8
    2c74:	2f 5f       	subi	r18, 0xFF	; 255
    2c76:	3f 4f       	sbci	r19, 0xFF	; 255
    2c78:	18 96       	adiw	r26, 0x08	; 8
    2c7a:	3c 93       	st	X, r19
    2c7c:	2e 93       	st	-X, r18
    2c7e:	17 97       	sbiw	r26, 0x07	; 7
    2c80:	15 c0       	rjmp	.+42     	; 0x2cac <fputc+0x88>
    2c82:	1d 96       	adiw	r26, 0x0d	; 13
    2c84:	ed 91       	ld	r30, X+
    2c86:	fc 91       	ld	r31, X
    2c88:	1e 97       	sbiw	r26, 0x0e	; 14
    2c8a:	30 97       	sbiw	r30, 0x00	; 0
    2c8c:	19 f4       	brne	.+6      	; 0x2c94 <fputc+0x70>
    2c8e:	8f ef       	ldi	r24, 0xFF	; 255
    2c90:	9f ef       	ldi	r25, 0xFF	; 255
    2c92:	0c c0       	rjmp	.+24     	; 0x2cac <fputc+0x88>
    2c94:	8b 01       	movw	r16, r22
    2c96:	ec 01       	movw	r28, r24
    2c98:	09 95       	icall
    2c9a:	89 2b       	or	r24, r25
    2c9c:	c1 f7       	brne	.-16     	; 0x2c8e <fputc+0x6a>
    2c9e:	f8 01       	movw	r30, r16
    2ca0:	87 81       	ldd	r24, Z+7	; 0x07
    2ca2:	90 85       	ldd	r25, Z+8	; 0x08
    2ca4:	01 96       	adiw	r24, 0x01	; 1
    2ca6:	90 87       	std	Z+8, r25	; 0x08
    2ca8:	87 83       	std	Z+7, r24	; 0x07
    2caa:	ce 01       	movw	r24, r28
    2cac:	df 91       	pop	r29
    2cae:	cf 91       	pop	r28
    2cb0:	1f 91       	pop	r17
    2cb2:	0f 91       	pop	r16
    2cb4:	08 95       	ret

Disassembly of section .text.__fmt_d:

00001444 <__fmt_d>:
    1444:	ad e0       	ldi	r26, 0x0D	; 13
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e8 e2       	ldi	r30, 0x28	; 40
    144a:	fa e0       	ldi	r31, 0x0A	; 10
    144c:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__prologue_saves__>
    1450:	9a 87       	std	Y+10, r25	; 0x0a
    1452:	89 87       	std	Y+9, r24	; 0x09
    1454:	7c 83       	std	Y+4, r23	; 0x04
    1456:	6b 83       	std	Y+3, r22	; 0x03
    1458:	fa 01       	movw	r30, r20
    145a:	db 01       	movw	r26, r22
    145c:	12 96       	adiw	r26, 0x02	; 2
    145e:	cd 90       	ld	r12, X+
    1460:	dc 90       	ld	r13, X
    1462:	13 97       	sbiw	r26, 0x03	; 3
    1464:	14 96       	adiw	r26, 0x04	; 4
    1466:	8d 91       	ld	r24, X+
    1468:	9c 91       	ld	r25, X
    146a:	15 97       	sbiw	r26, 0x05	; 5
    146c:	9e 83       	std	Y+6, r25	; 0x06
    146e:	8d 83       	std	Y+5, r24	; 0x05
    1470:	ed 90       	ld	r14, X+
    1472:	fc 90       	ld	r15, X
    1474:	11 97       	sbiw	r26, 0x01	; 1
    1476:	fa 82       	std	Y+2, r15	; 0x02
    1478:	e9 82       	std	Y+1, r14	; 0x01
    147a:	16 96       	adiw	r26, 0x06	; 6
    147c:	0d 90       	ld	r0, X+
    147e:	bc 91       	ld	r27, X
    1480:	a0 2d       	mov	r26, r0
    1482:	b8 87       	std	Y+8, r27	; 0x08
    1484:	af 83       	std	Y+7, r26	; 0x07
    1486:	20 80       	ld	r2, Z
    1488:	31 80       	ldd	r3, Z+1	; 0x01
    148a:	42 80       	ldd	r4, Z+2	; 0x02
    148c:	53 80       	ldd	r5, Z+3	; 0x03
    148e:	64 80       	ldd	r6, Z+4	; 0x04
    1490:	75 80       	ldd	r7, Z+5	; 0x05
    1492:	86 80       	ldd	r8, Z+6	; 0x06
    1494:	97 80       	ldd	r9, Z+7	; 0x07
    1496:	81 01       	movw	r16, r2
    1498:	b4 2d       	mov	r27, r4
    149a:	f5 2d       	mov	r31, r5
    149c:	e6 2d       	mov	r30, r6
    149e:	7b 86       	std	Y+11, r7	; 0x0b
    14a0:	8c 86       	std	Y+12, r8	; 0x0c
    14a2:	9d 86       	std	Y+13, r9	; 0x0d
    14a4:	91 01       	movw	r18, r2
    14a6:	a2 01       	movw	r20, r4
    14a8:	b3 01       	movw	r22, r6
    14aa:	c4 01       	movw	r24, r8
    14ac:	a0 e0       	ldi	r26, 0x00	; 0
    14ae:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__cmpdi2_s8>
    14b2:	4c f4       	brge	.+18     	; 0x14c6 <__fmt_d+0x82>
    14b4:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <__negdi2>
    14b8:	89 01       	movw	r16, r18
    14ba:	b4 2f       	mov	r27, r20
    14bc:	f5 2f       	mov	r31, r21
    14be:	e6 2f       	mov	r30, r22
    14c0:	7b 87       	std	Y+11, r23	; 0x0b
    14c2:	8c 87       	std	Y+12, r24	; 0x0c
    14c4:	9d 87       	std	Y+13, r25	; 0x0d
    14c6:	d7 fc       	sbrc	r13, 7
    14c8:	04 c0       	rjmp	.+8      	; 0x14d2 <__fmt_d+0x8e>
    14ca:	e8 94       	clt
    14cc:	e1 f8       	bld	r14, 1
    14ce:	fa 82       	std	Y+2, r15	; 0x02
    14d0:	e9 82       	std	Y+1, r14	; 0x01
    14d2:	91 01       	movw	r18, r2
    14d4:	a2 01       	movw	r20, r4
    14d6:	b3 01       	movw	r22, r6
    14d8:	c4 01       	movw	r24, r8
    14da:	a0 e0       	ldi	r26, 0x00	; 0
    14dc:	ed 80       	ldd	r14, Y+5	; 0x05
    14de:	fe 80       	ldd	r15, Y+6	; 0x06
    14e0:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__cmpdi2_s8>
    14e4:	1c f0       	brlt	.+6      	; 0x14ec <__fmt_d+0xa8>
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	82 ff       	sbrs	r24, 2
    14ea:	04 c0       	rjmp	.+8      	; 0x14f4 <__fmt_d+0xb0>
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	e8 1a       	sub	r14, r24
    14f0:	f1 08       	sbc	r15, r1
    14f2:	05 c0       	rjmp	.+10     	; 0x14fe <__fmt_d+0xba>
    14f4:	83 ff       	sbrs	r24, 3
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <__fmt_d+0xba>
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	e9 1a       	sub	r14, r25
    14fc:	f1 08       	sbc	r15, r1
    14fe:	ce 01       	movw	r24, r28
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	5c 01       	movw	r10, r24
    1504:	8a e0       	ldi	r24, 0x0A	; 10
    1506:	c8 2e       	mov	r12, r24
    1508:	d1 2c       	mov	r13, r1
    150a:	2b 2f       	mov	r18, r27
    150c:	3f 2f       	mov	r19, r31
    150e:	4e 2f       	mov	r20, r30
    1510:	5b 85       	ldd	r21, Y+11	; 0x0b
    1512:	6c 85       	ldd	r22, Y+12	; 0x0c
    1514:	7d 85       	ldd	r23, Y+13	; 0x0d
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__cvt_u>
    151e:	fc 01       	movw	r30, r24
    1520:	91 01       	movw	r18, r2
    1522:	a2 01       	movw	r20, r4
    1524:	b3 01       	movw	r22, r6
    1526:	c4 01       	movw	r24, r8
    1528:	a0 e0       	ldi	r26, 0x00	; 0
    152a:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__cmpdi2_s8>
    152e:	1c f0       	brlt	.+6      	; 0x1536 <__fmt_d+0xf2>
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	82 ff       	sbrs	r24, 2
    1534:	12 c0       	rjmp	.+36     	; 0x155a <__fmt_d+0x116>
    1536:	31 97       	sbiw	r30, 0x01	; 1
    1538:	0f 81       	ldd	r16, Y+7	; 0x07
    153a:	18 85       	ldd	r17, Y+8	; 0x08
    153c:	0e 0f       	add	r16, r30
    153e:	1f 1f       	adc	r17, r31
    1540:	91 01       	movw	r18, r2
    1542:	a2 01       	movw	r20, r4
    1544:	b3 01       	movw	r22, r6
    1546:	c4 01       	movw	r24, r8
    1548:	a0 e0       	ldi	r26, 0x00	; 0
    154a:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__cmpdi2_s8>
    154e:	14 f0       	brlt	.+4      	; 0x1554 <__fmt_d+0x110>
    1550:	8b e2       	ldi	r24, 0x2B	; 43
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <__fmt_d+0x112>
    1554:	8d e2       	ldi	r24, 0x2D	; 45
    1556:	d8 01       	movw	r26, r16
    1558:	08 c0       	rjmp	.+16     	; 0x156a <__fmt_d+0x126>
    155a:	83 ff       	sbrs	r24, 3
    155c:	07 c0       	rjmp	.+14     	; 0x156c <__fmt_d+0x128>
    155e:	31 97       	sbiw	r30, 0x01	; 1
    1560:	af 81       	ldd	r26, Y+7	; 0x07
    1562:	b8 85       	ldd	r27, Y+8	; 0x08
    1564:	ae 0f       	add	r26, r30
    1566:	bf 1f       	adc	r27, r31
    1568:	80 e2       	ldi	r24, 0x20	; 32
    156a:	8c 93       	st	X, r24
    156c:	e9 80       	ldd	r14, Y+1	; 0x01
    156e:	fa 80       	ldd	r15, Y+2	; 0x02
    1570:	ab 81       	ldd	r26, Y+3	; 0x03
    1572:	bc 81       	ldd	r27, Y+4	; 0x04
    1574:	18 96       	adiw	r26, 0x08	; 8
    1576:	2d 91       	ld	r18, X+
    1578:	3c 91       	ld	r19, X
    157a:	19 97       	sbiw	r26, 0x09	; 9
    157c:	21 50       	subi	r18, 0x01	; 1
    157e:	31 09       	sbc	r19, r1
    1580:	2e 1b       	sub	r18, r30
    1582:	3f 0b       	sbc	r19, r31
    1584:	8f 81       	ldd	r24, Y+7	; 0x07
    1586:	98 85       	ldd	r25, Y+8	; 0x08
    1588:	e8 0f       	add	r30, r24
    158a:	f9 1f       	adc	r31, r25
    158c:	af 01       	movw	r20, r30
    158e:	60 e8       	ldi	r22, 0x80	; 128
    1590:	0d 81       	ldd	r16, Y+5	; 0x05
    1592:	1e 81       	ldd	r17, Y+6	; 0x06
    1594:	89 85       	ldd	r24, Y+9	; 0x09
    1596:	9a 85       	ldd	r25, Y+10	; 0x0a
    1598:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__pad>
    159c:	9c 01       	movw	r18, r24
    159e:	a9 85       	ldd	r26, Y+9	; 0x09
    15a0:	ba 85       	ldd	r27, Y+10	; 0x0a
    15a2:	8d 91       	ld	r24, X+
    15a4:	9c 91       	ld	r25, X
    15a6:	90 ff       	sbrs	r25, 0
    15a8:	07 c0       	rjmp	.+14     	; 0x15b8 <__fmt_d+0x174>
    15aa:	eb 81       	ldd	r30, Y+3	; 0x03
    15ac:	fc 81       	ldd	r31, Y+4	; 0x04
    15ae:	82 81       	ldd	r24, Z+2	; 0x02
    15b0:	93 81       	ldd	r25, Z+3	; 0x03
    15b2:	82 17       	cp	r24, r18
    15b4:	93 07       	cpc	r25, r19
    15b6:	0c f4       	brge	.+2      	; 0x15ba <__fmt_d+0x176>
    15b8:	c9 01       	movw	r24, r18
    15ba:	2d 96       	adiw	r28, 0x0d	; 13
    15bc:	e2 e1       	ldi	r30, 0x12	; 18
    15be:	0c 94 96 1d 	jmp	0x3b2c	; 0x3b2c <__epilogue_restores__>

Disassembly of section .text.__fmt_o:

0000209a <__fmt_o>:
    209a:	a2 e0       	ldi	r26, 0x02	; 2
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e3 e5       	ldi	r30, 0x53	; 83
    20a0:	f0 e1       	ldi	r31, 0x10	; 16
    20a2:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__prologue_saves__>
    20a6:	1c 01       	movw	r2, r24
    20a8:	4b 01       	movw	r8, r22
    20aa:	fa 01       	movw	r30, r20
    20ac:	db 01       	movw	r26, r22
    20ae:	12 96       	adiw	r26, 0x02	; 2
    20b0:	2d 91       	ld	r18, X+
    20b2:	3c 91       	ld	r19, X
    20b4:	13 97       	sbiw	r26, 0x03	; 3
    20b6:	14 96       	adiw	r26, 0x04	; 4
    20b8:	4d 90       	ld	r4, X+
    20ba:	5c 90       	ld	r5, X
    20bc:	15 97       	sbiw	r26, 0x05	; 5
    20be:	8d 91       	ld	r24, X+
    20c0:	9c 91       	ld	r25, X
    20c2:	11 97       	sbiw	r26, 0x01	; 1
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	16 96       	adiw	r26, 0x06	; 6
    20ca:	6d 90       	ld	r6, X+
    20cc:	7c 90       	ld	r7, X
    20ce:	17 97       	sbiw	r26, 0x07	; 7
    20d0:	37 fd       	sbrc	r19, 7
    20d2:	03 c0       	rjmp	.+6      	; 0x20da <__fmt_o+0x40>
    20d4:	8d 7f       	andi	r24, 0xFD	; 253
    20d6:	9a 83       	std	Y+2, r25	; 0x02
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	00 81       	ld	r16, Z
    20dc:	11 81       	ldd	r17, Z+1	; 0x01
    20de:	22 81       	ldd	r18, Z+2	; 0x02
    20e0:	33 81       	ldd	r19, Z+3	; 0x03
    20e2:	44 81       	ldd	r20, Z+4	; 0x04
    20e4:	55 81       	ldd	r21, Z+5	; 0x05
    20e6:	66 81       	ldd	r22, Z+6	; 0x06
    20e8:	77 81       	ldd	r23, Z+7	; 0x07
    20ea:	fe 01       	movw	r30, r28
    20ec:	31 96       	adiw	r30, 0x01	; 1
    20ee:	5f 01       	movw	r10, r30
    20f0:	88 e0       	ldi	r24, 0x08	; 8
    20f2:	c8 2e       	mov	r12, r24
    20f4:	d1 2c       	mov	r13, r1
    20f6:	72 01       	movw	r14, r4
    20f8:	c4 01       	movw	r24, r8
    20fa:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__cvt_u>
    20fe:	29 81       	ldd	r18, Y+1	; 0x01
    2100:	24 ff       	sbrs	r18, 4
    2102:	06 c0       	rjmp	.+12     	; 0x2110 <__fmt_o+0x76>
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f3 01       	movw	r30, r6
    2108:	e8 0f       	add	r30, r24
    210a:	f9 1f       	adc	r31, r25
    210c:	20 e3       	ldi	r18, 0x30	; 48
    210e:	20 83       	st	Z, r18
    2110:	29 81       	ldd	r18, Y+1	; 0x01
    2112:	23 ff       	sbrs	r18, 3
    2114:	06 c0       	rjmp	.+12     	; 0x2122 <__fmt_o+0x88>
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	f3 01       	movw	r30, r6
    211a:	e8 0f       	add	r30, r24
    211c:	f9 1f       	adc	r31, r25
    211e:	20 e2       	ldi	r18, 0x20	; 32
    2120:	20 83       	st	Z, r18
    2122:	e9 80       	ldd	r14, Y+1	; 0x01
    2124:	fa 80       	ldd	r15, Y+2	; 0x02
    2126:	d4 01       	movw	r26, r8
    2128:	18 96       	adiw	r26, 0x08	; 8
    212a:	2d 91       	ld	r18, X+
    212c:	3c 91       	ld	r19, X
    212e:	19 97       	sbiw	r26, 0x09	; 9
    2130:	21 50       	subi	r18, 0x01	; 1
    2132:	31 09       	sbc	r19, r1
    2134:	28 1b       	sub	r18, r24
    2136:	39 0b       	sbc	r19, r25
    2138:	86 0d       	add	r24, r6
    213a:	97 1d       	adc	r25, r7
    213c:	ac 01       	movw	r20, r24
    213e:	60 e8       	ldi	r22, 0x80	; 128
    2140:	82 01       	movw	r16, r4
    2142:	c1 01       	movw	r24, r2
    2144:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__pad>
    2148:	9c 01       	movw	r18, r24
    214a:	f1 01       	movw	r30, r2
    214c:	80 81       	ld	r24, Z
    214e:	91 81       	ldd	r25, Z+1	; 0x01
    2150:	90 ff       	sbrs	r25, 0
    2152:	08 c0       	rjmp	.+16     	; 0x2164 <__fmt_o+0xca>
    2154:	d4 01       	movw	r26, r8
    2156:	12 96       	adiw	r26, 0x02	; 2
    2158:	8d 91       	ld	r24, X+
    215a:	9c 91       	ld	r25, X
    215c:	13 97       	sbiw	r26, 0x03	; 3
    215e:	82 17       	cp	r24, r18
    2160:	93 07       	cpc	r25, r19
    2162:	0c f4       	brge	.+2      	; 0x2166 <__fmt_o+0xcc>
    2164:	c9 01       	movw	r24, r18
    2166:	22 96       	adiw	r28, 0x02	; 2
    2168:	e2 e1       	ldi	r30, 0x12	; 18
    216a:	0c 94 96 1d 	jmp	0x3b2c	; 0x3b2c <__epilogue_restores__>

Disassembly of section .text.__cvt_u:

000018ae <__cvt_u>:
    18ae:	a2 e1       	ldi	r26, 0x12	; 18
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	ed e5       	ldi	r30, 0x5D	; 93
    18b4:	fc e0       	ldi	r31, 0x0C	; 12
    18b6:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__prologue_saves__>
    18ba:	fc 01       	movw	r30, r24
    18bc:	0a 8b       	std	Y+18, r16	; 0x12
    18be:	1b 83       	std	Y+3, r17	; 0x03
    18c0:	2c 83       	std	Y+4, r18	; 0x04
    18c2:	73 2e       	mov	r7, r19
    18c4:	64 2e       	mov	r6, r20
    18c6:	55 2e       	mov	r5, r21
    18c8:	46 2e       	mov	r4, r22
    18ca:	7d 83       	std	Y+5, r23	; 0x05
    18cc:	cc 86       	std	Y+12, r12	; 0x0c
    18ce:	d8 86       	std	Y+8, r13	; 0x08
    18d0:	bf 82       	std	Y+7, r11	; 0x07
    18d2:	ae 82       	std	Y+6, r10	; 0x06
    18d4:	86 81       	ldd	r24, Z+6	; 0x06
    18d6:	97 81       	ldd	r25, Z+7	; 0x07
    18d8:	9b 87       	std	Y+11, r25	; 0x0b
    18da:	8a 87       	std	Y+10, r24	; 0x0a
    18dc:	d5 01       	movw	r26, r10
    18de:	4d 91       	ld	r20, X+
    18e0:	5c 91       	ld	r21, X
    18e2:	22 81       	ldd	r18, Z+2	; 0x02
    18e4:	33 81       	ldd	r19, Z+3	; 0x03
    18e6:	80 85       	ldd	r24, Z+8	; 0x08
    18e8:	91 85       	ldd	r25, Z+9	; 0x09
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	1c 01       	movw	r2, r24
    18ee:	37 ff       	sbrs	r19, 7
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <__cvt_u+0x48>
    18f2:	21 e0       	ldi	r18, 0x01	; 1
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	ea 85       	ldd	r30, Y+10	; 0x0a
    18f8:	fb 85       	ldd	r31, Y+11	; 0x0b
    18fa:	e8 0f       	add	r30, r24
    18fc:	f9 1f       	adc	r31, r25
    18fe:	10 82       	st	Z, r1
    1900:	47 01       	movw	r8, r14
    1902:	e1 e0       	ldi	r30, 0x01	; 1
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	fa 83       	std	Y+2, r31	; 0x02
    1908:	e9 83       	std	Y+1, r30	; 0x01
    190a:	c9 01       	movw	r24, r18
    190c:	8e 19       	sub	r24, r14
    190e:	9f 09       	sbc	r25, r15
    1910:	9e 87       	std	Y+14, r25	; 0x0e
    1912:	8d 87       	std	Y+13, r24	; 0x0d
    1914:	da 01       	movw	r26, r20
    1916:	a2 70       	andi	r26, 0x02	; 2
    1918:	bb 27       	eor	r27, r27
    191a:	b8 8b       	std	Y+16, r27	; 0x10
    191c:	af 87       	std	Y+15, r26	; 0x0f
    191e:	b8 85       	ldd	r27, Y+8	; 0x08
    1920:	bb 0f       	add	r27, r27
    1922:	bb 0b       	sbc	r27, r27
    1924:	b9 8b       	std	Y+17, r27	; 0x11
    1926:	12 14       	cp	r1, r2
    1928:	13 04       	cpc	r1, r3
    192a:	74 f0       	brlt	.+28     	; 0x1948 <__cvt_u+0x9a>
    192c:	a9 81       	ldd	r26, Y+1	; 0x01
    192e:	ba 81       	ldd	r27, Y+2	; 0x02
    1930:	ab 2b       	or	r26, r27
    1932:	09 f0       	breq	.+2      	; 0x1936 <__cvt_u+0x88>
    1934:	5c c0       	rjmp	.+184    	; 0x19ee <__cvt_u+0x140>
    1936:	ae 81       	ldd	r26, Y+6	; 0x06
    1938:	bf 81       	ldd	r27, Y+7	; 0x07
    193a:	8d 91       	ld	r24, X+
    193c:	9c 91       	ld	r25, X
    193e:	11 97       	sbiw	r26, 0x01	; 1
    1940:	8f 7e       	andi	r24, 0xEF	; 239
    1942:	8d 93       	st	X+, r24
    1944:	9c 93       	st	X, r25
    1946:	53 c0       	rjmp	.+166    	; 0x19ee <__cvt_u+0x140>
    1948:	2a 89       	ldd	r18, Y+18	; 0x12
    194a:	3b 81       	ldd	r19, Y+3	; 0x03
    194c:	4c 81       	ldd	r20, Y+4	; 0x04
    194e:	57 2d       	mov	r21, r7
    1950:	66 2d       	mov	r22, r6
    1952:	75 2d       	mov	r23, r5
    1954:	84 2d       	mov	r24, r4
    1956:	9d 81       	ldd	r25, Y+5	; 0x05
    1958:	a0 e0       	ldi	r26, 0x00	; 0
    195a:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__cmpdi2_s8>
    195e:	b1 f1       	breq	.+108    	; 0x19cc <__cvt_u+0x11e>
    1960:	e1 e0       	ldi	r30, 0x01	; 1
    1962:	2e 1a       	sub	r2, r30
    1964:	31 08       	sbc	r3, r1
    1966:	fc 85       	ldd	r31, Y+12	; 0x0c
    1968:	f9 87       	std	Y+9, r31	; 0x09
    196a:	af 2e       	mov	r10, r31
    196c:	b8 84       	ldd	r11, Y+8	; 0x08
    196e:	c9 88       	ldd	r12, Y+17	; 0x11
    1970:	dc 2c       	mov	r13, r12
    1972:	ec 2c       	mov	r14, r12
    1974:	fc 2c       	mov	r15, r12
    1976:	0c 2d       	mov	r16, r12
    1978:	1c 2d       	mov	r17, r12
    197a:	2a 89       	ldd	r18, Y+18	; 0x12
    197c:	3b 81       	ldd	r19, Y+3	; 0x03
    197e:	4c 81       	ldd	r20, Y+4	; 0x04
    1980:	57 2d       	mov	r21, r7
    1982:	66 2d       	mov	r22, r6
    1984:	75 2d       	mov	r23, r5
    1986:	84 2d       	mov	r24, r4
    1988:	9d 81       	ldd	r25, Y+5	; 0x05
    198a:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <__umoddi3>
    198e:	c9 01       	movw	r24, r18
    1990:	29 83       	std	Y+1, r18	; 0x01
    1992:	9a 83       	std	Y+2, r25	; 0x02
    1994:	ea 85       	ldd	r30, Y+10	; 0x0a
    1996:	fb 85       	ldd	r31, Y+11	; 0x0b
    1998:	e2 0d       	add	r30, r2
    199a:	f3 1d       	adc	r31, r3
    199c:	80 5d       	subi	r24, 0xD0	; 208
    199e:	80 83       	st	Z, r24
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	88 1a       	sub	r8, r24
    19a4:	91 08       	sbc	r9, r1
    19a6:	2a 89       	ldd	r18, Y+18	; 0x12
    19a8:	3b 81       	ldd	r19, Y+3	; 0x03
    19aa:	4c 81       	ldd	r20, Y+4	; 0x04
    19ac:	57 2d       	mov	r21, r7
    19ae:	66 2d       	mov	r22, r6
    19b0:	75 2d       	mov	r23, r5
    19b2:	84 2d       	mov	r24, r4
    19b4:	9d 81       	ldd	r25, Y+5	; 0x05
    19b6:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__udivdi3>
    19ba:	2a 8b       	std	Y+18, r18	; 0x12
    19bc:	3b 83       	std	Y+3, r19	; 0x03
    19be:	4c 83       	std	Y+4, r20	; 0x04
    19c0:	75 2e       	mov	r7, r21
    19c2:	66 2e       	mov	r6, r22
    19c4:	57 2e       	mov	r5, r23
    19c6:	48 2e       	mov	r4, r24
    19c8:	9d 83       	std	Y+5, r25	; 0x05
    19ca:	ad cf       	rjmp	.-166    	; 0x1926 <__cvt_u+0x78>
    19cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d0:	88 0d       	add	r24, r8
    19d2:	99 1d       	adc	r25, r9
    19d4:	18 16       	cp	r1, r24
    19d6:	19 06       	cpc	r1, r25
    19d8:	1c f2       	brlt	.-122    	; 0x1960 <__cvt_u+0xb2>
    19da:	18 14       	cp	r1, r8
    19dc:	19 04       	cpc	r1, r9
    19de:	0c f0       	brlt	.+2      	; 0x19e2 <__cvt_u+0x134>
    19e0:	a5 cf       	rjmp	.-182    	; 0x192c <__cvt_u+0x7e>
    19e2:	ef 85       	ldd	r30, Y+15	; 0x0f
    19e4:	f8 89       	ldd	r31, Y+16	; 0x10
    19e6:	ef 2b       	or	r30, r31
    19e8:	09 f0       	breq	.+2      	; 0x19ec <__cvt_u+0x13e>
    19ea:	ba cf       	rjmp	.-140    	; 0x1960 <__cvt_u+0xb2>
    19ec:	9f cf       	rjmp	.-194    	; 0x192c <__cvt_u+0x7e>
    19ee:	c1 01       	movw	r24, r2
    19f0:	62 96       	adiw	r28, 0x12	; 18
    19f2:	e2 e1       	ldi	r30, 0x12	; 18
    19f4:	0c 94 96 1d 	jmp	0x3b2c	; 0x3b2c <__epilogue_restores__>

Disassembly of section .text.__fmt_u:

000027a0 <__fmt_u>:
    27a0:	a2 e0       	ldi	r26, 0x02	; 2
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e6 ed       	ldi	r30, 0xD6	; 214
    27a6:	f3 e1       	ldi	r31, 0x13	; 19
    27a8:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__prologue_saves__>
    27ac:	3c 01       	movw	r6, r24
    27ae:	4b 01       	movw	r8, r22
    27b0:	fa 01       	movw	r30, r20
    27b2:	db 01       	movw	r26, r22
    27b4:	12 96       	adiw	r26, 0x02	; 2
    27b6:	2d 91       	ld	r18, X+
    27b8:	3c 91       	ld	r19, X
    27ba:	13 97       	sbiw	r26, 0x03	; 3
    27bc:	14 96       	adiw	r26, 0x04	; 4
    27be:	4d 90       	ld	r4, X+
    27c0:	5c 90       	ld	r5, X
    27c2:	15 97       	sbiw	r26, 0x05	; 5
    27c4:	8d 91       	ld	r24, X+
    27c6:	9c 91       	ld	r25, X
    27c8:	11 97       	sbiw	r26, 0x01	; 1
    27ca:	9a 83       	std	Y+2, r25	; 0x02
    27cc:	89 83       	std	Y+1, r24	; 0x01
    27ce:	16 96       	adiw	r26, 0x06	; 6
    27d0:	2d 90       	ld	r2, X+
    27d2:	3c 90       	ld	r3, X
    27d4:	17 97       	sbiw	r26, 0x07	; 7
    27d6:	37 fd       	sbrc	r19, 7
    27d8:	03 c0       	rjmp	.+6      	; 0x27e0 <__fmt_u+0x40>
    27da:	8d 7f       	andi	r24, 0xFD	; 253
    27dc:	9a 83       	std	Y+2, r25	; 0x02
    27de:	89 83       	std	Y+1, r24	; 0x01
    27e0:	00 81       	ld	r16, Z
    27e2:	11 81       	ldd	r17, Z+1	; 0x01
    27e4:	22 81       	ldd	r18, Z+2	; 0x02
    27e6:	33 81       	ldd	r19, Z+3	; 0x03
    27e8:	44 81       	ldd	r20, Z+4	; 0x04
    27ea:	55 81       	ldd	r21, Z+5	; 0x05
    27ec:	66 81       	ldd	r22, Z+6	; 0x06
    27ee:	77 81       	ldd	r23, Z+7	; 0x07
    27f0:	fe 01       	movw	r30, r28
    27f2:	31 96       	adiw	r30, 0x01	; 1
    27f4:	5f 01       	movw	r10, r30
    27f6:	8a e0       	ldi	r24, 0x0A	; 10
    27f8:	c8 2e       	mov	r12, r24
    27fa:	d1 2c       	mov	r13, r1
    27fc:	72 01       	movw	r14, r4
    27fe:	c4 01       	movw	r24, r8
    2800:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__cvt_u>
    2804:	e9 80       	ldd	r14, Y+1	; 0x01
    2806:	fa 80       	ldd	r15, Y+2	; 0x02
    2808:	d4 01       	movw	r26, r8
    280a:	18 96       	adiw	r26, 0x08	; 8
    280c:	2d 91       	ld	r18, X+
    280e:	3c 91       	ld	r19, X
    2810:	19 97       	sbiw	r26, 0x09	; 9
    2812:	21 50       	subi	r18, 0x01	; 1
    2814:	31 09       	sbc	r19, r1
    2816:	28 1b       	sub	r18, r24
    2818:	39 0b       	sbc	r19, r25
    281a:	82 0d       	add	r24, r2
    281c:	93 1d       	adc	r25, r3
    281e:	ac 01       	movw	r20, r24
    2820:	60 e8       	ldi	r22, 0x80	; 128
    2822:	82 01       	movw	r16, r4
    2824:	c3 01       	movw	r24, r6
    2826:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__pad>
    282a:	9c 01       	movw	r18, r24
    282c:	f3 01       	movw	r30, r6
    282e:	80 81       	ld	r24, Z
    2830:	91 81       	ldd	r25, Z+1	; 0x01
    2832:	90 ff       	sbrs	r25, 0
    2834:	08 c0       	rjmp	.+16     	; 0x2846 <__fmt_u+0xa6>
    2836:	d4 01       	movw	r26, r8
    2838:	12 96       	adiw	r26, 0x02	; 2
    283a:	8d 91       	ld	r24, X+
    283c:	9c 91       	ld	r25, X
    283e:	13 97       	sbiw	r26, 0x03	; 3
    2840:	82 17       	cp	r24, r18
    2842:	93 07       	cpc	r25, r19
    2844:	0c f4       	brge	.+2      	; 0x2848 <__fmt_u+0xa8>
    2846:	c9 01       	movw	r24, r18
    2848:	22 96       	adiw	r28, 0x02	; 2
    284a:	e2 e1       	ldi	r30, 0x12	; 18
    284c:	0c 94 96 1d 	jmp	0x3b2c	; 0x3b2c <__epilogue_restores__>

Disassembly of section .text.__fmt_x:

00000c20 <__fmt_x>:
 c20:	a4 e1       	ldi	r26, 0x14	; 20
 c22:	b0 e0       	ldi	r27, 0x00	; 0
 c24:	e6 e1       	ldi	r30, 0x16	; 22
 c26:	f6 e0       	ldi	r31, 0x06	; 6
 c28:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__prologue_saves__>
 c2c:	98 87       	std	Y+8, r25	; 0x08
 c2e:	8f 83       	std	Y+7, r24	; 0x07
 c30:	7a 83       	std	Y+2, r23	; 0x02
 c32:	69 83       	std	Y+1, r22	; 0x01
 c34:	5c 8b       	std	Y+20, r21	; 0x14
 c36:	4b 8b       	std	Y+19, r20	; 0x13
 c38:	12 2f       	mov	r17, r18
 c3a:	db 01       	movw	r26, r22
 c3c:	12 96       	adiw	r26, 0x02	; 2
 c3e:	ed 91       	ld	r30, X+
 c40:	fc 91       	ld	r31, X
 c42:	13 97       	sbiw	r26, 0x03	; 3
 c44:	14 96       	adiw	r26, 0x04	; 4
 c46:	2d 91       	ld	r18, X+
 c48:	3c 91       	ld	r19, X
 c4a:	15 97       	sbiw	r26, 0x05	; 5
 c4c:	3e 83       	std	Y+6, r19	; 0x06
 c4e:	2d 83       	std	Y+5, r18	; 0x05
 c50:	ed 90       	ld	r14, X+
 c52:	fc 90       	ld	r15, X
 c54:	11 97       	sbiw	r26, 0x01	; 1
 c56:	16 96       	adiw	r26, 0x06	; 6
 c58:	2d 90       	ld	r2, X+
 c5a:	3c 90       	ld	r3, X
 c5c:	17 97       	sbiw	r26, 0x07	; 7
 c5e:	f7 fd       	sbrc	r31, 7
 c60:	03 c0       	rjmp	.+6      	; 0xc68 <__fmt_x+0x48>
 c62:	e8 94       	clt
 c64:	e1 f8       	bld	r14, 1
 c66:	02 c0       	rjmp	.+4      	; 0xc6c <__fmt_x+0x4c>
 c68:	e1 e0       	ldi	r30, 0x01	; 1
 c6a:	f0 e0       	ldi	r31, 0x00	; 0
 c6c:	c7 01       	movw	r24, r14
 c6e:	80 71       	andi	r24, 0x10	; 16
 c70:	99 27       	eor	r25, r25
 c72:	9a 87       	std	Y+10, r25	; 0x0a
 c74:	89 87       	std	Y+9, r24	; 0x09
 c76:	e4 fe       	sbrs	r14, 4
 c78:	1f c0       	rjmp	.+62     	; 0xcb8 <__fmt_x+0x98>
 c7a:	ab 89       	ldd	r26, Y+19	; 0x13
 c7c:	bc 89       	ldd	r27, Y+20	; 0x14
 c7e:	2c 91       	ld	r18, X
 c80:	11 96       	adiw	r26, 0x01	; 1
 c82:	3c 91       	ld	r19, X
 c84:	11 97       	sbiw	r26, 0x01	; 1
 c86:	12 96       	adiw	r26, 0x02	; 2
 c88:	4c 91       	ld	r20, X
 c8a:	12 97       	sbiw	r26, 0x02	; 2
 c8c:	13 96       	adiw	r26, 0x03	; 3
 c8e:	5c 91       	ld	r21, X
 c90:	13 97       	sbiw	r26, 0x03	; 3
 c92:	14 96       	adiw	r26, 0x04	; 4
 c94:	6c 91       	ld	r22, X
 c96:	14 97       	sbiw	r26, 0x04	; 4
 c98:	15 96       	adiw	r26, 0x05	; 5
 c9a:	7c 91       	ld	r23, X
 c9c:	15 97       	sbiw	r26, 0x05	; 5
 c9e:	16 96       	adiw	r26, 0x06	; 6
 ca0:	8c 91       	ld	r24, X
 ca2:	16 97       	sbiw	r26, 0x06	; 6
 ca4:	17 96       	adiw	r26, 0x07	; 7
 ca6:	9c 91       	ld	r25, X
 ca8:	a0 e0       	ldi	r26, 0x00	; 0
 caa:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__cmpdi2_s8>
 cae:	21 f0       	breq	.+8      	; 0xcb8 <__fmt_x+0x98>
 cb0:	8d 81       	ldd	r24, Y+5	; 0x05
 cb2:	9e 81       	ldd	r25, Y+6	; 0x06
 cb4:	02 97       	sbiw	r24, 0x02	; 2
 cb6:	02 c0       	rjmp	.+4      	; 0xcbc <__fmt_x+0x9c>
 cb8:	8d 81       	ldd	r24, Y+5	; 0x05
 cba:	9e 81       	ldd	r25, Y+6	; 0x06
 cbc:	97 01       	movw	r18, r14
 cbe:	28 70       	andi	r18, 0x08	; 8
 cc0:	33 27       	eor	r19, r19
 cc2:	3c 87       	std	Y+12, r19	; 0x0c
 cc4:	2b 87       	std	Y+11, r18	; 0x0b
 cc6:	e3 fc       	sbrc	r14, 3
 cc8:	01 97       	sbiw	r24, 0x01	; 1
 cca:	ab 89       	ldd	r26, Y+19	; 0x13
 ccc:	bc 89       	ldd	r27, Y+20	; 0x14
 cce:	4c 90       	ld	r4, X
 cd0:	11 96       	adiw	r26, 0x01	; 1
 cd2:	5c 90       	ld	r5, X
 cd4:	11 97       	sbiw	r26, 0x01	; 1
 cd6:	12 96       	adiw	r26, 0x02	; 2
 cd8:	6c 90       	ld	r6, X
 cda:	12 97       	sbiw	r26, 0x02	; 2
 cdc:	13 96       	adiw	r26, 0x03	; 3
 cde:	7c 90       	ld	r7, X
 ce0:	13 97       	sbiw	r26, 0x03	; 3
 ce2:	14 96       	adiw	r26, 0x04	; 4
 ce4:	8c 90       	ld	r8, X
 ce6:	14 97       	sbiw	r26, 0x04	; 4
 ce8:	15 96       	adiw	r26, 0x05	; 5
 cea:	9c 90       	ld	r9, X
 cec:	15 97       	sbiw	r26, 0x05	; 5
 cee:	16 96       	adiw	r26, 0x06	; 6
 cf0:	ac 90       	ld	r10, X
 cf2:	16 97       	sbiw	r26, 0x06	; 6
 cf4:	17 96       	adiw	r26, 0x07	; 7
 cf6:	bc 90       	ld	r11, X
 cf8:	a9 81       	ldd	r26, Y+1	; 0x01
 cfa:	ba 81       	ldd	r27, Y+2	; 0x02
 cfc:	18 96       	adiw	r26, 0x08	; 8
 cfe:	cd 90       	ld	r12, X+
 d00:	dc 90       	ld	r13, X
 d02:	19 97       	sbiw	r26, 0x09	; 9
 d04:	b1 e0       	ldi	r27, 0x01	; 1
 d06:	cb 1a       	sub	r12, r27
 d08:	d1 08       	sbc	r13, r1
 d0a:	d1 01       	movw	r26, r2
 d0c:	ac 0d       	add	r26, r12
 d0e:	bd 1d       	adc	r27, r13
 d10:	1c 92       	st	X, r1
 d12:	9c 83       	std	Y+4, r25	; 0x04
 d14:	8b 83       	std	Y+3, r24	; 0x03
 d16:	9f 01       	movw	r18, r30
 d18:	28 1b       	sub	r18, r24
 d1a:	39 0b       	sbc	r19, r25
 d1c:	3e 87       	std	Y+14, r19	; 0x0e
 d1e:	2d 87       	std	Y+13, r18	; 0x0d
 d20:	c7 01       	movw	r24, r14
 d22:	82 70       	andi	r24, 0x02	; 2
 d24:	99 27       	eor	r25, r25
 d26:	98 8b       	std	Y+16, r25	; 0x10
 d28:	8f 87       	std	Y+15, r24	; 0x0f
 d2a:	81 2f       	mov	r24, r17
 d2c:	01 2e       	mov	r0, r17
 d2e:	00 0c       	add	r0, r0
 d30:	99 0b       	sbc	r25, r25
 d32:	dc 01       	movw	r26, r24
 d34:	a1 54       	subi	r26, 0x41	; 65
 d36:	b1 09       	sbc	r27, r1
 d38:	ba 8b       	std	Y+18, r27	; 0x12
 d3a:	a9 8b       	std	Y+17, r26	; 0x11
 d3c:	32 e0       	ldi	r19, 0x02	; 2
 d3e:	c3 16       	cp	r12, r19
 d40:	d1 04       	cpc	r13, r1
 d42:	34 f4       	brge	.+12     	; 0xd50 <__fmt_x+0x130>
 d44:	89 85       	ldd	r24, Y+9	; 0x09
 d46:	9a 85       	ldd	r25, Y+10	; 0x0a
 d48:	89 2b       	or	r24, r25
 d4a:	09 f0       	breq	.+2      	; 0xd4e <__fmt_x+0x12e>
 d4c:	4c c0       	rjmp	.+152    	; 0xde6 <__fmt_x+0x1c6>
 d4e:	73 c0       	rjmp	.+230    	; 0xe36 <__fmt_x+0x216>
 d50:	92 01       	movw	r18, r4
 d52:	a3 01       	movw	r20, r6
 d54:	b4 01       	movw	r22, r8
 d56:	c5 01       	movw	r24, r10
 d58:	a0 e0       	ldi	r26, 0x00	; 0
 d5a:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__cmpdi2_s8>
 d5e:	81 f1       	breq	.+96     	; 0xdc0 <__fmt_x+0x1a0>
 d60:	b1 e0       	ldi	r27, 0x01	; 1
 d62:	cb 1a       	sub	r12, r27
 d64:	d1 08       	sbc	r13, r1
 d66:	c2 01       	movw	r24, r4
 d68:	8f 70       	andi	r24, 0x0F	; 15
 d6a:	99 27       	eor	r25, r25
 d6c:	8a 30       	cpi	r24, 0x0A	; 10
 d6e:	91 05       	cpc	r25, r1
 d70:	14 f4       	brge	.+4      	; 0xd76 <__fmt_x+0x156>
 d72:	c0 96       	adiw	r24, 0x30	; 48
 d74:	02 c0       	rjmp	.+4      	; 0xd7a <__fmt_x+0x15a>
 d76:	89 5a       	subi	r24, 0xA9	; 169
 d78:	9f 4f       	sbci	r25, 0xFF	; 255
 d7a:	e9 89       	ldd	r30, Y+17	; 0x11
 d7c:	fa 89       	ldd	r31, Y+18	; 0x12
 d7e:	7a 97       	sbiw	r30, 0x1a	; 26
 d80:	48 f4       	brcc	.+18     	; 0xd94 <__fmt_x+0x174>
 d82:	9c 01       	movw	r18, r24
 d84:	20 62       	ori	r18, 0x20	; 32
 d86:	21 56       	subi	r18, 0x61	; 97
 d88:	31 09       	sbc	r19, r1
 d8a:	2a 31       	cpi	r18, 0x1A	; 26
 d8c:	31 05       	cpc	r19, r1
 d8e:	10 f4       	brcc	.+4      	; 0xd94 <__fmt_x+0x174>
 d90:	0e 94 21 20 	call	0x4042	; 0x4042 <toupper>
 d94:	f1 01       	movw	r30, r2
 d96:	ec 0d       	add	r30, r12
 d98:	fd 1d       	adc	r31, r13
 d9a:	80 83       	st	Z, r24
 d9c:	2b 81       	ldd	r18, Y+3	; 0x03
 d9e:	3c 81       	ldd	r19, Y+4	; 0x04
 da0:	21 50       	subi	r18, 0x01	; 1
 da2:	31 09       	sbc	r19, r1
 da4:	3c 83       	std	Y+4, r19	; 0x04
 da6:	2b 83       	std	Y+3, r18	; 0x03
 da8:	92 01       	movw	r18, r4
 daa:	a3 01       	movw	r20, r6
 dac:	b4 01       	movw	r22, r8
 dae:	c5 01       	movw	r24, r10
 db0:	04 e0       	ldi	r16, 0x04	; 4
 db2:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <__lshrdi3>
 db6:	29 01       	movw	r4, r18
 db8:	3a 01       	movw	r6, r20
 dba:	4b 01       	movw	r8, r22
 dbc:	5c 01       	movw	r10, r24
 dbe:	be cf       	rjmp	.-132    	; 0xd3c <__fmt_x+0x11c>
 dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
 dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
 dc4:	ab 81       	ldd	r26, Y+3	; 0x03
 dc6:	bc 81       	ldd	r27, Y+4	; 0x04
 dc8:	8a 0f       	add	r24, r26
 dca:	9b 1f       	adc	r25, r27
 dcc:	18 16       	cp	r1, r24
 dce:	19 06       	cpc	r1, r25
 dd0:	3c f2       	brlt	.-114    	; 0xd60 <__fmt_x+0x140>
 dd2:	1a 16       	cp	r1, r26
 dd4:	1b 06       	cpc	r1, r27
 dd6:	0c f0       	brlt	.+2      	; 0xdda <__fmt_x+0x1ba>
 dd8:	b5 cf       	rjmp	.-150    	; 0xd44 <__fmt_x+0x124>
 dda:	ef 85       	ldd	r30, Y+15	; 0x0f
 ddc:	f8 89       	ldd	r31, Y+16	; 0x10
 dde:	ef 2b       	or	r30, r31
 de0:	09 f0       	breq	.+2      	; 0xde4 <__fmt_x+0x1c4>
 de2:	be cf       	rjmp	.-132    	; 0xd60 <__fmt_x+0x140>
 de4:	af cf       	rjmp	.-162    	; 0xd44 <__fmt_x+0x124>
 de6:	ab 89       	ldd	r26, Y+19	; 0x13
 de8:	bc 89       	ldd	r27, Y+20	; 0x14
 dea:	2c 91       	ld	r18, X
 dec:	11 96       	adiw	r26, 0x01	; 1
 dee:	3c 91       	ld	r19, X
 df0:	11 97       	sbiw	r26, 0x01	; 1
 df2:	12 96       	adiw	r26, 0x02	; 2
 df4:	4c 91       	ld	r20, X
 df6:	12 97       	sbiw	r26, 0x02	; 2
 df8:	13 96       	adiw	r26, 0x03	; 3
 dfa:	5c 91       	ld	r21, X
 dfc:	13 97       	sbiw	r26, 0x03	; 3
 dfe:	14 96       	adiw	r26, 0x04	; 4
 e00:	6c 91       	ld	r22, X
 e02:	14 97       	sbiw	r26, 0x04	; 4
 e04:	15 96       	adiw	r26, 0x05	; 5
 e06:	7c 91       	ld	r23, X
 e08:	15 97       	sbiw	r26, 0x05	; 5
 e0a:	16 96       	adiw	r26, 0x06	; 6
 e0c:	8c 91       	ld	r24, X
 e0e:	16 97       	sbiw	r26, 0x06	; 6
 e10:	17 96       	adiw	r26, 0x07	; 7
 e12:	9c 91       	ld	r25, X
 e14:	a0 e0       	ldi	r26, 0x00	; 0
 e16:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__cmpdi2_s8>
 e1a:	69 f0       	breq	.+26     	; 0xe36 <__fmt_x+0x216>
 e1c:	f1 01       	movw	r30, r2
 e1e:	ec 0d       	add	r30, r12
 e20:	fd 1d       	adc	r31, r13
 e22:	31 97       	sbiw	r30, 0x01	; 1
 e24:	10 83       	st	Z, r17
 e26:	b2 e0       	ldi	r27, 0x02	; 2
 e28:	cb 1a       	sub	r12, r27
 e2a:	d1 08       	sbc	r13, r1
 e2c:	f1 01       	movw	r30, r2
 e2e:	ec 0d       	add	r30, r12
 e30:	fd 1d       	adc	r31, r13
 e32:	80 e3       	ldi	r24, 0x30	; 48
 e34:	80 83       	st	Z, r24
 e36:	eb 85       	ldd	r30, Y+11	; 0x0b
 e38:	fc 85       	ldd	r31, Y+12	; 0x0c
 e3a:	ef 2b       	or	r30, r31
 e3c:	41 f0       	breq	.+16     	; 0xe4e <__fmt_x+0x22e>
 e3e:	f1 e0       	ldi	r31, 0x01	; 1
 e40:	cf 1a       	sub	r12, r31
 e42:	d1 08       	sbc	r13, r1
 e44:	f1 01       	movw	r30, r2
 e46:	ec 0d       	add	r30, r12
 e48:	fd 1d       	adc	r31, r13
 e4a:	80 e2       	ldi	r24, 0x20	; 32
 e4c:	80 83       	st	Z, r24
 e4e:	a9 81       	ldd	r26, Y+1	; 0x01
 e50:	ba 81       	ldd	r27, Y+2	; 0x02
 e52:	18 96       	adiw	r26, 0x08	; 8
 e54:	2d 91       	ld	r18, X+
 e56:	3c 91       	ld	r19, X
 e58:	19 97       	sbiw	r26, 0x09	; 9
 e5a:	21 50       	subi	r18, 0x01	; 1
 e5c:	31 09       	sbc	r19, r1
 e5e:	2c 19       	sub	r18, r12
 e60:	3d 09       	sbc	r19, r13
 e62:	c2 0c       	add	r12, r2
 e64:	d3 1c       	adc	r13, r3
 e66:	a6 01       	movw	r20, r12
 e68:	60 e8       	ldi	r22, 0x80	; 128
 e6a:	0d 81       	ldd	r16, Y+5	; 0x05
 e6c:	1e 81       	ldd	r17, Y+6	; 0x06
 e6e:	8f 81       	ldd	r24, Y+7	; 0x07
 e70:	98 85       	ldd	r25, Y+8	; 0x08
 e72:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__pad>
 e76:	9c 01       	movw	r18, r24
 e78:	ef 81       	ldd	r30, Y+7	; 0x07
 e7a:	f8 85       	ldd	r31, Y+8	; 0x08
 e7c:	80 81       	ld	r24, Z
 e7e:	91 81       	ldd	r25, Z+1	; 0x01
 e80:	90 ff       	sbrs	r25, 0
 e82:	09 c0       	rjmp	.+18     	; 0xe96 <__fmt_x+0x276>
 e84:	a9 81       	ldd	r26, Y+1	; 0x01
 e86:	ba 81       	ldd	r27, Y+2	; 0x02
 e88:	12 96       	adiw	r26, 0x02	; 2
 e8a:	8d 91       	ld	r24, X+
 e8c:	9c 91       	ld	r25, X
 e8e:	13 97       	sbiw	r26, 0x03	; 3
 e90:	82 17       	cp	r24, r18
 e92:	93 07       	cpc	r25, r19
 e94:	0c f4       	brge	.+2      	; 0xe98 <__fmt_x+0x278>
 e96:	c9 01       	movw	r24, r18
 e98:	64 96       	adiw	r28, 0x14	; 20
 e9a:	e2 e1       	ldi	r30, 0x12	; 18
 e9c:	0c 94 96 1d 	jmp	0x3b2c	; 0x3b2c <__epilogue_restores__>

Disassembly of section .text.__pop_float:

00003a78 <__pop_float>:
    3a78:	fa 01       	movw	r30, r20
    3a7a:	60 38       	cpi	r22, 0x80	; 128
    3a7c:	71 05       	cpc	r23, r1
    3a7e:	cc f0       	brlt	.+50     	; 0x3ab2 <__pop_float+0x3a>
    3a80:	62 38       	cpi	r22, 0x82	; 130
    3a82:	71 05       	cpc	r23, r1
    3a84:	1c f0       	brlt	.+6      	; 0x3a8c <__pop_float+0x14>
    3a86:	63 38       	cpi	r22, 0x83	; 131
    3a88:	71 05       	cpc	r23, r1
    3a8a:	99 f4       	brne	.+38     	; 0x3ab2 <__pop_float+0x3a>
    3a8c:	a0 81       	ld	r26, Z
    3a8e:	b1 81       	ldd	r27, Z+1	; 0x01
    3a90:	9d 01       	movw	r18, r26
    3a92:	2c 5f       	subi	r18, 0xFC	; 252
    3a94:	3f 4f       	sbci	r19, 0xFF	; 255
    3a96:	31 83       	std	Z+1, r19	; 0x01
    3a98:	20 83       	st	Z, r18
    3a9a:	4d 91       	ld	r20, X+
    3a9c:	5d 91       	ld	r21, X+
    3a9e:	6d 91       	ld	r22, X+
    3aa0:	7c 91       	ld	r23, X
    3aa2:	fc 01       	movw	r30, r24
    3aa4:	40 83       	st	Z, r20
    3aa6:	51 83       	std	Z+1, r21	; 0x01
    3aa8:	62 83       	std	Z+2, r22	; 0x02
    3aaa:	73 83       	std	Z+3, r23	; 0x03
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	08 95       	ret
    3ab2:	80 e0       	ldi	r24, 0x00	; 0
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	08 95       	ret

Disassembly of section .text.__pop_int:

0000173c <__pop_int>:
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	fc 01       	movw	r30, r24
    1746:	d9 01       	movw	r26, r18
    1748:	68 38       	cpi	r22, 0x88	; 136
    174a:	71 05       	cpc	r23, r1
    174c:	31 f1       	breq	.+76     	; 0x179a <__pop_int+0x5e>
    174e:	94 f4       	brge	.+36     	; 0x1774 <__pop_int+0x38>
    1750:	61 38       	cpi	r22, 0x81	; 129
    1752:	71 05       	cpc	r23, r1
    1754:	b1 f1       	breq	.+108    	; 0x17c2 <__pop_int+0x86>
    1756:	2c f4       	brge	.+10     	; 0x1762 <__pop_int+0x26>
    1758:	60 38       	cpi	r22, 0x80	; 128
    175a:	71 05       	cpc	r23, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <__pop_int+0x24>
    175e:	78 c0       	rjmp	.+240    	; 0x1850 <__pop_int+0x114>
    1760:	9f c0       	rjmp	.+318    	; 0x18a0 <__pop_int+0x164>
    1762:	62 38       	cpi	r22, 0x82	; 130
    1764:	71 05       	cpc	r23, r1
    1766:	09 f4       	brne	.+2      	; 0x176a <__pop_int+0x2e>
    1768:	59 c0       	rjmp	.+178    	; 0x181c <__pop_int+0xe0>
    176a:	64 38       	cpi	r22, 0x84	; 132
    176c:	71 05       	cpc	r23, r1
    176e:	09 f4       	brne	.+2      	; 0x1772 <__pop_int+0x36>
    1770:	6f c0       	rjmp	.+222    	; 0x1850 <__pop_int+0x114>
    1772:	96 c0       	rjmp	.+300    	; 0x18a0 <__pop_int+0x164>
    1774:	60 3a       	cpi	r22, 0xA0	; 160
    1776:	71 05       	cpc	r23, r1
    1778:	09 f4       	brne	.+2      	; 0x177c <__pop_int+0x40>
    177a:	48 c0       	rjmp	.+144    	; 0x180c <__pop_int+0xd0>
    177c:	2c f4       	brge	.+10     	; 0x1788 <__pop_int+0x4c>
    177e:	60 39       	cpi	r22, 0x90	; 144
    1780:	71 05       	cpc	r23, r1
    1782:	09 f4       	brne	.+2      	; 0x1786 <__pop_int+0x4a>
    1784:	4b c0       	rjmp	.+150    	; 0x181c <__pop_int+0xe0>
    1786:	8c c0       	rjmp	.+280    	; 0x18a0 <__pop_int+0x164>
    1788:	60 3c       	cpi	r22, 0xC0	; 192
    178a:	71 05       	cpc	r23, r1
    178c:	09 f4       	brne	.+2      	; 0x1790 <__pop_int+0x54>
    178e:	76 c0       	rjmp	.+236    	; 0x187c <__pop_int+0x140>
    1790:	60 3f       	cpi	r22, 0xF0	; 240
    1792:	71 05       	cpc	r23, r1
    1794:	09 f4       	brne	.+2      	; 0x1798 <__pop_int+0x5c>
    1796:	72 c0       	rjmp	.+228    	; 0x187c <__pop_int+0x140>
    1798:	83 c0       	rjmp	.+262    	; 0x18a0 <__pop_int+0x164>
    179a:	cd 91       	ld	r28, X+
    179c:	dc 91       	ld	r29, X
    179e:	11 97       	sbiw	r26, 0x01	; 1
    17a0:	ce 01       	movw	r24, r28
    17a2:	02 96       	adiw	r24, 0x02	; 2
    17a4:	8d 93       	st	X+, r24
    17a6:	9c 93       	st	X, r25
    17a8:	45 2b       	or	r20, r21
    17aa:	39 f0       	breq	.+14     	; 0x17ba <__pop_int+0x7e>
    17ac:	98 81       	ld	r25, Y
    17ae:	89 2f       	mov	r24, r25
    17b0:	88 0f       	add	r24, r24
    17b2:	88 0b       	sbc	r24, r24
    17b4:	90 83       	st	Z, r25
    17b6:	81 83       	std	Z+1, r24	; 0x01
    17b8:	5b c0       	rjmp	.+182    	; 0x1870 <__pop_int+0x134>
    17ba:	88 81       	ld	r24, Y
    17bc:	80 83       	st	Z, r24
    17be:	11 82       	std	Z+1, r1	; 0x01
    17c0:	68 c0       	rjmp	.+208    	; 0x1892 <__pop_int+0x156>
    17c2:	cd 91       	ld	r28, X+
    17c4:	dc 91       	ld	r29, X
    17c6:	11 97       	sbiw	r26, 0x01	; 1
    17c8:	ce 01       	movw	r24, r28
    17ca:	04 96       	adiw	r24, 0x04	; 4
    17cc:	8d 93       	st	X+, r24
    17ce:	9c 93       	st	X, r25
    17d0:	45 2b       	or	r20, r21
    17d2:	99 f0       	breq	.+38     	; 0x17fa <__pop_int+0xbe>
    17d4:	88 81       	ld	r24, Y
    17d6:	99 81       	ldd	r25, Y+1	; 0x01
    17d8:	aa 81       	ldd	r26, Y+2	; 0x02
    17da:	bb 81       	ldd	r27, Y+3	; 0x03
    17dc:	ac 01       	movw	r20, r24
    17de:	bd 01       	movw	r22, r26
    17e0:	77 0f       	add	r23, r23
    17e2:	44 0b       	sbc	r20, r20
    17e4:	54 2f       	mov	r21, r20
    17e6:	ba 01       	movw	r22, r20
    17e8:	80 83       	st	Z, r24
    17ea:	91 83       	std	Z+1, r25	; 0x01
    17ec:	a2 83       	std	Z+2, r26	; 0x02
    17ee:	b3 83       	std	Z+3, r27	; 0x03
    17f0:	44 83       	std	Z+4, r20	; 0x04
    17f2:	45 83       	std	Z+5, r20	; 0x05
    17f4:	46 83       	std	Z+6, r20	; 0x06
    17f6:	47 83       	std	Z+7, r20	; 0x07
    17f8:	28 c0       	rjmp	.+80     	; 0x184a <__pop_int+0x10e>
    17fa:	08 81       	ld	r16, Y
    17fc:	19 81       	ldd	r17, Y+1	; 0x01
    17fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1800:	3b 81       	ldd	r19, Y+3	; 0x03
    1802:	00 83       	st	Z, r16
    1804:	11 83       	std	Z+1, r17	; 0x01
    1806:	22 83       	std	Z+2, r18	; 0x02
    1808:	33 83       	std	Z+3, r19	; 0x03
    180a:	45 c0       	rjmp	.+138    	; 0x1896 <__pop_int+0x15a>
    180c:	cd 91       	ld	r28, X+
    180e:	dc 91       	ld	r29, X
    1810:	11 97       	sbiw	r26, 0x01	; 1
    1812:	ce 01       	movw	r24, r28
    1814:	02 96       	adiw	r24, 0x02	; 2
    1816:	8d 93       	st	X+, r24
    1818:	9c 93       	st	X, r25
    181a:	23 c0       	rjmp	.+70     	; 0x1862 <__pop_int+0x126>
    181c:	cd 91       	ld	r28, X+
    181e:	dc 91       	ld	r29, X
    1820:	11 97       	sbiw	r26, 0x01	; 1
    1822:	ce 01       	movw	r24, r28
    1824:	08 96       	adiw	r24, 0x08	; 8
    1826:	8d 93       	st	X+, r24
    1828:	9c 93       	st	X, r25
    182a:	78 81       	ld	r23, Y
    182c:	69 81       	ldd	r22, Y+1	; 0x01
    182e:	5a 81       	ldd	r21, Y+2	; 0x02
    1830:	4b 81       	ldd	r20, Y+3	; 0x03
    1832:	3c 81       	ldd	r19, Y+4	; 0x04
    1834:	2d 81       	ldd	r18, Y+5	; 0x05
    1836:	9e 81       	ldd	r25, Y+6	; 0x06
    1838:	8f 81       	ldd	r24, Y+7	; 0x07
    183a:	70 83       	st	Z, r23
    183c:	61 83       	std	Z+1, r22	; 0x01
    183e:	52 83       	std	Z+2, r21	; 0x02
    1840:	43 83       	std	Z+3, r20	; 0x03
    1842:	34 83       	std	Z+4, r19	; 0x04
    1844:	25 83       	std	Z+5, r18	; 0x05
    1846:	96 83       	std	Z+6, r25	; 0x06
    1848:	87 83       	std	Z+7, r24	; 0x07
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	2a c0       	rjmp	.+84     	; 0x18a4 <__pop_int+0x168>
    1850:	cd 91       	ld	r28, X+
    1852:	dc 91       	ld	r29, X
    1854:	11 97       	sbiw	r26, 0x01	; 1
    1856:	ce 01       	movw	r24, r28
    1858:	02 96       	adiw	r24, 0x02	; 2
    185a:	8d 93       	st	X+, r24
    185c:	9c 93       	st	X, r25
    185e:	45 2b       	or	r20, r21
    1860:	a1 f0       	breq	.+40     	; 0x188a <__pop_int+0x14e>
    1862:	99 81       	ldd	r25, Y+1	; 0x01
    1864:	28 81       	ld	r18, Y
    1866:	89 2f       	mov	r24, r25
    1868:	88 0f       	add	r24, r24
    186a:	88 0b       	sbc	r24, r24
    186c:	20 83       	st	Z, r18
    186e:	91 83       	std	Z+1, r25	; 0x01
    1870:	82 83       	std	Z+2, r24	; 0x02
    1872:	83 83       	std	Z+3, r24	; 0x03
    1874:	84 83       	std	Z+4, r24	; 0x04
    1876:	85 83       	std	Z+5, r24	; 0x05
    1878:	86 83       	std	Z+6, r24	; 0x06
    187a:	e6 cf       	rjmp	.-52     	; 0x1848 <__pop_int+0x10c>
    187c:	cd 91       	ld	r28, X+
    187e:	dc 91       	ld	r29, X
    1880:	11 97       	sbiw	r26, 0x01	; 1
    1882:	ce 01       	movw	r24, r28
    1884:	02 96       	adiw	r24, 0x02	; 2
    1886:	8d 93       	st	X+, r24
    1888:	9c 93       	st	X, r25
    188a:	08 81       	ld	r16, Y
    188c:	19 81       	ldd	r17, Y+1	; 0x01
    188e:	00 83       	st	Z, r16
    1890:	11 83       	std	Z+1, r17	; 0x01
    1892:	12 82       	std	Z+2, r1	; 0x02
    1894:	13 82       	std	Z+3, r1	; 0x03
    1896:	14 82       	std	Z+4, r1	; 0x04
    1898:	15 82       	std	Z+5, r1	; 0x05
    189a:	16 82       	std	Z+6, r1	; 0x06
    189c:	17 82       	std	Z+7, r1	; 0x07
    189e:	d5 cf       	rjmp	.-86     	; 0x184a <__pop_int+0x10e>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	1f 91       	pop	r17
    18aa:	0f 91       	pop	r16
    18ac:	08 95       	ret

Disassembly of section .text.__pop_ptr:

00001eee <__pop_ptr>:
    1eee:	cf 93       	push	r28
    1ef0:	df 93       	push	r29
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	f9 01       	movw	r30, r18
    1ef6:	64 38       	cpi	r22, 0x84	; 132
    1ef8:	71 05       	cpc	r23, r1
    1efa:	d9 f1       	breq	.+118    	; 0x1f72 <__pop_ptr+0x84>
    1efc:	64 f4       	brge	.+24     	; 0x1f16 <__pop_ptr+0x28>
    1efe:	61 38       	cpi	r22, 0x81	; 129
    1f00:	71 05       	cpc	r23, r1
    1f02:	21 f1       	breq	.+72     	; 0x1f4c <__pop_ptr+0x5e>
    1f04:	62 38       	cpi	r22, 0x82	; 130
    1f06:	71 05       	cpc	r23, r1
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <__pop_ptr+0x1e>
    1f0a:	40 c0       	rjmp	.+128    	; 0x1f8c <__pop_ptr+0x9e>
    1f0c:	60 38       	cpi	r22, 0x80	; 128
    1f0e:	71 05       	cpc	r23, r1
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <__pop_ptr+0x26>
    1f12:	54 c0       	rjmp	.+168    	; 0x1fbc <__pop_ptr+0xce>
    1f14:	2e c0       	rjmp	.+92     	; 0x1f72 <__pop_ptr+0x84>
    1f16:	60 39       	cpi	r22, 0x90	; 144
    1f18:	71 05       	cpc	r23, r1
    1f1a:	c1 f1       	breq	.+112    	; 0x1f8c <__pop_ptr+0x9e>
    1f1c:	84 f4       	brge	.+32     	; 0x1f3e <__pop_ptr+0x50>
    1f1e:	68 38       	cpi	r22, 0x88	; 136
    1f20:	71 05       	cpc	r23, r1
    1f22:	09 f0       	breq	.+2      	; 0x1f26 <__pop_ptr+0x38>
    1f24:	4b c0       	rjmp	.+150    	; 0x1fbc <__pop_ptr+0xce>
    1f26:	c0 81       	ld	r28, Z
    1f28:	d1 81       	ldd	r29, Z+1	; 0x01
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	02 96       	adiw	r24, 0x02	; 2
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	80 83       	st	Z, r24
    1f32:	e8 81       	ld	r30, Y
    1f34:	f9 81       	ldd	r31, Y+1	; 0x01
    1f36:	ed 93       	st	X+, r30
    1f38:	fc 93       	st	X, r31
    1f3a:	40 83       	st	Z, r20
    1f3c:	3c c0       	rjmp	.+120    	; 0x1fb6 <__pop_ptr+0xc8>
    1f3e:	60 3a       	cpi	r22, 0xA0	; 160
    1f40:	71 05       	cpc	r23, r1
    1f42:	b9 f0       	breq	.+46     	; 0x1f72 <__pop_ptr+0x84>
    1f44:	60 3c       	cpi	r22, 0xC0	; 192
    1f46:	71 05       	cpc	r23, r1
    1f48:	a1 f0       	breq	.+40     	; 0x1f72 <__pop_ptr+0x84>
    1f4a:	38 c0       	rjmp	.+112    	; 0x1fbc <__pop_ptr+0xce>
    1f4c:	c0 81       	ld	r28, Z
    1f4e:	d1 81       	ldd	r29, Z+1	; 0x01
    1f50:	ce 01       	movw	r24, r28
    1f52:	02 96       	adiw	r24, 0x02	; 2
    1f54:	91 83       	std	Z+1, r25	; 0x01
    1f56:	80 83       	st	Z, r24
    1f58:	e8 81       	ld	r30, Y
    1f5a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f5c:	ed 93       	st	X+, r30
    1f5e:	fc 93       	st	X, r31
    1f60:	05 2e       	mov	r0, r21
    1f62:	00 0c       	add	r0, r0
    1f64:	66 0b       	sbc	r22, r22
    1f66:	77 0b       	sbc	r23, r23
    1f68:	40 83       	st	Z, r20
    1f6a:	51 83       	std	Z+1, r21	; 0x01
    1f6c:	62 83       	std	Z+2, r22	; 0x02
    1f6e:	73 83       	std	Z+3, r23	; 0x03
    1f70:	22 c0       	rjmp	.+68     	; 0x1fb6 <__pop_ptr+0xc8>
    1f72:	c0 81       	ld	r28, Z
    1f74:	d1 81       	ldd	r29, Z+1	; 0x01
    1f76:	ce 01       	movw	r24, r28
    1f78:	02 96       	adiw	r24, 0x02	; 2
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	80 83       	st	Z, r24
    1f7e:	e8 81       	ld	r30, Y
    1f80:	f9 81       	ldd	r31, Y+1	; 0x01
    1f82:	ed 93       	st	X+, r30
    1f84:	fc 93       	st	X, r31
    1f86:	51 83       	std	Z+1, r21	; 0x01
    1f88:	40 83       	st	Z, r20
    1f8a:	15 c0       	rjmp	.+42     	; 0x1fb6 <__pop_ptr+0xc8>
    1f8c:	c0 81       	ld	r28, Z
    1f8e:	d1 81       	ldd	r29, Z+1	; 0x01
    1f90:	ce 01       	movw	r24, r28
    1f92:	02 96       	adiw	r24, 0x02	; 2
    1f94:	91 83       	std	Z+1, r25	; 0x01
    1f96:	80 83       	st	Z, r24
    1f98:	e8 81       	ld	r30, Y
    1f9a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f9c:	ed 93       	st	X+, r30
    1f9e:	fc 93       	st	X, r31
    1fa0:	51 83       	std	Z+1, r21	; 0x01
    1fa2:	40 83       	st	Z, r20
    1fa4:	85 2f       	mov	r24, r21
    1fa6:	88 0f       	add	r24, r24
    1fa8:	88 0b       	sbc	r24, r24
    1faa:	82 83       	std	Z+2, r24	; 0x02
    1fac:	83 83       	std	Z+3, r24	; 0x03
    1fae:	84 83       	std	Z+4, r24	; 0x04
    1fb0:	85 83       	std	Z+5, r24	; 0x05
    1fb2:	86 83       	std	Z+6, r24	; 0x06
    1fb4:	87 83       	std	Z+7, r24	; 0x07
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <__pop_ptr+0xd2>
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	08 95       	ret

Disassembly of section .text.atoi:

00002d46 <atoi>:
    2d46:	cf 93       	push	r28
    2d48:	9b 01       	movw	r18, r22
    2d4a:	48 2f       	mov	r20, r24
    2d4c:	f9 01       	movw	r30, r18
    2d4e:	84 91       	lpm	r24, Z
    2d50:	47 fd       	sbrc	r20, 7
    2d52:	80 81       	ld	r24, Z
    2d54:	80 32       	cpi	r24, 0x20	; 32
    2d56:	c9 f1       	breq	.+114    	; 0x2dca <atoi+0x84>
    2d58:	68 2f       	mov	r22, r24
    2d5a:	08 2e       	mov	r0, r24
    2d5c:	00 0c       	add	r0, r0
    2d5e:	77 0b       	sbc	r23, r23
    2d60:	69 50       	subi	r22, 0x09	; 9
    2d62:	71 09       	sbc	r23, r1
    2d64:	65 30       	cpi	r22, 0x05	; 5
    2d66:	71 05       	cpc	r23, r1
    2d68:	80 f1       	brcs	.+96     	; 0x2dca <atoi+0x84>
    2d6a:	8b 32       	cpi	r24, 0x2B	; 43
    2d6c:	49 f5       	brne	.+82     	; 0x2dc0 <atoi+0x7a>
    2d6e:	a0 e0       	ldi	r26, 0x00	; 0
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	2f 5f       	subi	r18, 0xFF	; 255
    2d74:	3f 4f       	sbci	r19, 0xFF	; 255
    2d76:	4f 4f       	sbci	r20, 0xFF	; 255
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <atoi+0x38>
    2d7a:	a0 e0       	ldi	r26, 0x00	; 0
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	ca e0       	ldi	r28, 0x0A	; 10
    2d84:	f9 01       	movw	r30, r18
    2d86:	64 91       	lpm	r22, Z
    2d88:	47 fd       	sbrc	r20, 7
    2d8a:	60 81       	ld	r22, Z
    2d8c:	06 2e       	mov	r0, r22
    2d8e:	00 0c       	add	r0, r0
    2d90:	77 0b       	sbc	r23, r23
    2d92:	60 53       	subi	r22, 0x30	; 48
    2d94:	71 09       	sbc	r23, r1
    2d96:	6a 30       	cpi	r22, 0x0A	; 10
    2d98:	71 05       	cpc	r23, r1
    2d9a:	60 f4       	brcc	.+24     	; 0x2db4 <atoi+0x6e>
    2d9c:	c8 9f       	mul	r28, r24
    2d9e:	f0 01       	movw	r30, r0
    2da0:	c9 9f       	mul	r28, r25
    2da2:	f0 0d       	add	r31, r0
    2da4:	11 24       	eor	r1, r1
    2da6:	2f 5f       	subi	r18, 0xFF	; 255
    2da8:	3f 4f       	sbci	r19, 0xFF	; 255
    2daa:	4f 4f       	sbci	r20, 0xFF	; 255
    2dac:	cf 01       	movw	r24, r30
    2dae:	86 1b       	sub	r24, r22
    2db0:	97 0b       	sbc	r25, r23
    2db2:	e8 cf       	rjmp	.-48     	; 0x2d84 <atoi+0x3e>
    2db4:	ab 2b       	or	r26, r27
    2db6:	69 f4       	brne	.+26     	; 0x2dd2 <atoi+0x8c>
    2db8:	91 95       	neg	r25
    2dba:	81 95       	neg	r24
    2dbc:	91 09       	sbc	r25, r1
    2dbe:	09 c0       	rjmp	.+18     	; 0x2dd2 <atoi+0x8c>
    2dc0:	8d 32       	cpi	r24, 0x2D	; 45
    2dc2:	d9 f6       	brne	.-74     	; 0x2d7a <atoi+0x34>
    2dc4:	a1 e0       	ldi	r26, 0x01	; 1
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	d4 cf       	rjmp	.-88     	; 0x2d72 <atoi+0x2c>
    2dca:	2f 5f       	subi	r18, 0xFF	; 255
    2dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dce:	4f 4f       	sbci	r20, 0xFF	; 255
    2dd0:	bd cf       	rjmp	.-134    	; 0x2d4c <atoi+0x6>
    2dd2:	cf 91       	pop	r28
    2dd4:	08 95       	ret

Disassembly of section .text.memset:

00004030 <memset>:
    4030:	fc 01       	movw	r30, r24
    4032:	48 0f       	add	r20, r24
    4034:	59 1f       	adc	r21, r25
    4036:	e4 17       	cp	r30, r20
    4038:	f5 07       	cpc	r31, r21
    403a:	11 f0       	breq	.+4      	; 0x4040 <memset+0x10>
    403c:	61 93       	st	Z+, r22
    403e:	fb cf       	rjmp	.-10     	; 0x4036 <memset+0x6>
    4040:	08 95       	ret

Disassembly of section .text.strlen:

00003bf4 <strlen>:
    3bf4:	cf 92       	push	r12
    3bf6:	df 92       	push	r13
    3bf8:	ef 92       	push	r14
    3bfa:	6b 01       	movw	r12, r22
    3bfc:	e8 2e       	mov	r14, r24
    3bfe:	a8 2f       	mov	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	fc 01       	movw	r30, r24
    3c04:	24 91       	lpm	r18, Z
    3c06:	a7 fd       	sbrc	r26, 7
    3c08:	20 81       	ld	r18, Z
    3c0a:	22 23       	and	r18, r18
    3c0c:	19 f0       	breq	.+6      	; 0x3c14 <strlen+0x20>
    3c0e:	01 96       	adiw	r24, 0x01	; 1
    3c10:	a1 1d       	adc	r26, r1
    3c12:	f7 cf       	rjmp	.-18     	; 0x3c02 <strlen+0xe>
    3c14:	8c 19       	sub	r24, r12
    3c16:	9d 09       	sbc	r25, r13
    3c18:	ef 90       	pop	r14
    3c1a:	df 90       	pop	r13
    3c1c:	cf 90       	pop	r12
    3c1e:	08 95       	ret

Disassembly of section .text.tolower:

00004054 <tolower>:
    4054:	9c 01       	movw	r18, r24
    4056:	21 54       	subi	r18, 0x41	; 65
    4058:	31 09       	sbc	r19, r1
    405a:	2a 31       	cpi	r18, 0x1A	; 26
    405c:	31 05       	cpc	r19, r1
    405e:	08 f4       	brcc	.+2      	; 0x4062 <tolower+0xe>
    4060:	80 62       	ori	r24, 0x20	; 32
    4062:	08 95       	ret

Disassembly of section .text.toupper:

00004042 <toupper>:
    4042:	9c 01       	movw	r18, r24
    4044:	21 56       	subi	r18, 0x61	; 97
    4046:	31 09       	sbc	r19, r1
    4048:	2a 31       	cpi	r18, 0x1A	; 26
    404a:	31 05       	cpc	r19, r1
    404c:	10 f4       	brcc	.+4      	; 0x4052 <toupper+0x10>
    404e:	8f 75       	andi	r24, 0x5F	; 95
    4050:	99 27       	eor	r25, r25
    4052:	08 95       	ret

Disassembly of section .text._Exit:

00004128 <_Exit>:
    4128:	0e 94 b5 00 	call	0x16a	; 0x16a <_exit>

Disassembly of section .text.__vsprintf:

00003f9c <__vsprintf>:
    3f9c:	0f 93       	push	r16
    3f9e:	1f 93       	push	r17
    3fa0:	89 01       	movw	r16, r18
    3fa2:	9a 01       	movw	r18, r20
    3fa4:	46 2f       	mov	r20, r22
    3fa6:	6f ef       	ldi	r22, 0xFF	; 255
    3fa8:	7f e7       	ldi	r23, 0x7F	; 127
    3faa:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__vsnprintf>
    3fae:	1f 91       	pop	r17
    3fb0:	0f 91       	pop	r16
    3fb2:	08 95       	ret

Disassembly of section .text.__vsnprintf:

000029a0 <__vsnprintf>:
    29a0:	6f 92       	push	r6
    29a2:	7f 92       	push	r7
    29a4:	8f 92       	push	r8
    29a6:	ef 92       	push	r14
    29a8:	ff 92       	push	r15
    29aa:	0f 93       	push	r16
    29ac:	1f 93       	push	r17
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
    29b6:	61 97       	sbiw	r28, 0x11	; 17
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	f8 94       	cli
    29bc:	de bf       	out	0x3e, r29	; 62
    29be:	0f be       	out	0x3f, r0	; 63
    29c0:	cd bf       	out	0x3d, r28	; 61
    29c2:	fe 01       	movw	r30, r28
    29c4:	31 96       	adiw	r30, 0x01	; 1
    29c6:	51 e1       	ldi	r21, 0x11	; 17
    29c8:	df 01       	movw	r26, r30
    29ca:	1d 92       	st	X+, r1
    29cc:	5a 95       	dec	r21
    29ce:	e9 f7       	brne	.-6      	; 0x29ca <__vsnprintf+0x2a>
    29d0:	a2 e0       	ldi	r26, 0x02	; 2
    29d2:	b1 e0       	ldi	r27, 0x01	; 1
    29d4:	ba 83       	std	Y+2, r27	; 0x02
    29d6:	a9 83       	std	Y+1, r26	; 0x01
    29d8:	9c 83       	std	Y+4, r25	; 0x04
    29da:	8b 83       	std	Y+3, r24	; 0x03
    29dc:	77 ff       	sbrs	r23, 7
    29de:	09 c0       	rjmp	.+18     	; 0x29f2 <__vsnprintf+0x52>
    29e0:	8f e4       	ldi	r24, 0x4F	; 79
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__errno_val+0x1>
    29e8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__errno_val>
    29ec:	8f ef       	ldi	r24, 0xFF	; 255
    29ee:	9f ef       	ldi	r25, 0xFF	; 255
    29f0:	19 c0       	rjmp	.+50     	; 0x2a24 <__vsnprintf+0x84>
    29f2:	39 01       	movw	r6, r18
    29f4:	84 2e       	mov	r8, r20
    29f6:	7c 01       	movw	r14, r24
    29f8:	61 50       	subi	r22, 0x01	; 1
    29fa:	71 09       	sbc	r23, r1
    29fc:	7f 83       	std	Y+7, r23	; 0x07
    29fe:	6e 83       	std	Y+6, r22	; 0x06
    2a00:	98 01       	movw	r18, r16
    2a02:	68 2d       	mov	r22, r8
    2a04:	a3 01       	movw	r20, r6
    2a06:	cf 01       	movw	r24, r30
    2a08:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <__vfprintf>
    2a0c:	48 85       	ldd	r20, Y+8	; 0x08
    2a0e:	59 85       	ldd	r21, Y+9	; 0x09
    2a10:	2e 81       	ldd	r18, Y+6	; 0x06
    2a12:	3f 81       	ldd	r19, Y+7	; 0x07
    2a14:	42 17       	cp	r20, r18
    2a16:	53 07       	cpc	r21, r19
    2a18:	08 f4       	brcc	.+2      	; 0x2a1c <__vsnprintf+0x7c>
    2a1a:	9a 01       	movw	r18, r20
    2a1c:	f7 01       	movw	r30, r14
    2a1e:	e2 0f       	add	r30, r18
    2a20:	f3 1f       	adc	r31, r19
    2a22:	10 82       	st	Z, r1
    2a24:	61 96       	adiw	r28, 0x11	; 17
    2a26:	0f b6       	in	r0, 0x3f	; 63
    2a28:	f8 94       	cli
    2a2a:	de bf       	out	0x3e, r29	; 62
    2a2c:	0f be       	out	0x3f, r0	; 63
    2a2e:	cd bf       	out	0x3d, r28	; 61
    2a30:	df 91       	pop	r29
    2a32:	cf 91       	pop	r28
    2a34:	1f 91       	pop	r17
    2a36:	0f 91       	pop	r16
    2a38:	ff 90       	pop	r15
    2a3a:	ef 90       	pop	r14
    2a3c:	8f 90       	pop	r8
    2a3e:	7f 90       	pop	r7
    2a40:	6f 90       	pop	r6
    2a42:	08 95       	ret

Disassembly of section .text.__vfprintf:

00003b96 <__vfprintf>:
    3b96:	a2 e0       	ldi	r26, 0x02	; 2
    3b98:	b0 e0       	ldi	r27, 0x00	; 0
    3b9a:	e1 ed       	ldi	r30, 0xD1	; 209
    3b9c:	fd e1       	ldi	r31, 0x1D	; 29
    3b9e:	0c 94 88 1d 	jmp	0x3b10	; 0x3b10 <__prologue_saves__+0x1c>
    3ba2:	8c 01       	movw	r16, r24
    3ba4:	3a 83       	std	Y+2, r19	; 0x02
    3ba6:	29 83       	std	Y+1, r18	; 0x01
    3ba8:	9e 01       	movw	r18, r28
    3baa:	2f 5f       	subi	r18, 0xFF	; 255
    3bac:	3f 4f       	sbci	r19, 0xFF	; 255
    3bae:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__printf_core>
    3bb2:	f8 01       	movw	r30, r16
    3bb4:	20 81       	ld	r18, Z
    3bb6:	24 ff       	sbrs	r18, 4
    3bb8:	02 c0       	rjmp	.+4      	; 0x3bbe <__vfprintf+0x28>
    3bba:	8f ef       	ldi	r24, 0xFF	; 255
    3bbc:	9f ef       	ldi	r25, 0xFF	; 255
    3bbe:	22 96       	adiw	r28, 0x02	; 2
    3bc0:	e4 e0       	ldi	r30, 0x04	; 4
    3bc2:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__epilogue_restores__+0x1c>

Disassembly of section .text.libgcc.div:

00003f04 <__umoddi3>:
    3f04:	68 94       	set
    3f06:	01 c0       	rjmp	.+2      	; 0x3f0a <__udivdi3_umoddi3>

00003f08 <__udivdi3>:
    3f08:	e8 94       	clt

00003f0a <__udivdi3_umoddi3>:
    3f0a:	8f 92       	push	r8
    3f0c:	9f 92       	push	r9
    3f0e:	cf 93       	push	r28
    3f10:	df 93       	push	r29
    3f12:	0e 94 22 15 	call	0x2a44	; 0x2a44 <__udivmod64>
    3f16:	df 91       	pop	r29
    3f18:	cf 91       	pop	r28
    3f1a:	9f 90       	pop	r9
    3f1c:	8f 90       	pop	r8
    3f1e:	08 95       	ret

Disassembly of section .text.libgcc.div:

00002a44 <__udivmod64>:
    2a44:	88 24       	eor	r8, r8
    2a46:	99 24       	eor	r9, r9
    2a48:	f4 01       	movw	r30, r8
    2a4a:	e4 01       	movw	r28, r8
    2a4c:	b0 e4       	ldi	r27, 0x40	; 64
    2a4e:	9f 93       	push	r25
    2a50:	aa 27       	eor	r26, r26
    2a52:	9a 15       	cp	r25, r10
    2a54:	8b 04       	cpc	r8, r11
    2a56:	9c 04       	cpc	r9, r12
    2a58:	ed 05       	cpc	r30, r13
    2a5a:	fe 05       	cpc	r31, r14
    2a5c:	cf 05       	cpc	r28, r15
    2a5e:	d0 07       	cpc	r29, r16
    2a60:	a1 07       	cpc	r26, r17
    2a62:	98 f4       	brcc	.+38     	; 0x2a8a <__udivmod64+0x46>
    2a64:	ad 2f       	mov	r26, r29
    2a66:	dc 2f       	mov	r29, r28
    2a68:	cf 2f       	mov	r28, r31
    2a6a:	fe 2f       	mov	r31, r30
    2a6c:	e9 2d       	mov	r30, r9
    2a6e:	98 2c       	mov	r9, r8
    2a70:	89 2e       	mov	r8, r25
    2a72:	98 2f       	mov	r25, r24
    2a74:	87 2f       	mov	r24, r23
    2a76:	76 2f       	mov	r23, r22
    2a78:	65 2f       	mov	r22, r21
    2a7a:	54 2f       	mov	r21, r20
    2a7c:	43 2f       	mov	r20, r19
    2a7e:	32 2f       	mov	r19, r18
    2a80:	22 27       	eor	r18, r18
    2a82:	b8 50       	subi	r27, 0x08	; 8
    2a84:	31 f7       	brne	.-52     	; 0x2a52 <__udivmod64+0xe>
    2a86:	bf 91       	pop	r27
    2a88:	27 c0       	rjmp	.+78     	; 0x2ad8 <__udivmod64+0x94>
    2a8a:	1b 2e       	mov	r1, r27
    2a8c:	bf 91       	pop	r27
    2a8e:	bb 27       	eor	r27, r27
    2a90:	22 0f       	add	r18, r18
    2a92:	33 1f       	adc	r19, r19
    2a94:	44 1f       	adc	r20, r20
    2a96:	55 1f       	adc	r21, r21
    2a98:	66 1f       	adc	r22, r22
    2a9a:	77 1f       	adc	r23, r23
    2a9c:	88 1f       	adc	r24, r24
    2a9e:	99 1f       	adc	r25, r25
    2aa0:	88 1c       	adc	r8, r8
    2aa2:	99 1c       	adc	r9, r9
    2aa4:	ee 1f       	adc	r30, r30
    2aa6:	ff 1f       	adc	r31, r31
    2aa8:	cc 1f       	adc	r28, r28
    2aaa:	dd 1f       	adc	r29, r29
    2aac:	aa 1f       	adc	r26, r26
    2aae:	bb 1f       	adc	r27, r27
    2ab0:	8a 14       	cp	r8, r10
    2ab2:	9b 04       	cpc	r9, r11
    2ab4:	ec 05       	cpc	r30, r12
    2ab6:	fd 05       	cpc	r31, r13
    2ab8:	ce 05       	cpc	r28, r14
    2aba:	df 05       	cpc	r29, r15
    2abc:	a0 07       	cpc	r26, r16
    2abe:	b1 07       	cpc	r27, r17
    2ac0:	48 f0       	brcs	.+18     	; 0x2ad4 <__udivmod64+0x90>
    2ac2:	8a 18       	sub	r8, r10
    2ac4:	9b 08       	sbc	r9, r11
    2ac6:	ec 09       	sbc	r30, r12
    2ac8:	fd 09       	sbc	r31, r13
    2aca:	ce 09       	sbc	r28, r14
    2acc:	df 09       	sbc	r29, r15
    2ace:	a0 0b       	sbc	r26, r16
    2ad0:	b1 0b       	sbc	r27, r17
    2ad2:	21 60       	ori	r18, 0x01	; 1
    2ad4:	1a 94       	dec	r1
    2ad6:	e1 f6       	brne	.-72     	; 0x2a90 <__udivmod64+0x4c>
    2ad8:	2e f4       	brtc	.+10     	; 0x2ae4 <__udivmod64+0xa0>
    2ada:	94 01       	movw	r18, r8
    2adc:	af 01       	movw	r20, r30
    2ade:	be 01       	movw	r22, r28
    2ae0:	cd 01       	movw	r24, r26
    2ae2:	00 0c       	add	r0, r0
    2ae4:	08 95       	ret

Disassembly of section .text.libgcc:

00003e6e <__negdi2>:
    3e6e:	60 95       	com	r22
    3e70:	70 95       	com	r23
    3e72:	80 95       	com	r24
    3e74:	90 95       	com	r25
    3e76:	30 95       	com	r19
    3e78:	40 95       	com	r20
    3e7a:	50 95       	com	r21
    3e7c:	21 95       	neg	r18
    3e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e80:	4f 4f       	sbci	r20, 0xFF	; 255
    3e82:	5f 4f       	sbci	r21, 0xFF	; 255
    3e84:	6f 4f       	sbci	r22, 0xFF	; 255
    3e86:	7f 4f       	sbci	r23, 0xFF	; 255
    3e88:	8f 4f       	sbci	r24, 0xFF	; 255
    3e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e8c:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00003af4 <__prologue_saves__>:
    3af4:	2f 92       	push	r2
    3af6:	3f 92       	push	r3
    3af8:	4f 92       	push	r4
    3afa:	5f 92       	push	r5
    3afc:	6f 92       	push	r6
    3afe:	7f 92       	push	r7
    3b00:	8f 92       	push	r8
    3b02:	9f 92       	push	r9
    3b04:	af 92       	push	r10
    3b06:	bf 92       	push	r11
    3b08:	cf 92       	push	r12
    3b0a:	df 92       	push	r13
    3b0c:	ef 92       	push	r14
    3b0e:	ff 92       	push	r15
    3b10:	0f 93       	push	r16
    3b12:	1f 93       	push	r17
    3b14:	cf 93       	push	r28
    3b16:	df 93       	push	r29
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
    3b1c:	ca 1b       	sub	r28, r26
    3b1e:	db 0b       	sbc	r29, r27
    3b20:	0f b6       	in	r0, 0x3f	; 63
    3b22:	f8 94       	cli
    3b24:	de bf       	out	0x3e, r29	; 62
    3b26:	0f be       	out	0x3f, r0	; 63
    3b28:	cd bf       	out	0x3d, r28	; 61
    3b2a:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00003b2c <__epilogue_restores__>:
    3b2c:	2a 88       	ldd	r2, Y+18	; 0x12
    3b2e:	39 88       	ldd	r3, Y+17	; 0x11
    3b30:	48 88       	ldd	r4, Y+16	; 0x10
    3b32:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b34:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b36:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b38:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b3e:	b9 84       	ldd	r11, Y+9	; 0x09
    3b40:	c8 84       	ldd	r12, Y+8	; 0x08
    3b42:	df 80       	ldd	r13, Y+7	; 0x07
    3b44:	ee 80       	ldd	r14, Y+6	; 0x06
    3b46:	fd 80       	ldd	r15, Y+5	; 0x05
    3b48:	0c 81       	ldd	r16, Y+4	; 0x04
    3b4a:	1b 81       	ldd	r17, Y+3	; 0x03
    3b4c:	aa 81       	ldd	r26, Y+2	; 0x02
    3b4e:	b9 81       	ldd	r27, Y+1	; 0x01
    3b50:	ce 0f       	add	r28, r30
    3b52:	d1 1d       	adc	r29, r1
    3b54:	0f b6       	in	r0, 0x3f	; 63
    3b56:	f8 94       	cli
    3b58:	de bf       	out	0x3e, r29	; 62
    3b5a:	0f be       	out	0x3f, r0	; 63
    3b5c:	cd bf       	out	0x3d, r28	; 61
    3b5e:	ed 01       	movw	r28, r26
    3b60:	08 95       	ret

Disassembly of section .text.libgcc.builtins:

00003ab8 <__ashrdi3>:
    3ab8:	97 fb       	bst	r25, 7
    3aba:	10 f8       	bld	r1, 0

00003abc <__lshrdi3>:
    3abc:	16 94       	lsr	r1
    3abe:	00 08       	sbc	r0, r0
    3ac0:	0f 93       	push	r16
    3ac2:	08 30       	cpi	r16, 0x08	; 8
    3ac4:	98 f0       	brcs	.+38     	; 0x3aec <__lshrdi3+0x30>
    3ac6:	08 50       	subi	r16, 0x08	; 8
    3ac8:	23 2f       	mov	r18, r19
    3aca:	34 2f       	mov	r19, r20
    3acc:	45 2f       	mov	r20, r21
    3ace:	56 2f       	mov	r21, r22
    3ad0:	67 2f       	mov	r22, r23
    3ad2:	78 2f       	mov	r23, r24
    3ad4:	89 2f       	mov	r24, r25
    3ad6:	90 2d       	mov	r25, r0
    3ad8:	f4 cf       	rjmp	.-24     	; 0x3ac2 <__lshrdi3+0x6>
    3ada:	05 94       	asr	r0
    3adc:	97 95       	ror	r25
    3ade:	87 95       	ror	r24
    3ae0:	77 95       	ror	r23
    3ae2:	67 95       	ror	r22
    3ae4:	57 95       	ror	r21
    3ae6:	47 95       	ror	r20
    3ae8:	37 95       	ror	r19
    3aea:	27 95       	ror	r18
    3aec:	0a 95       	dec	r16
    3aee:	aa f7       	brpl	.-22     	; 0x3ada <__lshrdi3+0x1e>
    3af0:	0f 91       	pop	r16
    3af2:	08 95       	ret

Disassembly of section .text.libgcc:

00003fb4 <__cmpdi2_s8>:
    3fb4:	00 24       	eor	r0, r0
    3fb6:	a7 fd       	sbrc	r26, 7
    3fb8:	00 94       	com	r0
    3fba:	2a 17       	cp	r18, r26
    3fbc:	30 05       	cpc	r19, r0
    3fbe:	40 05       	cpc	r20, r0
    3fc0:	50 05       	cpc	r21, r0
    3fc2:	60 05       	cpc	r22, r0
    3fc4:	70 05       	cpc	r23, r0
    3fc6:	80 05       	cpc	r24, r0
    3fc8:	90 05       	cpc	r25, r0
    3fca:	08 95       	ret
